
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000271e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  0000271e  000027b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  0080017c  0080017c  000028ce  2**0
                  ALLOC
  3 .stab         0000282c  00000000  00000000  000028d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001443  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000653f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000066bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00006890  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000088a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00009a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000aa04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000aba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000ae62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 50 06 	call	0xca0	; 0xca0 <main>
      8a:	0c 94 8d 13 	jmp	0x271a	; 0x271a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <main>:
uint8 received_pass[5], received_confirmed_pass[5], saved_pass[5];
uint8 row=0, col=0, received=0, save=0, read=0, result=0, count=0,hmi_command=0;


int main()
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	a2 97       	sbiw	r28, 0x22	; 34
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
	/* Enable I_bit */
	SREG|=(1<<7);
     cb4:	af e5       	ldi	r26, 0x5F	; 95
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ef e5       	ldi	r30, 0x5F	; 95
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8c 93       	st	X, r24

	/* Initialization of the UART driver with Baud-rate = 9600 bits/sec */
	UART_ConfigType uart_config={EIGHT_BITS,ONE_BIT,DISABLED,9600};
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	9d 8b       	std	Y+21, r25	; 0x15
     cc8:	8c 8b       	std	Y+20, r24	; 0x14
     cca:	e4 e7       	ldi	r30, 0x74	; 116
     ccc:	f1 e0       	ldi	r31, 0x01	; 1
     cce:	ff 8b       	std	Y+23, r31	; 0x17
     cd0:	ee 8b       	std	Y+22, r30	; 0x16
     cd2:	f7 e0       	ldi	r31, 0x07	; 7
     cd4:	f8 8f       	std	Y+24, r31	; 0x18
     cd6:	ee 89       	ldd	r30, Y+22	; 0x16
     cd8:	ff 89       	ldd	r31, Y+23	; 0x17
     cda:	00 80       	ld	r0, Z
     cdc:	8e 89       	ldd	r24, Y+22	; 0x16
     cde:	9f 89       	ldd	r25, Y+23	; 0x17
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	9f 8b       	std	Y+23, r25	; 0x17
     ce4:	8e 8b       	std	Y+22, r24	; 0x16
     ce6:	ec 89       	ldd	r30, Y+20	; 0x14
     ce8:	fd 89       	ldd	r31, Y+21	; 0x15
     cea:	00 82       	st	Z, r0
     cec:	8c 89       	ldd	r24, Y+20	; 0x14
     cee:	9d 89       	ldd	r25, Y+21	; 0x15
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	9d 8b       	std	Y+21, r25	; 0x15
     cf4:	8c 8b       	std	Y+20, r24	; 0x14
     cf6:	98 8d       	ldd	r25, Y+24	; 0x18
     cf8:	91 50       	subi	r25, 0x01	; 1
     cfa:	98 8f       	std	Y+24, r25	; 0x18
     cfc:	e8 8d       	ldd	r30, Y+24	; 0x18
     cfe:	ee 23       	and	r30, r30
     d00:	51 f7       	brne	.-44     	; 0xcd6 <main+0x36>
	UART_init(&uart_config);
     d02:	ce 01       	movw	r24, r28
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	0e 94 19 12 	call	0x2432	; 0x2432 <UART_init>

	/* Initialization of the I2C driver with F(SCL)= 400kb/s */
	TWI_ConfigType twi_config={MC_ADDRESS,FAST_MODE};
     d0a:	ce 01       	movw	r24, r28
     d0c:	08 96       	adiw	r24, 0x08	; 8
     d0e:	9a 8f       	std	Y+26, r25	; 0x1a
     d10:	89 8f       	std	Y+25, r24	; 0x19
     d12:	ee e6       	ldi	r30, 0x6E	; 110
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	fc 8f       	std	Y+28, r31	; 0x1c
     d18:	eb 8f       	std	Y+27, r30	; 0x1b
     d1a:	f6 e0       	ldi	r31, 0x06	; 6
     d1c:	fd 8f       	std	Y+29, r31	; 0x1d
     d1e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     d20:	fc 8d       	ldd	r31, Y+28	; 0x1c
     d22:	00 80       	ld	r0, Z
     d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d26:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	9c 8f       	std	Y+28, r25	; 0x1c
     d2c:	8b 8f       	std	Y+27, r24	; 0x1b
     d2e:	e9 8d       	ldd	r30, Y+25	; 0x19
     d30:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d32:	00 82       	st	Z, r0
     d34:	89 8d       	ldd	r24, Y+25	; 0x19
     d36:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	9a 8f       	std	Y+26, r25	; 0x1a
     d3c:	89 8f       	std	Y+25, r24	; 0x19
     d3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d40:	91 50       	subi	r25, 0x01	; 1
     d42:	9d 8f       	std	Y+29, r25	; 0x1d
     d44:	ed 8d       	ldd	r30, Y+29	; 0x1d
     d46:	ee 23       	and	r30, r30
     d48:	51 f7       	brne	.-44     	; 0xd1e <main+0x7e>
	TWI_init(&twi_config);
     d4a:	ce 01       	movw	r24, r28
     d4c:	08 96       	adiw	r24, 0x08	; 8
     d4e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_init>

	Timer1_ConfigType timer1_config={0,7813,COMPARE_MODE,CPU_CLK_PRESCALER_1024};
     d52:	ce 01       	movw	r24, r28
     d54:	0e 96       	adiw	r24, 0x0e	; 14
     d56:	9f 8f       	std	Y+31, r25	; 0x1f
     d58:	8e 8f       	std	Y+30, r24	; 0x1e
     d5a:	e8 e6       	ldi	r30, 0x68	; 104
     d5c:	f1 e0       	ldi	r31, 0x01	; 1
     d5e:	f9 a3       	std	Y+33, r31	; 0x21
     d60:	e8 a3       	std	Y+32, r30	; 0x20
     d62:	f6 e0       	ldi	r31, 0x06	; 6
     d64:	fa a3       	std	Y+34, r31	; 0x22
     d66:	e8 a1       	ldd	r30, Y+32	; 0x20
     d68:	f9 a1       	ldd	r31, Y+33	; 0x21
     d6a:	00 80       	ld	r0, Z
     d6c:	88 a1       	ldd	r24, Y+32	; 0x20
     d6e:	99 a1       	ldd	r25, Y+33	; 0x21
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	99 a3       	std	Y+33, r25	; 0x21
     d74:	88 a3       	std	Y+32, r24	; 0x20
     d76:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d78:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d7a:	00 82       	st	Z, r0
     d7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	9f 8f       	std	Y+31, r25	; 0x1f
     d84:	8e 8f       	std	Y+30, r24	; 0x1e
     d86:	9a a1       	ldd	r25, Y+34	; 0x22
     d88:	91 50       	subi	r25, 0x01	; 1
     d8a:	9a a3       	std	Y+34, r25	; 0x22
     d8c:	ea a1       	ldd	r30, Y+34	; 0x22
     d8e:	ee 23       	and	r30, r30
     d90:	51 f7       	brne	.-44     	; 0xd66 <main+0xc6>

	/* Initialization of DC Motor driver */
	DcMotor_Init();
     d92:	0e 94 be 0b 	call	0x177c	; 0x177c <DcMotor_Init>

	/* Initialization of Buzzer driver */
	Buzzer_init();
     d96:	0e 94 95 0b 	call	0x172a	; 0x172a <Buzzer_init>

	UART_clearBuffer();
     d9a:	0e 94 16 13 	call	0x262c	; 0x262c <UART_clearBuffer>

	while(1)
	{
		/* Store the reply of the control ECU */
		if(g_uart_buffer[0]!=CLEAR)
     d9e:	80 91 99 01 	lds	r24, 0x0199
     da2:	84 36       	cpi	r24, 0x64	; 100
     da4:	21 f0       	breq	.+8      	; 0xdae <main+0x10e>
		{
			hmi_command=g_uart_buffer[0];
     da6:	80 91 99 01 	lds	r24, 0x0199
     daa:	80 93 83 01 	sts	0x0183, r24
		}
		if((read==0) ||(hmi_command==CREATE_PASS))
     dae:	80 91 80 01 	lds	r24, 0x0180
     db2:	88 23       	and	r24, r24
     db4:	21 f0       	breq	.+8      	; 0xdbe <main+0x11e>
     db6:	80 91 83 01 	lds	r24, 0x0183
     dba:	8d 30       	cpi	r24, 0x0D	; 13
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <main+0x124>
		{
			compare_passwords();
     dbe:	0e 94 50 07 	call	0xea0	; 0xea0 <compare_passwords>
     dc2:	ed cf       	rjmp	.-38     	; 0xd9e <main+0xfe>
		}

		else if(save==1)
     dc4:	80 91 7f 01 	lds	r24, 0x017F
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	19 f4       	brne	.+6      	; 0xdd2 <main+0x132>
		{
			save_password();
     dcc:	0e 94 14 08 	call	0x1028	; 0x1028 <save_password>
     dd0:	e6 cf       	rjmp	.-52     	; 0xd9e <main+0xfe>
		}

		else if(hmi_command==CHECK)
     dd2:	80 91 83 01 	lds	r24, 0x0183
     dd6:	88 30       	cpi	r24, 0x08	; 8
     dd8:	31 f5       	brne	.+76     	; 0xe26 <main+0x186>
		{
			result=check_password();
     dda:	0e 94 b6 08 	call	0x116c	; 0x116c <check_password>
     dde:	80 93 81 01 	sts	0x0181, r24
			UART_sendByte(result);
     de2:	80 91 81 01 	lds	r24, 0x0181
     de6:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_sendByte>

			if(result==MATCHED)
     dea:	80 91 81 01 	lds	r24, 0x0181
     dee:	8b 30       	cpi	r24, 0x0B	; 11
     df0:	29 f4       	brne	.+10     	; 0xdfc <main+0x15c>
			{
				action_for_matched_pass_inControl();
     df2:	0e 94 8b 09 	call	0x1316	; 0x1316 <action_for_matched_pass_inControl>
				UART_clearBuffer();
     df6:	0e 94 16 13 	call	0x262c	; 0x262c <UART_clearBuffer>
     dfa:	d1 cf       	rjmp	.-94     	; 0xd9e <main+0xfe>
			}
			else
			{
				UART_clearBuffer();
     dfc:	0e 94 16 13 	call	0x262c	; 0x262c <UART_clearBuffer>
				if(count==2)
     e00:	80 91 82 01 	lds	r24, 0x0182
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	31 f4       	brne	.+12     	; 0xe14 <main+0x174>
				{
					hmi_command=UNMATCHED_ACTION;
     e08:	89 e0       	ldi	r24, 0x09	; 9
     e0a:	80 93 83 01 	sts	0x0183, r24
					count=0;
     e0e:	10 92 82 01 	sts	0x0182, r1
     e12:	c5 cf       	rjmp	.-118    	; 0xd9e <main+0xfe>
				}
				else
				{
					count++;
     e14:	80 91 82 01 	lds	r24, 0x0182
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	80 93 82 01 	sts	0x0182, r24
					hmi_command=CLEAR;
     e1e:	84 e6       	ldi	r24, 0x64	; 100
     e20:	80 93 83 01 	sts	0x0183, r24
     e24:	bc cf       	rjmp	.-136    	; 0xd9e <main+0xfe>
				}
			}
		}

		else if(hmi_command==CHANGE_PASS)
     e26:	80 91 83 01 	lds	r24, 0x0183
     e2a:	87 30       	cpi	r24, 0x07	; 7
     e2c:	79 f5       	brne	.+94     	; 0xe8c <main+0x1ec>
		{
			result=check_password();
     e2e:	0e 94 b6 08 	call	0x116c	; 0x116c <check_password>
     e32:	80 93 81 01 	sts	0x0181, r24
			UART_sendByte(result);
     e36:	80 91 81 01 	lds	r24, 0x0181
     e3a:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_sendByte>

			if(result==MATCHED)
     e3e:	80 91 81 01 	lds	r24, 0x0181
     e42:	8b 30       	cpi	r24, 0x0B	; 11
     e44:	71 f4       	brne	.+28     	; 0xe62 <main+0x1c2>
			{
				UART_clearBuffer();
     e46:	0e 94 16 13 	call	0x262c	; 0x262c <UART_clearBuffer>
				received=0; save=0; read=0; result=0;
     e4a:	10 92 7e 01 	sts	0x017E, r1
     e4e:	10 92 7f 01 	sts	0x017F, r1
     e52:	10 92 80 01 	sts	0x0180, r1
     e56:	10 92 81 01 	sts	0x0181, r1
				hmi_command=CREATE_PASS;
     e5a:	8d e0       	ldi	r24, 0x0D	; 13
     e5c:	80 93 83 01 	sts	0x0183, r24
     e60:	9e cf       	rjmp	.-196    	; 0xd9e <main+0xfe>
			}
			else
			{
				UART_clearBuffer();
     e62:	0e 94 16 13 	call	0x262c	; 0x262c <UART_clearBuffer>
				if(count==2)
     e66:	80 91 82 01 	lds	r24, 0x0182
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <main+0x1da>
				{
					hmi_command=UNMATCHED_ACTION;
     e6e:	89 e0       	ldi	r24, 0x09	; 9
     e70:	80 93 83 01 	sts	0x0183, r24
					count=0;
     e74:	10 92 82 01 	sts	0x0182, r1
     e78:	92 cf       	rjmp	.-220    	; 0xd9e <main+0xfe>
				}
				else
				{
					count++;
     e7a:	80 91 82 01 	lds	r24, 0x0182
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	80 93 82 01 	sts	0x0182, r24
					hmi_command=CLEAR;
     e84:	84 e6       	ldi	r24, 0x64	; 100
     e86:	80 93 83 01 	sts	0x0183, r24
     e8a:	89 cf       	rjmp	.-238    	; 0xd9e <main+0xfe>
				}
			}
		}

		else if(hmi_command==UNMATCHED_ACTION)
     e8c:	80 91 83 01 	lds	r24, 0x0183
     e90:	89 30       	cpi	r24, 0x09	; 9
     e92:	09 f0       	breq	.+2      	; 0xe96 <main+0x1f6>
     e94:	84 cf       	rjmp	.-248    	; 0xd9e <main+0xfe>
		{
			action_for_unmatched_pass_inControl();
     e96:	0e 94 04 0b 	call	0x1608	; 0x1608 <action_for_unmatched_pass_inControl>
			count=0;
     e9a:	10 92 82 01 	sts	0x0182, r1
     e9e:	7f cf       	rjmp	.-258    	; 0xd9e <main+0xfe>

00000ea0 <compare_passwords>:
 *********************************************************************************/

/* iterators */
uint8 x=0, y=0;
void compare_passwords()
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	15 c0       	rjmp	.+42     	; 0xed4 <compare_passwords+0x34>
	while((x<5) && (g_uart_buffer[x]!=CLEAR))
	{
		received_pass[x]=g_uart_buffer[x];
     eaa:	80 91 84 01 	lds	r24, 0x0184
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	80 91 84 01 	lds	r24, 0x0184
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	fc 01       	movw	r30, r24
     ebc:	e7 56       	subi	r30, 0x67	; 103
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	80 81       	ld	r24, Z
     ec2:	f9 01       	movw	r30, r18
     ec4:	e6 57       	subi	r30, 0x76	; 118
     ec6:	fe 4f       	sbci	r31, 0xFE	; 254
     ec8:	80 83       	st	Z, r24
		x++;
     eca:	80 91 84 01 	lds	r24, 0x0184
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	80 93 84 01 	sts	0x0184, r24

/* iterators */
uint8 x=0, y=0;
void compare_passwords()
{
	while((x<5) && (g_uart_buffer[x]!=CLEAR))
     ed4:	80 91 84 01 	lds	r24, 0x0184
     ed8:	85 30       	cpi	r24, 0x05	; 5
     eda:	70 f5       	brcc	.+92     	; 0xf38 <compare_passwords+0x98>
     edc:	80 91 84 01 	lds	r24, 0x0184
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	fc 01       	movw	r30, r24
     ee6:	e7 56       	subi	r30, 0x67	; 103
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	80 81       	ld	r24, Z
     eec:	84 36       	cpi	r24, 0x64	; 100
     eee:	e9 f6       	brne	.-70     	; 0xeaa <compare_passwords+0xa>
     ef0:	23 c0       	rjmp	.+70     	; 0xf38 <compare_passwords+0x98>
		x++;
	}

	while((x>=5) && (x<10) && (g_uart_buffer[x]!=CLEAR))
	{
		received_confirmed_pass[y]=g_uart_buffer[x];
     ef2:	80 91 85 01 	lds	r24, 0x0185
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	80 91 84 01 	lds	r24, 0x0184
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	fc 01       	movw	r30, r24
     f04:	e7 56       	subi	r30, 0x67	; 103
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	80 81       	ld	r24, Z
     f0a:	f9 01       	movw	r30, r18
     f0c:	ec 56       	subi	r30, 0x6C	; 108
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	80 83       	st	Z, r24
		if(x==9)
     f12:	80 91 84 01 	lds	r24, 0x0184
     f16:	89 30       	cpi	r24, 0x09	; 9
     f18:	29 f4       	brne	.+10     	; 0xf24 <compare_passwords+0x84>
		{
			UART_clearBuffer();
     f1a:	0e 94 16 13 	call	0x262c	; 0x262c <UART_clearBuffer>
			received=1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 7e 01 	sts	0x017E, r24
		}
		x++; y++;
     f24:	80 91 84 01 	lds	r24, 0x0184
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	80 93 84 01 	sts	0x0184, r24
     f2e:	80 91 85 01 	lds	r24, 0x0185
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	80 93 85 01 	sts	0x0185, r24
	{
		received_pass[x]=g_uart_buffer[x];
		x++;
	}

	while((x>=5) && (x<10) && (g_uart_buffer[x]!=CLEAR))
     f38:	80 91 84 01 	lds	r24, 0x0184
     f3c:	85 30       	cpi	r24, 0x05	; 5
     f3e:	70 f0       	brcs	.+28     	; 0xf5c <compare_passwords+0xbc>
     f40:	80 91 84 01 	lds	r24, 0x0184
     f44:	8a 30       	cpi	r24, 0x0A	; 10
     f46:	50 f4       	brcc	.+20     	; 0xf5c <compare_passwords+0xbc>
     f48:	80 91 84 01 	lds	r24, 0x0184
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	fc 01       	movw	r30, r24
     f52:	e7 56       	subi	r30, 0x67	; 103
     f54:	fe 4f       	sbci	r31, 0xFE	; 254
     f56:	80 81       	ld	r24, Z
     f58:	84 36       	cpi	r24, 0x64	; 100
     f5a:	59 f6       	brne	.-106    	; 0xef2 <compare_passwords+0x52>
			UART_clearBuffer();
			received=1;
		}
		x++; y++;
	}
	if((received==1) && (x!=0))
     f5c:	80 91 7e 01 	lds	r24, 0x017E
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	09 f0       	breq	.+2      	; 0xf66 <compare_passwords+0xc6>
     f64:	5e c0       	rjmp	.+188    	; 0x1022 <compare_passwords+0x182>
     f66:	80 91 84 01 	lds	r24, 0x0184
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <compare_passwords+0xd0>
     f6e:	59 c0       	rjmp	.+178    	; 0x1022 <compare_passwords+0x182>
	{
		/* Comparing the 2 received passwords */
		for(x=0; x<5; x++)
     f70:	10 92 84 01 	sts	0x0184, r1
     f74:	51 c0       	rjmp	.+162    	; 0x1018 <compare_passwords+0x178>
		{
			if(received_confirmed_pass[x]==received_pass[x])
     f76:	80 91 84 01 	lds	r24, 0x0184
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	fc 01       	movw	r30, r24
     f80:	ec 56       	subi	r30, 0x6C	; 108
     f82:	fe 4f       	sbci	r31, 0xFE	; 254
     f84:	20 81       	ld	r18, Z
     f86:	80 91 84 01 	lds	r24, 0x0184
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	fc 01       	movw	r30, r24
     f90:	e6 57       	subi	r30, 0x76	; 118
     f92:	fe 4f       	sbci	r31, 0xFE	; 254
     f94:	80 81       	ld	r24, Z
     f96:	28 17       	cp	r18, r24
     f98:	71 f5       	brne	.+92     	; 0xff6 <compare_passwords+0x156>
			{
				if((x==4) && (received_confirmed_pass[x]==received_pass[x]))
     f9a:	80 91 84 01 	lds	r24, 0x0184
     f9e:	84 30       	cpi	r24, 0x04	; 4
     fa0:	21 f5       	brne	.+72     	; 0xfea <compare_passwords+0x14a>
     fa2:	80 91 84 01 	lds	r24, 0x0184
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	fc 01       	movw	r30, r24
     fac:	ec 56       	subi	r30, 0x6C	; 108
     fae:	fe 4f       	sbci	r31, 0xFE	; 254
     fb0:	20 81       	ld	r18, Z
     fb2:	80 91 84 01 	lds	r24, 0x0184
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	fc 01       	movw	r30, r24
     fbc:	e6 57       	subi	r30, 0x76	; 118
     fbe:	fe 4f       	sbci	r31, 0xFE	; 254
     fc0:	80 81       	ld	r24, Z
     fc2:	28 17       	cp	r18, r24
     fc4:	91 f4       	brne	.+36     	; 0xfea <compare_passwords+0x14a>
				{
					save=1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 7f 01 	sts	0x017F, r24
					read=1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 80 01 	sts	0x0180, r24
					UART_sendByte(MATCHED);
     fd2:	8b e0       	ldi	r24, 0x0B	; 11
     fd4:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_sendByte>
					x=0; y=0;
     fd8:	10 92 84 01 	sts	0x0184, r1
     fdc:	10 92 85 01 	sts	0x0185, r1
					received=0;
     fe0:	10 92 7e 01 	sts	0x017E, r1
					UART_clearBuffer();
     fe4:	0e 94 16 13 	call	0x262c	; 0x262c <UART_clearBuffer>
     fe8:	1c c0       	rjmp	.+56     	; 0x1022 <compare_passwords+0x182>
		x++; y++;
	}
	if((received==1) && (x!=0))
	{
		/* Comparing the 2 received passwords */
		for(x=0; x<5; x++)
     fea:	80 91 84 01 	lds	r24, 0x0184
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	80 93 84 01 	sts	0x0184, r24
     ff4:	11 c0       	rjmp	.+34     	; 0x1018 <compare_passwords+0x178>
					break;
				}
			}
			else
			{
				read=1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	80 93 80 01 	sts	0x0180, r24
				save=0;
     ffc:	10 92 7f 01 	sts	0x017F, r1
				UART_sendByte(UNMATCHED);
    1000:	8c e0       	ldi	r24, 0x0C	; 12
    1002:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_sendByte>
				x=0; y=0;
    1006:	10 92 84 01 	sts	0x0184, r1
    100a:	10 92 85 01 	sts	0x0185, r1
				received=0;
    100e:	10 92 7e 01 	sts	0x017E, r1
				UART_clearBuffer();
    1012:	0e 94 16 13 	call	0x262c	; 0x262c <UART_clearBuffer>
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <compare_passwords+0x182>
		x++; y++;
	}
	if((received==1) && (x!=0))
	{
		/* Comparing the 2 received passwords */
		for(x=0; x<5; x++)
    1018:	80 91 84 01 	lds	r24, 0x0184
    101c:	85 30       	cpi	r24, 0x05	; 5
    101e:	08 f4       	brcc	.+2      	; 0x1022 <compare_passwords+0x182>
    1020:	aa cf       	rjmp	.-172    	; 0xf76 <compare_passwords+0xd6>
				UART_clearBuffer();
				break;
			}
		}
	}
}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <save_password>:

void save_password()
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	2f 97       	sbiw	r28, 0x0f	; 15
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
	uint8 b=0;
    103c:	1f 86       	std	Y+15, r1	; 0x0f
	for(b=0; b<5; b++)
    103e:	1f 86       	std	Y+15, r1	; 0x0f
    1040:	86 c0       	rjmp	.+268    	; 0x114e <save_password+0x126>
	{
		EEPROM_writeByte(EEPROM_ADDRESS+b,received_confirmed_pass[b]);
    1042:	8f 85       	ldd	r24, Y+15	; 0x0f
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	8f 5e       	subi	r24, 0xEF	; 239
    104a:	9c 4f       	sbci	r25, 0xFC	; 252
    104c:	ac 01       	movw	r20, r24
    104e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	fc 01       	movw	r30, r24
    1056:	ec 56       	subi	r30, 0x6C	; 108
    1058:	fe 4f       	sbci	r31, 0xFE	; 254
    105a:	20 81       	ld	r18, Z
    105c:	ca 01       	movw	r24, r20
    105e:	62 2f       	mov	r22, r18
    1060:	0e 94 1e 0c 	call	0x183c	; 0x183c <EEPROM_writeByte>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a0 e2       	ldi	r26, 0x20	; 32
    106a:	b1 e4       	ldi	r27, 0x41	; 65
    106c:	8b 87       	std	Y+11, r24	; 0x0b
    106e:	9c 87       	std	Y+12, r25	; 0x0c
    1070:	ad 87       	std	Y+13, r26	; 0x0d
    1072:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1074:	6b 85       	ldd	r22, Y+11	; 0x0b
    1076:	7c 85       	ldd	r23, Y+12	; 0x0c
    1078:	8d 85       	ldd	r24, Y+13	; 0x0d
    107a:	9e 85       	ldd	r25, Y+14	; 0x0e
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4a ef       	ldi	r20, 0xFA	; 250
    1082:	54 e4       	ldi	r21, 0x44	; 68
    1084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	8f 83       	std	Y+7, r24	; 0x07
    108e:	98 87       	std	Y+8, r25	; 0x08
    1090:	a9 87       	std	Y+9, r26	; 0x09
    1092:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1094:	6f 81       	ldd	r22, Y+7	; 0x07
    1096:	78 85       	ldd	r23, Y+8	; 0x08
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a8:	88 23       	and	r24, r24
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <save_password+0x8e>
		__ticks = 1;
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
    10b4:	3f c0       	rjmp	.+126    	; 0x1134 <save_password+0x10c>
	else if (__tmp > 65535)
    10b6:	6f 81       	ldd	r22, Y+7	; 0x07
    10b8:	78 85       	ldd	r23, Y+8	; 0x08
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	3f ef       	ldi	r19, 0xFF	; 255
    10c2:	4f e7       	ldi	r20, 0x7F	; 127
    10c4:	57 e4       	ldi	r21, 0x47	; 71
    10c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ca:	18 16       	cp	r1, r24
    10cc:	4c f5       	brge	.+82     	; 0x1120 <save_password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e2       	ldi	r20, 0x20	; 32
    10dc:	51 e4       	ldi	r21, 0x41	; 65
    10de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	9e 83       	std	Y+6, r25	; 0x06
    10f4:	8d 83       	std	Y+5, r24	; 0x05
    10f6:	0f c0       	rjmp	.+30     	; 0x1116 <save_password+0xee>
    10f8:	88 ec       	ldi	r24, 0xC8	; 200
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	9c 83       	std	Y+4, r25	; 0x04
    10fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <save_password+0xdc>
    1108:	9c 83       	std	Y+4, r25	; 0x04
    110a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	69 f7       	brne	.-38     	; 0x10f8 <save_password+0xd0>
    111e:	14 c0       	rjmp	.+40     	; 0x1148 <save_password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1120:	6f 81       	ldd	r22, Y+7	; 0x07
    1122:	78 85       	ldd	r23, Y+8	; 0x08
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	9e 83       	std	Y+6, r25	; 0x06
    1132:	8d 83       	std	Y+5, r24	; 0x05
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <save_password+0x118>
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
}

void save_password()
{
	uint8 b=0;
	for(b=0; b<5; b++)
    1148:	8f 85       	ldd	r24, Y+15	; 0x0f
    114a:	8f 5f       	subi	r24, 0xFF	; 255
    114c:	8f 87       	std	Y+15, r24	; 0x0f
    114e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1150:	85 30       	cpi	r24, 0x05	; 5
    1152:	08 f4       	brcc	.+2      	; 0x1156 <save_password+0x12e>
    1154:	76 cf       	rjmp	.-276    	; 0x1042 <save_password+0x1a>
	{
		EEPROM_writeByte(EEPROM_ADDRESS+b,received_confirmed_pass[b]);
		_delay_ms(10);
	}
	save=0;
    1156:	10 92 7f 01 	sts	0x017F, r1
}
    115a:	2f 96       	adiw	r28, 0x0f	; 15
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <check_password>:

uint8 check_password()
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	60 97       	sbiw	r28, 0x10	; 16
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
	uint8 b=0;
    1180:	1f 86       	std	Y+15, r1	; 0x0f
	for(b=0; b<5; b++)
    1182:	1f 86       	std	Y+15, r1	; 0x0f
    1184:	85 c0       	rjmp	.+266    	; 0x1290 <check_password+0x124>
	{
		EEPROM_readByte(EEPROM_ADDRESS+b,(saved_pass+b));
    1186:	8f 85       	ldd	r24, Y+15	; 0x0f
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	8f 5e       	subi	r24, 0xEF	; 239
    118e:	9c 4f       	sbci	r25, 0xFC	; 252
    1190:	ac 01       	movw	r20, r24
    1192:	8f 85       	ldd	r24, Y+15	; 0x0f
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9c 01       	movw	r18, r24
    119a:	21 57       	subi	r18, 0x71	; 113
    119c:	3e 4f       	sbci	r19, 0xFE	; 254
    119e:	ca 01       	movw	r24, r20
    11a0:	b9 01       	movw	r22, r18
    11a2:	0e 94 5f 0c 	call	0x18be	; 0x18be <EEPROM_readByte>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 e2       	ldi	r26, 0x20	; 32
    11ac:	b1 e4       	ldi	r27, 0x41	; 65
    11ae:	8b 87       	std	Y+11, r24	; 0x0b
    11b0:	9c 87       	std	Y+12, r25	; 0x0c
    11b2:	ad 87       	std	Y+13, r26	; 0x0d
    11b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    11bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4a ef       	ldi	r20, 0xFA	; 250
    11c4:	54 e4       	ldi	r21, 0x44	; 68
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	8f 83       	std	Y+7, r24	; 0x07
    11d0:	98 87       	std	Y+8, r25	; 0x08
    11d2:	a9 87       	std	Y+9, r26	; 0x09
    11d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <check_password+0x8c>
		__ticks = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <check_password+0x10a>
	else if (__tmp > 65535)
    11f8:	6f 81       	ldd	r22, Y+7	; 0x07
    11fa:	78 85       	ldd	r23, Y+8	; 0x08
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120c:	18 16       	cp	r1, r24
    120e:	4c f5       	brge	.+82     	; 0x1262 <check_password+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	6b 85       	ldd	r22, Y+11	; 0x0b
    1212:	7c 85       	ldd	r23, Y+12	; 0x0c
    1214:	8d 85       	ldd	r24, Y+13	; 0x0d
    1216:	9e 85       	ldd	r25, Y+14	; 0x0e
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e2       	ldi	r20, 0x20	; 32
    121e:	51 e4       	ldi	r21, 0x41	; 65
    1220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <check_password+0xec>
    123a:	88 ec       	ldi	r24, 0xC8	; 200
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9c 83       	std	Y+4, r25	; 0x04
    1240:	8b 83       	std	Y+3, r24	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <check_password+0xda>
    124a:	9c 83       	std	Y+4, r25	; 0x04
    124c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f7       	brne	.-38     	; 0x123a <check_password+0xce>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <check_password+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9e 83       	std	Y+6, r25	; 0x06
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <check_password+0x116>
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
}

uint8 check_password()
{
	uint8 b=0;
	for(b=0; b<5; b++)
    128a:	8f 85       	ldd	r24, Y+15	; 0x0f
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	8f 87       	std	Y+15, r24	; 0x0f
    1290:	8f 85       	ldd	r24, Y+15	; 0x0f
    1292:	85 30       	cpi	r24, 0x05	; 5
    1294:	08 f4       	brcc	.+2      	; 0x1298 <check_password+0x12c>
    1296:	77 cf       	rjmp	.-274    	; 0x1186 <check_password+0x1a>
	{
		EEPROM_readByte(EEPROM_ADDRESS+b,(saved_pass+b));
		_delay_ms(10);
	}

	for(b=1; b<=5; b++)
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	8f 87       	std	Y+15, r24	; 0x0f
    129c:	2c c0       	rjmp	.+88     	; 0x12f6 <check_password+0x18a>
	{
		if((g_uart_buffer[b]!=saved_pass[b]))
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	88 2f       	mov	r24, r24
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	fc 01       	movw	r30, r24
    12a6:	e7 56       	subi	r30, 0x67	; 103
    12a8:	fe 4f       	sbci	r31, 0xFE	; 254
    12aa:	20 81       	ld	r18, Z
    12ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	fc 01       	movw	r30, r24
    12b4:	e1 57       	subi	r30, 0x71	; 113
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	80 81       	ld	r24, Z
    12ba:	28 17       	cp	r18, r24
    12bc:	19 f0       	breq	.+6      	; 0x12c4 <check_password+0x158>
		{
			return UNMATCHED;
    12be:	8c e0       	ldi	r24, 0x0C	; 12
    12c0:	88 8b       	std	Y+16, r24	; 0x10
    12c2:	1f c0       	rjmp	.+62     	; 0x1302 <check_password+0x196>
		}
		if((b==5) && (g_uart_buffer[b]==saved_pass[b]))
    12c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c6:	85 30       	cpi	r24, 0x05	; 5
    12c8:	99 f4       	brne	.+38     	; 0x12f0 <check_password+0x184>
    12ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	fc 01       	movw	r30, r24
    12d2:	e7 56       	subi	r30, 0x67	; 103
    12d4:	fe 4f       	sbci	r31, 0xFE	; 254
    12d6:	20 81       	ld	r18, Z
    12d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	fc 01       	movw	r30, r24
    12e0:	e1 57       	subi	r30, 0x71	; 113
    12e2:	fe 4f       	sbci	r31, 0xFE	; 254
    12e4:	80 81       	ld	r24, Z
    12e6:	28 17       	cp	r18, r24
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <check_password+0x184>
		{
			return MATCHED;
    12ea:	8b e0       	ldi	r24, 0x0B	; 11
    12ec:	88 8b       	std	Y+16, r24	; 0x10
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <check_password+0x196>
	{
		EEPROM_readByte(EEPROM_ADDRESS+b,(saved_pass+b));
		_delay_ms(10);
	}

	for(b=1; b<=5; b++)
    12f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f2:	8f 5f       	subi	r24, 0xFF	; 255
    12f4:	8f 87       	std	Y+15, r24	; 0x0f
    12f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f8:	86 30       	cpi	r24, 0x06	; 6
    12fa:	88 f2       	brcs	.-94     	; 0x129e <check_password+0x132>
		{
			return MATCHED;
		}
	}

	UART_clearBuffer();
    12fc:	0e 94 16 13 	call	0x262c	; 0x262c <UART_clearBuffer>
	return 0;
    1300:	18 8a       	std	Y+16, r1	; 0x10
    1302:	88 89       	ldd	r24, Y+16	; 0x10
}
    1304:	60 96       	adiw	r28, 0x10	; 16
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <action_for_matched_pass_inControl>:

/* The Motor doesn't work with the called back function as it continue to rotate in
 * the same direction once it has started
 */
void action_for_matched_pass_inControl(void)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	aa 97       	sbiw	r28, 0x2a	; 42
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
	/* Real time isn't accurate on the simulation */
	/* Rotate For 15 sec */
	DcMotor_Rotate(CW,100);
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	64 e6       	ldi	r22, 0x64	; 100
    132e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DcMotor_Rotate>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e6       	ldi	r25, 0x60	; 96
    1336:	aa ee       	ldi	r26, 0xEA	; 234
    1338:	b6 e4       	ldi	r27, 0x46	; 70
    133a:	8f a3       	std	Y+39, r24	; 0x27
    133c:	98 a7       	std	Y+40, r25	; 0x28
    133e:	a9 a7       	std	Y+41, r26	; 0x29
    1340:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1342:	6f a1       	ldd	r22, Y+39	; 0x27
    1344:	78 a5       	ldd	r23, Y+40	; 0x28
    1346:	89 a5       	ldd	r24, Y+41	; 0x29
    1348:	9a a5       	ldd	r25, Y+42	; 0x2a
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	4a ef       	ldi	r20, 0xFA	; 250
    1350:	54 e4       	ldi	r21, 0x44	; 68
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	8b a3       	std	Y+35, r24	; 0x23
    135c:	9c a3       	std	Y+36, r25	; 0x24
    135e:	ad a3       	std	Y+37, r26	; 0x25
    1360:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1362:	6b a1       	ldd	r22, Y+35	; 0x23
    1364:	7c a1       	ldd	r23, Y+36	; 0x24
    1366:	8d a1       	ldd	r24, Y+37	; 0x25
    1368:	9e a1       	ldd	r25, Y+38	; 0x26
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f e3       	ldi	r21, 0x3F	; 63
    1372:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1376:	88 23       	and	r24, r24
    1378:	2c f4       	brge	.+10     	; 0x1384 <action_for_matched_pass_inControl+0x6e>
		__ticks = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9a a3       	std	Y+34, r25	; 0x22
    1380:	89 a3       	std	Y+33, r24	; 0x21
    1382:	3f c0       	rjmp	.+126    	; 0x1402 <action_for_matched_pass_inControl+0xec>
	else if (__tmp > 65535)
    1384:	6b a1       	ldd	r22, Y+35	; 0x23
    1386:	7c a1       	ldd	r23, Y+36	; 0x24
    1388:	8d a1       	ldd	r24, Y+37	; 0x25
    138a:	9e a1       	ldd	r25, Y+38	; 0x26
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	3f ef       	ldi	r19, 0xFF	; 255
    1390:	4f e7       	ldi	r20, 0x7F	; 127
    1392:	57 e4       	ldi	r21, 0x47	; 71
    1394:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1398:	18 16       	cp	r1, r24
    139a:	4c f5       	brge	.+82     	; 0x13ee <action_for_matched_pass_inControl+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139c:	6f a1       	ldd	r22, Y+39	; 0x27
    139e:	78 a5       	ldd	r23, Y+40	; 0x28
    13a0:	89 a5       	ldd	r24, Y+41	; 0x29
    13a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	51 e4       	ldi	r21, 0x41	; 65
    13ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	9a a3       	std	Y+34, r25	; 0x22
    13c2:	89 a3       	std	Y+33, r24	; 0x21
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <action_for_matched_pass_inControl+0xce>
    13c6:	88 ec       	ldi	r24, 0xC8	; 200
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	98 a3       	std	Y+32, r25	; 0x20
    13cc:	8f 8f       	std	Y+31, r24	; 0x1f
    13ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13d0:	98 a1       	ldd	r25, Y+32	; 0x20
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <action_for_matched_pass_inControl+0xbc>
    13d6:	98 a3       	std	Y+32, r25	; 0x20
    13d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13da:	89 a1       	ldd	r24, Y+33	; 0x21
    13dc:	9a a1       	ldd	r25, Y+34	; 0x22
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	9a a3       	std	Y+34, r25	; 0x22
    13e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e4:	89 a1       	ldd	r24, Y+33	; 0x21
    13e6:	9a a1       	ldd	r25, Y+34	; 0x22
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	69 f7       	brne	.-38     	; 0x13c6 <action_for_matched_pass_inControl+0xb0>
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <action_for_matched_pass_inControl+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ee:	6b a1       	ldd	r22, Y+35	; 0x23
    13f0:	7c a1       	ldd	r23, Y+36	; 0x24
    13f2:	8d a1       	ldd	r24, Y+37	; 0x25
    13f4:	9e a1       	ldd	r25, Y+38	; 0x26
    13f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9a a3       	std	Y+34, r25	; 0x22
    1400:	89 a3       	std	Y+33, r24	; 0x21
    1402:	89 a1       	ldd	r24, Y+33	; 0x21
    1404:	9a a1       	ldd	r25, Y+34	; 0x22
    1406:	9e 8f       	std	Y+30, r25	; 0x1e
    1408:	8d 8f       	std	Y+29, r24	; 0x1d
    140a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    140c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <action_for_matched_pass_inControl+0xf8>
    1412:	9e 8f       	std	Y+30, r25	; 0x1e
    1414:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30000);

	/* Hold For 3 sec */
	DcMotor_Rotate(STOP,0);
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DcMotor_Rotate>
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	aa e7       	ldi	r26, 0x7A	; 122
    1424:	b5 e4       	ldi	r27, 0x45	; 69
    1426:	89 8f       	std	Y+25, r24	; 0x19
    1428:	9a 8f       	std	Y+26, r25	; 0x1a
    142a:	ab 8f       	std	Y+27, r26	; 0x1b
    142c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142e:	69 8d       	ldd	r22, Y+25	; 0x19
    1430:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	4a ef       	ldi	r20, 0xFA	; 250
    143c:	54 e4       	ldi	r21, 0x44	; 68
    143e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	8d 8b       	std	Y+21, r24	; 0x15
    1448:	9e 8b       	std	Y+22, r25	; 0x16
    144a:	af 8b       	std	Y+23, r26	; 0x17
    144c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    144e:	6d 89       	ldd	r22, Y+21	; 0x15
    1450:	7e 89       	ldd	r23, Y+22	; 0x16
    1452:	8f 89       	ldd	r24, Y+23	; 0x17
    1454:	98 8d       	ldd	r25, Y+24	; 0x18
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	5f e3       	ldi	r21, 0x3F	; 63
    145e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1462:	88 23       	and	r24, r24
    1464:	2c f4       	brge	.+10     	; 0x1470 <action_for_matched_pass_inControl+0x15a>
		__ticks = 1;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9c 8b       	std	Y+20, r25	; 0x14
    146c:	8b 8b       	std	Y+19, r24	; 0x13
    146e:	3f c0       	rjmp	.+126    	; 0x14ee <action_for_matched_pass_inControl+0x1d8>
	else if (__tmp > 65535)
    1470:	6d 89       	ldd	r22, Y+21	; 0x15
    1472:	7e 89       	ldd	r23, Y+22	; 0x16
    1474:	8f 89       	ldd	r24, Y+23	; 0x17
    1476:	98 8d       	ldd	r25, Y+24	; 0x18
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	3f ef       	ldi	r19, 0xFF	; 255
    147c:	4f e7       	ldi	r20, 0x7F	; 127
    147e:	57 e4       	ldi	r21, 0x47	; 71
    1480:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1484:	18 16       	cp	r1, r24
    1486:	4c f5       	brge	.+82     	; 0x14da <action_for_matched_pass_inControl+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1488:	69 8d       	ldd	r22, Y+25	; 0x19
    148a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    148c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e2       	ldi	r20, 0x20	; 32
    1496:	51 e4       	ldi	r21, 0x41	; 65
    1498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	9c 8b       	std	Y+20, r25	; 0x14
    14ae:	8b 8b       	std	Y+19, r24	; 0x13
    14b0:	0f c0       	rjmp	.+30     	; 0x14d0 <action_for_matched_pass_inControl+0x1ba>
    14b2:	88 ec       	ldi	r24, 0xC8	; 200
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	9a 8b       	std	Y+18, r25	; 0x12
    14b8:	89 8b       	std	Y+17, r24	; 0x11
    14ba:	89 89       	ldd	r24, Y+17	; 0x11
    14bc:	9a 89       	ldd	r25, Y+18	; 0x12
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <action_for_matched_pass_inControl+0x1a8>
    14c2:	9a 8b       	std	Y+18, r25	; 0x12
    14c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c6:	8b 89       	ldd	r24, Y+19	; 0x13
    14c8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	9c 8b       	std	Y+20, r25	; 0x14
    14ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d0:	8b 89       	ldd	r24, Y+19	; 0x13
    14d2:	9c 89       	ldd	r25, Y+20	; 0x14
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	69 f7       	brne	.-38     	; 0x14b2 <action_for_matched_pass_inControl+0x19c>
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <action_for_matched_pass_inControl+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14da:	6d 89       	ldd	r22, Y+21	; 0x15
    14dc:	7e 89       	ldd	r23, Y+22	; 0x16
    14de:	8f 89       	ldd	r24, Y+23	; 0x17
    14e0:	98 8d       	ldd	r25, Y+24	; 0x18
    14e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9c 8b       	std	Y+20, r25	; 0x14
    14ec:	8b 8b       	std	Y+19, r24	; 0x13
    14ee:	8b 89       	ldd	r24, Y+19	; 0x13
    14f0:	9c 89       	ldd	r25, Y+20	; 0x14
    14f2:	98 8b       	std	Y+16, r25	; 0x10
    14f4:	8f 87       	std	Y+15, r24	; 0x0f
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <action_for_matched_pass_inControl+0x1e4>
    14fe:	98 8b       	std	Y+16, r25	; 0x10
    1500:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(4000);

	/* Rotate For 15 sec */
	DcMotor_Rotate(A_CW,100);
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	64 e6       	ldi	r22, 0x64	; 100
    1506:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DcMotor_Rotate>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e6       	ldi	r25, 0x60	; 96
    150e:	aa ee       	ldi	r26, 0xEA	; 234
    1510:	b6 e4       	ldi	r27, 0x46	; 70
    1512:	8b 87       	std	Y+11, r24	; 0x0b
    1514:	9c 87       	std	Y+12, r25	; 0x0c
    1516:	ad 87       	std	Y+13, r26	; 0x0d
    1518:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151a:	6b 85       	ldd	r22, Y+11	; 0x0b
    151c:	7c 85       	ldd	r23, Y+12	; 0x0c
    151e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1520:	9e 85       	ldd	r25, Y+14	; 0x0e
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4a ef       	ldi	r20, 0xFA	; 250
    1528:	54 e4       	ldi	r21, 0x44	; 68
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8f 83       	std	Y+7, r24	; 0x07
    1534:	98 87       	std	Y+8, r25	; 0x08
    1536:	a9 87       	std	Y+9, r26	; 0x09
    1538:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154e:	88 23       	and	r24, r24
    1550:	2c f4       	brge	.+10     	; 0x155c <action_for_matched_pass_inControl+0x246>
		__ticks = 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
    155a:	3f c0       	rjmp	.+126    	; 0x15da <action_for_matched_pass_inControl+0x2c4>
	else if (__tmp > 65535)
    155c:	6f 81       	ldd	r22, Y+7	; 0x07
    155e:	78 85       	ldd	r23, Y+8	; 0x08
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	9a 85       	ldd	r25, Y+10	; 0x0a
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	3f ef       	ldi	r19, 0xFF	; 255
    1568:	4f e7       	ldi	r20, 0x7F	; 127
    156a:	57 e4       	ldi	r21, 0x47	; 71
    156c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1570:	18 16       	cp	r1, r24
    1572:	4c f5       	brge	.+82     	; 0x15c6 <action_for_matched_pass_inControl+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1574:	6b 85       	ldd	r22, Y+11	; 0x0b
    1576:	7c 85       	ldd	r23, Y+12	; 0x0c
    1578:	8d 85       	ldd	r24, Y+13	; 0x0d
    157a:	9e 85       	ldd	r25, Y+14	; 0x0e
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <action_for_matched_pass_inControl+0x2a6>
    159e:	88 ec       	ldi	r24, 0xC8	; 200
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <action_for_matched_pass_inControl+0x294>
    15ae:	9c 83       	std	Y+4, r25	; 0x04
    15b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	69 f7       	brne	.-38     	; 0x159e <action_for_matched_pass_inControl+0x288>
    15c4:	14 c0       	rjmp	.+40     	; 0x15ee <action_for_matched_pass_inControl+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <action_for_matched_pass_inControl+0x2d0>
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30000);

	DcMotor_Rotate(STOP,0);
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DcMotor_Rotate>

}
    15f6:	aa 96       	adiw	r28, 0x2a	; 42
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <action_for_unmatched_pass_inControl>:

/* The passed function to call_back function of the timer (timer1)*/
void action_for_unmatched_pass_inControl(void)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	2e 97       	sbiw	r28, 0x0e	; 14
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
	/* activate the motor and the buzzer for 1 min */
	DcMotor_Rotate(A_CW,100);
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	64 e6       	ldi	r22, 0x64	; 100
    1620:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DcMotor_Rotate>
	Buzzer_on();
    1624:	0e 94 a6 0b 	call	0x174c	; 0x174c <Buzzer_on>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e6       	ldi	r25, 0x60	; 96
    162c:	aa e6       	ldi	r26, 0x6A	; 106
    162e:	b7 e4       	ldi	r27, 0x47	; 71
    1630:	8b 87       	std	Y+11, r24	; 0x0b
    1632:	9c 87       	std	Y+12, r25	; 0x0c
    1634:	ad 87       	std	Y+13, r26	; 0x0d
    1636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1638:	6b 85       	ldd	r22, Y+11	; 0x0b
    163a:	7c 85       	ldd	r23, Y+12	; 0x0c
    163c:	8d 85       	ldd	r24, Y+13	; 0x0d
    163e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4a ef       	ldi	r20, 0xFA	; 250
    1646:	54 e4       	ldi	r21, 0x44	; 68
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	8f 83       	std	Y+7, r24	; 0x07
    1652:	98 87       	std	Y+8, r25	; 0x08
    1654:	a9 87       	std	Y+9, r26	; 0x09
    1656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1658:	6f 81       	ldd	r22, Y+7	; 0x07
    165a:	78 85       	ldd	r23, Y+8	; 0x08
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    166c:	88 23       	and	r24, r24
    166e:	2c f4       	brge	.+10     	; 0x167a <action_for_unmatched_pass_inControl+0x72>
		__ticks = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	3f c0       	rjmp	.+126    	; 0x16f8 <action_for_unmatched_pass_inControl+0xf0>
	else if (__tmp > 65535)
    167a:	6f 81       	ldd	r22, Y+7	; 0x07
    167c:	78 85       	ldd	r23, Y+8	; 0x08
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	3f ef       	ldi	r19, 0xFF	; 255
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	57 e4       	ldi	r21, 0x47	; 71
    168a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    168e:	18 16       	cp	r1, r24
    1690:	4c f5       	brge	.+82     	; 0x16e4 <action_for_unmatched_pass_inControl+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e2       	ldi	r20, 0x20	; 32
    16a0:	51 e4       	ldi	r21, 0x41	; 65
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	0f c0       	rjmp	.+30     	; 0x16da <action_for_unmatched_pass_inControl+0xd2>
    16bc:	88 ec       	ldi	r24, 0xC8	; 200
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <action_for_unmatched_pass_inControl+0xc0>
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	69 f7       	brne	.-38     	; 0x16bc <action_for_unmatched_pass_inControl+0xb4>
    16e2:	14 c0       	rjmp	.+40     	; 0x170c <action_for_unmatched_pass_inControl+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <action_for_unmatched_pass_inControl+0xfc>
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(60000);
	DcMotor_Rotate(STOP,0);
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <DcMotor_Rotate>
	Buzzer_off();
    1714:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Buzzer_off>
}
    1718:	2e 96       	adiw	r28, 0x0e	; 14
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <Buzzer_init>:

#include "buzzer.h"
#include "gpio.h"

void Buzzer_init()
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	/* Setting the direction of the Buzzer pin as output*/
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	61 e0       	ldi	r22, 0x01	; 1
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	0e 94 bf 0c 	call	0x197e	; 0x197e <GPIO_setupPinDirection>

	/* Turn off The Buzzer at the beginning */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_LOW);
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <Buzzer_on>:

void Buzzer_on(void)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	/* Enable the Buzzer */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_HIGH);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <Buzzer_off>:

void Buzzer_off(void)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_LOW);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
}
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <DcMotor_Init>:
 *******************************************************************************/
#include "dc_motor.h"
#include "gpio.h"
#include "pwm.h"

void DcMotor_Init(void){
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	/* Setup the direction for the two motor pins */
	GPIO_setupPinDirection(DC_MOTOR_TERMINAL1_PORT_ID,DC_MOTOR_TERMINAL1_PIN_ID,PIN_OUTPUT);
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	65 e0       	ldi	r22, 0x05	; 5
    1788:	41 e0       	ldi	r20, 0x01	; 1
    178a:	0e 94 bf 0c 	call	0x197e	; 0x197e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_TERMINAL2_PORT_ID,DC_MOTOR_TERMINAL2_PIN_ID,PIN_OUTPUT);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	66 e0       	ldi	r22, 0x06	; 6
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	0e 94 bf 0c 	call	0x197e	; 0x197e <GPIO_setupPinDirection>

	/* Stop at the DC-Motor at the beginning */
	GPIO_writePin(DC_MOTOR_TERMINAL1_PORT_ID,DC_MOTOR_TERMINAL1_PIN_ID,LOGIC_LOW);
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	65 e0       	ldi	r22, 0x05	; 5
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_TERMINAL2_PORT_ID,DC_MOTOR_TERMINAL2_PIN_ID,LOGIC_LOW);
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	66 e0       	ldi	r22, 0x06	; 6
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DcMotor_Rotate+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <DcMotor_Rotate+0x8>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	6a 83       	std	Y+2, r22	; 0x02

	switch(state){
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3c 83       	std	Y+4, r19	; 0x04
    17ca:	2b 83       	std	Y+3, r18	; 0x03
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	91 05       	cpc	r25, r1
    17d4:	a1 f0       	breq	.+40     	; 0x17fe <DcMotor_Rotate+0x4c>
    17d6:	2b 81       	ldd	r18, Y+3	; 0x03
    17d8:	3c 81       	ldd	r19, Y+4	; 0x04
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	d1 f0       	breq	.+52     	; 0x1814 <DcMotor_Rotate+0x62>
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	01 f5       	brne	.+64     	; 0x1828 <DcMotor_Rotate+0x76>
	case STOP:
		GPIO_writePin(DC_MOTOR_TERMINAL1_PORT_ID,DC_MOTOR_TERMINAL1_PIN_ID,LOGIC_LOW);
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	65 e0       	ldi	r22, 0x05	; 5
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_TERMINAL2_PORT_ID,DC_MOTOR_TERMINAL2_PIN_ID,LOGIC_LOW);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	66 e0       	ldi	r22, 0x06	; 6
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
    17fc:	15 c0       	rjmp	.+42     	; 0x1828 <DcMotor_Rotate+0x76>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_TERMINAL1_PORT_ID,DC_MOTOR_TERMINAL1_PIN_ID,LOGIC_LOW);
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	65 e0       	ldi	r22, 0x05	; 5
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_TERMINAL2_PORT_ID,DC_MOTOR_TERMINAL2_PIN_ID,LOGIC_HIGH);
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	66 e0       	ldi	r22, 0x06	; 6
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
    1812:	0a c0       	rjmp	.+20     	; 0x1828 <DcMotor_Rotate+0x76>
		break;
	case A_CW:
		GPIO_writePin(DC_MOTOR_TERMINAL1_PORT_ID,DC_MOTOR_TERMINAL1_PIN_ID,LOGIC_HIGH);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	65 e0       	ldi	r22, 0x05	; 5
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_TERMINAL2_PORT_ID,DC_MOTOR_TERMINAL2_PIN_ID,LOGIC_LOW);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	66 e0       	ldi	r22, 0x06	; 6
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <GPIO_writePin>
		break;
	}
	PWM_Timer0_Start(speed);
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	0e 94 a4 10 	call	0x2148	; 0x2148 <PWM_Timer0_Start>
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	00 d0       	rcall	.+0      	; 0x1842 <EEPROM_writeByte+0x6>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <EEPROM_writeByte+0x8>
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    184e:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1852:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1856:	88 30       	cpi	r24, 0x08	; 8
    1858:	11 f0       	breq	.+4      	; 0x185e <EEPROM_writeByte+0x22>
        return ERROR;
    185a:	1c 82       	std	Y+4, r1	; 0x04
    185c:	28 c0       	rjmp	.+80     	; 0x18ae <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	80 70       	andi	r24, 0x00	; 0
    1864:	97 70       	andi	r25, 0x07	; 7
    1866:	88 0f       	add	r24, r24
    1868:	89 2f       	mov	r24, r25
    186a:	88 1f       	adc	r24, r24
    186c:	99 0b       	sbc	r25, r25
    186e:	91 95       	neg	r25
    1870:	80 6a       	ori	r24, 0xA0	; 160
    1872:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1876:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    187a:	88 31       	cpi	r24, 0x18	; 24
    187c:	11 f0       	breq	.+4      	; 0x1882 <EEPROM_writeByte+0x46>
        return ERROR;
    187e:	1c 82       	std	Y+4, r1	; 0x04
    1880:	16 c0       	rjmp	.+44     	; 0x18ae <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1888:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    188c:	88 32       	cpi	r24, 0x28	; 40
    188e:	11 f0       	breq	.+4      	; 0x1894 <EEPROM_writeByte+0x58>
        return ERROR;
    1890:	1c 82       	std	Y+4, r1	; 0x04
    1892:	0d c0       	rjmp	.+26     	; 0x18ae <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    189a:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    189e:	88 32       	cpi	r24, 0x28	; 40
    18a0:	11 f0       	breq	.+4      	; 0x18a6 <EEPROM_writeByte+0x6a>
        return ERROR;
    18a2:	1c 82       	std	Y+4, r1	; 0x04
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    18a6:	0e 94 4d 10 	call	0x209a	; 0x209a <TWI_stop>

    return SUCCESS;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	8c 83       	std	Y+4, r24	; 0x04
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <EEPROM_readByte+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <EEPROM_readByte+0x8>
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	7c 83       	std	Y+4, r23	; 0x04
    18d2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18d4:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    18d8:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    18dc:	88 30       	cpi	r24, 0x08	; 8
    18de:	11 f0       	breq	.+4      	; 0x18e4 <EEPROM_readByte+0x26>
        return ERROR;
    18e0:	1d 82       	std	Y+5, r1	; 0x05
    18e2:	44 c0       	rjmp	.+136    	; 0x196c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	80 70       	andi	r24, 0x00	; 0
    18ea:	97 70       	andi	r25, 0x07	; 7
    18ec:	88 0f       	add	r24, r24
    18ee:	89 2f       	mov	r24, r25
    18f0:	88 1f       	adc	r24, r24
    18f2:	99 0b       	sbc	r25, r25
    18f4:	91 95       	neg	r25
    18f6:	80 6a       	ori	r24, 0xA0	; 160
    18f8:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18fc:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1900:	88 31       	cpi	r24, 0x18	; 24
    1902:	11 f0       	breq	.+4      	; 0x1908 <EEPROM_readByte+0x4a>
        return ERROR;
    1904:	1d 82       	std	Y+5, r1	; 0x05
    1906:	32 c0       	rjmp	.+100    	; 0x196c <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    190e:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1912:	88 32       	cpi	r24, 0x28	; 40
    1914:	11 f0       	breq	.+4      	; 0x191a <EEPROM_readByte+0x5c>
        return ERROR;
    1916:	1d 82       	std	Y+5, r1	; 0x05
    1918:	29 c0       	rjmp	.+82     	; 0x196c <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    191a:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    191e:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1922:	80 31       	cpi	r24, 0x10	; 16
    1924:	11 f0       	breq	.+4      	; 0x192a <EEPROM_readByte+0x6c>
        return ERROR;
    1926:	1d 82       	std	Y+5, r1	; 0x05
    1928:	21 c0       	rjmp	.+66     	; 0x196c <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	80 70       	andi	r24, 0x00	; 0
    1930:	97 70       	andi	r25, 0x07	; 7
    1932:	88 0f       	add	r24, r24
    1934:	89 2f       	mov	r24, r25
    1936:	88 1f       	adc	r24, r24
    1938:	99 0b       	sbc	r25, r25
    193a:	91 95       	neg	r25
    193c:	81 6a       	ori	r24, 0xA1	; 161
    193e:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1942:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1946:	80 34       	cpi	r24, 0x40	; 64
    1948:	11 f0       	breq	.+4      	; 0x194e <EEPROM_readByte+0x90>
        return ERROR;
    194a:	1d 82       	std	Y+5, r1	; 0x05
    194c:	0f c0       	rjmp	.+30     	; 0x196c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    194e:	0e 94 82 10 	call	0x2104	; 0x2104 <TWI_readByteWithNACK>
    1952:	eb 81       	ldd	r30, Y+3	; 0x03
    1954:	fc 81       	ldd	r31, Y+4	; 0x04
    1956:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1958:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    195c:	88 35       	cpi	r24, 0x58	; 88
    195e:	11 f0       	breq	.+4      	; 0x1964 <EEPROM_readByte+0xa6>
        return ERROR;
    1960:	1d 82       	std	Y+5, r1	; 0x05
    1962:	04 c0       	rjmp	.+8      	; 0x196c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1964:	0e 94 4d 10 	call	0x209a	; 0x209a <TWI_stop>

    return SUCCESS;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <GPIO_setupPinDirection>:
#include "gpio.h"
#include "common_macros.h"
#include "avr/io.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <GPIO_setupPinDirection+0x6>
    1984:	00 d0       	rcall	.+0      	; 0x1986 <GPIO_setupPinDirection+0x8>
    1986:	0f 92       	push	r0
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	6a 83       	std	Y+2, r22	; 0x02
    1990:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	88 30       	cpi	r24, 0x08	; 8
    1996:	08 f0       	brcs	.+2      	; 0x199a <GPIO_setupPinDirection+0x1c>
    1998:	d5 c0       	rjmp	.+426    	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	84 30       	cpi	r24, 0x04	; 4
    199e:	08 f0       	brcs	.+2      	; 0x19a2 <GPIO_setupPinDirection+0x24>
    19a0:	d1 c0       	rjmp	.+418    	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	3d 83       	std	Y+5, r19	; 0x05
    19aa:	2c 83       	std	Y+4, r18	; 0x04
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	9d 81       	ldd	r25, Y+5	; 0x05
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	91 05       	cpc	r25, r1
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <GPIO_setupPinDirection+0x3a>
    19b6:	43 c0       	rjmp	.+134    	; 0x1a3e <GPIO_setupPinDirection+0xc0>
    19b8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ba:	3d 81       	ldd	r19, Y+5	; 0x05
    19bc:	22 30       	cpi	r18, 0x02	; 2
    19be:	31 05       	cpc	r19, r1
    19c0:	2c f4       	brge	.+10     	; 0x19cc <GPIO_setupPinDirection+0x4e>
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	71 f0       	breq	.+28     	; 0x19e6 <GPIO_setupPinDirection+0x68>
    19ca:	bc c0       	rjmp	.+376    	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
    19cc:	2c 81       	ldd	r18, Y+4	; 0x04
    19ce:	3d 81       	ldd	r19, Y+5	; 0x05
    19d0:	22 30       	cpi	r18, 0x02	; 2
    19d2:	31 05       	cpc	r19, r1
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <GPIO_setupPinDirection+0x5a>
    19d6:	5f c0       	rjmp	.+190    	; 0x1a96 <GPIO_setupPinDirection+0x118>
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	83 30       	cpi	r24, 0x03	; 3
    19de:	91 05       	cpc	r25, r1
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <GPIO_setupPinDirection+0x66>
    19e2:	85 c0       	rjmp	.+266    	; 0x1aee <GPIO_setupPinDirection+0x170>
    19e4:	af c0       	rjmp	.+350    	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	a1 f4       	brne	.+40     	; 0x1a14 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    19ec:	aa e3       	ldi	r26, 0x3A	; 58
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ea e3       	ldi	r30, 0x3A	; 58
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <GPIO_setupPinDirection+0x8c>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <GPIO_setupPinDirection+0x88>
    1a0e:	84 2b       	or	r24, r20
    1a10:	8c 93       	st	X, r24
    1a12:	98 c0       	rjmp	.+304    	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a14:	aa e3       	ldi	r26, 0x3A	; 58
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	ea e3       	ldi	r30, 0x3A	; 58
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	02 2e       	mov	r0, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <GPIO_setupPinDirection+0xb4>
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	0a 94       	dec	r0
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <GPIO_setupPinDirection+0xb0>
    1a36:	80 95       	com	r24
    1a38:	84 23       	and	r24, r20
    1a3a:	8c 93       	st	X, r24
    1a3c:	83 c0       	rjmp	.+262    	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	a1 f4       	brne	.+40     	; 0x1a6c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a44:	a7 e3       	ldi	r26, 0x37	; 55
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e7 e3       	ldi	r30, 0x37	; 55
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <GPIO_setupPinDirection+0xe4>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <GPIO_setupPinDirection+0xe0>
    1a66:	84 2b       	or	r24, r20
    1a68:	8c 93       	st	X, r24
    1a6a:	6c c0       	rjmp	.+216    	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a6c:	a7 e3       	ldi	r26, 0x37	; 55
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e7 e3       	ldi	r30, 0x37	; 55
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <GPIO_setupPinDirection+0x10c>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <GPIO_setupPinDirection+0x108>
    1a8e:	80 95       	com	r24
    1a90:	84 23       	and	r24, r20
    1a92:	8c 93       	st	X, r24
    1a94:	57 c0       	rjmp	.+174    	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	81 30       	cpi	r24, 0x01	; 1
    1a9a:	a1 f4       	brne	.+40     	; 0x1ac4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a9c:	a4 e3       	ldi	r26, 0x34	; 52
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e4 e3       	ldi	r30, 0x34	; 52
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <GPIO_setupPinDirection+0x13c>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <GPIO_setupPinDirection+0x138>
    1abe:	84 2b       	or	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	40 c0       	rjmp	.+128    	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ac4:	a4 e3       	ldi	r26, 0x34	; 52
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e4 e3       	ldi	r30, 0x34	; 52
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <GPIO_setupPinDirection+0x164>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <GPIO_setupPinDirection+0x160>
    1ae6:	80 95       	com	r24
    1ae8:	84 23       	and	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	2b c0       	rjmp	.+86     	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	a1 f4       	brne	.+40     	; 0x1b1c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1af4:	a1 e3       	ldi	r26, 0x31	; 49
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e1 e3       	ldi	r30, 0x31	; 49
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <GPIO_setupPinDirection+0x194>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <GPIO_setupPinDirection+0x190>
    1b16:	84 2b       	or	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b1c:	a1 e3       	ldi	r26, 0x31	; 49
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e1 e3       	ldi	r30, 0x31	; 49
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <GPIO_setupPinDirection+0x1bc>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <GPIO_setupPinDirection+0x1b8>
    1b3e:	80 95       	com	r24
    1b40:	84 23       	and	r24, r20
    1b42:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <GPIO_writePin>:


void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <GPIO_writePin+0x6>
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <GPIO_writePin+0x8>
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	6a 83       	std	Y+2, r22	; 0x02
    1b66:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	88 30       	cpi	r24, 0x08	; 8
    1b6c:	08 f0       	brcs	.+2      	; 0x1b70 <GPIO_writePin+0x1c>
    1b6e:	d5 c0       	rjmp	.+426    	; 0x1d1a <GPIO_writePin+0x1c6>
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	84 30       	cpi	r24, 0x04	; 4
    1b74:	08 f0       	brcs	.+2      	; 0x1b78 <GPIO_writePin+0x24>
    1b76:	d1 c0       	rjmp	.+418    	; 0x1d1a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3d 83       	std	Y+5, r19	; 0x05
    1b80:	2c 83       	std	Y+4, r18	; 0x04
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	91 05       	cpc	r25, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <GPIO_writePin+0x3a>
    1b8c:	43 c0       	rjmp	.+134    	; 0x1c14 <GPIO_writePin+0xc0>
    1b8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b90:	3d 81       	ldd	r19, Y+5	; 0x05
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <GPIO_writePin+0x4e>
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	71 f0       	breq	.+28     	; 0x1bbc <GPIO_writePin+0x68>
    1ba0:	bc c0       	rjmp	.+376    	; 0x1d1a <GPIO_writePin+0x1c6>
    1ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <GPIO_writePin+0x5a>
    1bac:	5f c0       	rjmp	.+190    	; 0x1c6c <GPIO_writePin+0x118>
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <GPIO_writePin+0x66>
    1bb8:	85 c0       	rjmp	.+266    	; 0x1cc4 <GPIO_writePin+0x170>
    1bba:	af c0       	rjmp	.+350    	; 0x1d1a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW)
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	88 23       	and	r24, r24
    1bc0:	a9 f4       	brne	.+42     	; 0x1bec <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
    1bc2:	ab e3       	ldi	r26, 0x3B	; 59
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	eb e3       	ldi	r30, 0x3B	; 59
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <GPIO_writePin+0x8c>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <GPIO_writePin+0x88>
    1be4:	80 95       	com	r24
    1be6:	84 23       	and	r24, r20
    1be8:	8c 93       	st	X, r24
    1bea:	97 c0       	rjmp	.+302    	; 0x1d1a <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
    1bec:	ab e3       	ldi	r26, 0x3B	; 59
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	eb e3       	ldi	r30, 0x3B	; 59
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	48 2f       	mov	r20, r24
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	02 2e       	mov	r0, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <GPIO_writePin+0xb6>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	0a 94       	dec	r0
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <GPIO_writePin+0xb2>
    1c0e:	84 2b       	or	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	83 c0       	rjmp	.+262    	; 0x1d1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW)
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 23       	and	r24, r24
    1c18:	a9 f4       	brne	.+42     	; 0x1c44 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    1c1a:	a8 e3       	ldi	r26, 0x38	; 56
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e8 e3       	ldi	r30, 0x38	; 56
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <GPIO_writePin+0xe4>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <GPIO_writePin+0xe0>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	6b c0       	rjmp	.+214    	; 0x1d1a <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    1c44:	a8 e3       	ldi	r26, 0x38	; 56
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e8 e3       	ldi	r30, 0x38	; 56
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 2e       	mov	r0, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <GPIO_writePin+0x10e>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	0a 94       	dec	r0
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <GPIO_writePin+0x10a>
    1c66:	84 2b       	or	r24, r20
    1c68:	8c 93       	st	X, r24
    1c6a:	57 c0       	rjmp	.+174    	; 0x1d1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW)
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	88 23       	and	r24, r24
    1c70:	a9 f4       	brne	.+42     	; 0x1c9c <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
    1c72:	a5 e3       	ldi	r26, 0x35	; 53
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e5 e3       	ldi	r30, 0x35	; 53
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	02 2e       	mov	r0, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <GPIO_writePin+0x13c>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	0a 94       	dec	r0
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <GPIO_writePin+0x138>
    1c94:	80 95       	com	r24
    1c96:	84 23       	and	r24, r20
    1c98:	8c 93       	st	X, r24
    1c9a:	3f c0       	rjmp	.+126    	; 0x1d1a <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
    1c9c:	a5 e3       	ldi	r26, 0x35	; 53
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e3       	ldi	r30, 0x35	; 53
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	48 2f       	mov	r20, r24
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	02 2e       	mov	r0, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <GPIO_writePin+0x166>
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	0a 94       	dec	r0
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <GPIO_writePin+0x162>
    1cbe:	84 2b       	or	r24, r20
    1cc0:	8c 93       	st	X, r24
    1cc2:	2b c0       	rjmp	.+86     	; 0x1d1a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW)
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	88 23       	and	r24, r24
    1cc8:	a9 f4       	brne	.+42     	; 0x1cf4 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
    1cca:	a2 e3       	ldi	r26, 0x32	; 50
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e2 e3       	ldi	r30, 0x32	; 50
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	48 2f       	mov	r20, r24
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <GPIO_writePin+0x194>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <GPIO_writePin+0x190>
    1cec:	80 95       	com	r24
    1cee:	84 23       	and	r24, r20
    1cf0:	8c 93       	st	X, r24
    1cf2:	13 c0       	rjmp	.+38     	; 0x1d1a <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
    1cf4:	a2 e3       	ldi	r26, 0x32	; 50
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e2 e3       	ldi	r30, 0x32	; 50
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	48 2f       	mov	r20, r24
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	02 2e       	mov	r0, r18
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <GPIO_writePin+0x1be>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	0a 94       	dec	r0
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <GPIO_writePin+0x1ba>
    1d16:	84 2b       	or	r24, r20
    1d18:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <GPIO_readPin+0x6>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <GPIO_readPin+0x8>
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	8a 83       	std	Y+2, r24	; 0x02
    1d3a:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	88 30       	cpi	r24, 0x08	; 8
    1d40:	08 f0       	brcs	.+2      	; 0x1d44 <GPIO_readPin+0x1a>
    1d42:	84 c0       	rjmp	.+264    	; 0x1e4c <GPIO_readPin+0x122>
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	84 30       	cpi	r24, 0x04	; 4
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <GPIO_readPin+0x22>
    1d4a:	80 c0       	rjmp	.+256    	; 0x1e4c <GPIO_readPin+0x122>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	3d 83       	std	Y+5, r19	; 0x05
    1d54:	2c 83       	std	Y+4, r18	; 0x04
    1d56:	4c 81       	ldd	r20, Y+4	; 0x04
    1d58:	5d 81       	ldd	r21, Y+5	; 0x05
    1d5a:	41 30       	cpi	r20, 0x01	; 1
    1d5c:	51 05       	cpc	r21, r1
    1d5e:	79 f1       	breq	.+94     	; 0x1dbe <GPIO_readPin+0x94>
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	91 05       	cpc	r25, r1
    1d68:	34 f4       	brge	.+12     	; 0x1d76 <GPIO_readPin+0x4c>
    1d6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6e:	21 15       	cp	r18, r1
    1d70:	31 05       	cpc	r19, r1
    1d72:	69 f0       	breq	.+26     	; 0x1d8e <GPIO_readPin+0x64>
    1d74:	6b c0       	rjmp	.+214    	; 0x1e4c <GPIO_readPin+0x122>
    1d76:	4c 81       	ldd	r20, Y+4	; 0x04
    1d78:	5d 81       	ldd	r21, Y+5	; 0x05
    1d7a:	42 30       	cpi	r20, 0x02	; 2
    1d7c:	51 05       	cpc	r21, r1
    1d7e:	b9 f1       	breq	.+110    	; 0x1dee <GPIO_readPin+0xc4>
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	9d 81       	ldd	r25, Y+5	; 0x05
    1d84:	83 30       	cpi	r24, 0x03	; 3
    1d86:	91 05       	cpc	r25, r1
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <GPIO_readPin+0x62>
    1d8a:	49 c0       	rjmp	.+146    	; 0x1e1e <GPIO_readPin+0xf4>
    1d8c:	5f c0       	rjmp	.+190    	; 0x1e4c <GPIO_readPin+0x122>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d8e:	e9 e3       	ldi	r30, 0x39	; 57
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	a9 01       	movw	r20, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <GPIO_readPin+0x7c>
    1da2:	55 95       	asr	r21
    1da4:	47 95       	ror	r20
    1da6:	8a 95       	dec	r24
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <GPIO_readPin+0x78>
    1daa:	ca 01       	movw	r24, r20
    1dac:	81 70       	andi	r24, 0x01	; 1
    1dae:	90 70       	andi	r25, 0x00	; 0
    1db0:	88 23       	and	r24, r24
    1db2:	19 f0       	breq	.+6      	; 0x1dba <GPIO_readPin+0x90>
			{
				value = LOGIC_HIGH;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	49 c0       	rjmp	.+146    	; 0x1e4c <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1dba:	19 82       	std	Y+1, r1	; 0x01
    1dbc:	47 c0       	rjmp	.+142    	; 0x1e4c <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1dbe:	e6 e3       	ldi	r30, 0x36	; 54
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a9 01       	movw	r20, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <GPIO_readPin+0xac>
    1dd2:	55 95       	asr	r21
    1dd4:	47 95       	ror	r20
    1dd6:	8a 95       	dec	r24
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <GPIO_readPin+0xa8>
    1dda:	ca 01       	movw	r24, r20
    1ddc:	81 70       	andi	r24, 0x01	; 1
    1dde:	90 70       	andi	r25, 0x00	; 0
    1de0:	88 23       	and	r24, r24
    1de2:	19 f0       	breq	.+6      	; 0x1dea <GPIO_readPin+0xc0>
			{
				value = LOGIC_HIGH;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	31 c0       	rjmp	.+98     	; 0x1e4c <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1dea:	19 82       	std	Y+1, r1	; 0x01
    1dec:	2f c0       	rjmp	.+94     	; 0x1e4c <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1dee:	e3 e3       	ldi	r30, 0x33	; 51
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a9 01       	movw	r20, r18
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <GPIO_readPin+0xdc>
    1e02:	55 95       	asr	r21
    1e04:	47 95       	ror	r20
    1e06:	8a 95       	dec	r24
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <GPIO_readPin+0xd8>
    1e0a:	ca 01       	movw	r24, r20
    1e0c:	81 70       	andi	r24, 0x01	; 1
    1e0e:	90 70       	andi	r25, 0x00	; 0
    1e10:	88 23       	and	r24, r24
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <GPIO_readPin+0xf0>
			{
				value = LOGIC_HIGH;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	19 c0       	rjmp	.+50     	; 0x1e4c <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	17 c0       	rjmp	.+46     	; 0x1e4c <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e1e:	e6 e3       	ldi	r30, 0x36	; 54
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a9 01       	movw	r20, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <GPIO_readPin+0x10c>
    1e32:	55 95       	asr	r21
    1e34:	47 95       	ror	r20
    1e36:	8a 95       	dec	r24
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <GPIO_readPin+0x108>
    1e3a:	ca 01       	movw	r24, r20
    1e3c:	81 70       	andi	r24, 0x01	; 1
    1e3e:	90 70       	andi	r25, 0x00	; 0
    1e40:	88 23       	and	r24, r24
    1e42:	19 f0       	breq	.+6      	; 0x1e4a <GPIO_readPin+0x120>
			{
				value = LOGIC_HIGH;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	01 c0       	rjmp	.+2      	; 0x1e4c <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1e4a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <GPIO_setupPortDirection>:


void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <GPIO_setupPortDirection+0x6>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <GPIO_setupPortDirection+0x8>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	90 f5       	brcc	.+100    	; 0x1ed8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	3c 83       	std	Y+4, r19	; 0x04
    1e7c:	2b 83       	std	Y+3, r18	; 0x03
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	91 05       	cpc	r25, r1
    1e86:	d1 f0       	breq	.+52     	; 0x1ebc <GPIO_setupPortDirection+0x5e>
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8c:	22 30       	cpi	r18, 0x02	; 2
    1e8e:	31 05       	cpc	r19, r1
    1e90:	2c f4       	brge	.+10     	; 0x1e9c <GPIO_setupPortDirection+0x3e>
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	61 f0       	breq	.+24     	; 0x1eb2 <GPIO_setupPortDirection+0x54>
    1e9a:	1e c0       	rjmp	.+60     	; 0x1ed8 <GPIO_setupPortDirection+0x7a>
    1e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea0:	22 30       	cpi	r18, 0x02	; 2
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	81 f0       	breq	.+32     	; 0x1ec6 <GPIO_setupPortDirection+0x68>
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	83 30       	cpi	r24, 0x03	; 3
    1eac:	91 05       	cpc	r25, r1
    1eae:	81 f0       	breq	.+32     	; 0x1ed0 <GPIO_setupPortDirection+0x72>
    1eb0:	13 c0       	rjmp	.+38     	; 0x1ed8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1eb2:	ea e3       	ldi	r30, 0x3A	; 58
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	80 83       	st	Z, r24
    1eba:	0e c0       	rjmp	.+28     	; 0x1ed8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ebc:	e7 e3       	ldi	r30, 0x37	; 55
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	80 83       	st	Z, r24
    1ec4:	09 c0       	rjmp	.+18     	; 0x1ed8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ec6:	e4 e3       	ldi	r30, 0x34	; 52
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	80 83       	st	Z, r24
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ed0:	e1 e3       	ldi	r30, 0x31	; 49
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <GPIO_writePort>:

void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <GPIO_writePort+0x6>
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <GPIO_writePort+0x8>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	84 30       	cpi	r24, 0x04	; 4
    1efa:	90 f5       	brcc	.+100    	; 0x1f60 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	3c 83       	std	Y+4, r19	; 0x04
    1f04:	2b 83       	std	Y+3, r18	; 0x03
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	d1 f0       	breq	.+52     	; 0x1f44 <GPIO_writePort+0x5e>
    1f10:	2b 81       	ldd	r18, Y+3	; 0x03
    1f12:	3c 81       	ldd	r19, Y+4	; 0x04
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <GPIO_writePort+0x3e>
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	61 f0       	breq	.+24     	; 0x1f3a <GPIO_writePort+0x54>
    1f22:	1e c0       	rjmp	.+60     	; 0x1f60 <GPIO_writePort+0x7a>
    1f24:	2b 81       	ldd	r18, Y+3	; 0x03
    1f26:	3c 81       	ldd	r19, Y+4	; 0x04
    1f28:	22 30       	cpi	r18, 0x02	; 2
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	81 f0       	breq	.+32     	; 0x1f4e <GPIO_writePort+0x68>
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	83 30       	cpi	r24, 0x03	; 3
    1f34:	91 05       	cpc	r25, r1
    1f36:	81 f0       	breq	.+32     	; 0x1f58 <GPIO_writePort+0x72>
    1f38:	13 c0       	rjmp	.+38     	; 0x1f60 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f3a:	eb e3       	ldi	r30, 0x3B	; 59
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	80 83       	st	Z, r24
    1f42:	0e c0       	rjmp	.+28     	; 0x1f60 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f44:	e8 e3       	ldi	r30, 0x38	; 56
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	80 83       	st	Z, r24
    1f4c:	09 c0       	rjmp	.+18     	; 0x1f60 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f4e:	e5 e3       	ldi	r30, 0x35	; 53
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	80 83       	st	Z, r24
    1f56:	04 c0       	rjmp	.+8      	; 0x1f60 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f58:	e2 e3       	ldi	r30, 0x32	; 50
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <GPIO_readPort>:

uint8 GPIO_readPort(uint8 port_num)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <GPIO_readPort+0x6>
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <GPIO_readPort+0x8>
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	8a 83       	std	Y+2, r24	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	84 30       	cpi	r24, 0x04	; 4
    1f80:	90 f5       	brcc	.+100    	; 0x1fe6 <GPIO_readPort+0x78>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	3c 83       	std	Y+4, r19	; 0x04
    1f8a:	2b 83       	std	Y+3, r18	; 0x03
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	91 05       	cpc	r25, r1
    1f94:	d1 f0       	breq	.+52     	; 0x1fca <GPIO_readPort+0x5c>
    1f96:	2b 81       	ldd	r18, Y+3	; 0x03
    1f98:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9a:	22 30       	cpi	r18, 0x02	; 2
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	2c f4       	brge	.+10     	; 0x1faa <GPIO_readPort+0x3c>
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	61 f0       	breq	.+24     	; 0x1fc0 <GPIO_readPort+0x52>
    1fa8:	1e c0       	rjmp	.+60     	; 0x1fe6 <GPIO_readPort+0x78>
    1faa:	2b 81       	ldd	r18, Y+3	; 0x03
    1fac:	3c 81       	ldd	r19, Y+4	; 0x04
    1fae:	22 30       	cpi	r18, 0x02	; 2
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	81 f0       	breq	.+32     	; 0x1fd4 <GPIO_readPort+0x66>
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	83 30       	cpi	r24, 0x03	; 3
    1fba:	91 05       	cpc	r25, r1
    1fbc:	81 f0       	breq	.+32     	; 0x1fde <GPIO_readPort+0x70>
    1fbe:	13 c0       	rjmp	.+38     	; 0x1fe6 <GPIO_readPort+0x78>
		{
		case PORTA_ID:
			value = PINA;
    1fc0:	e9 e3       	ldi	r30, 0x39	; 57
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	0e c0       	rjmp	.+28     	; 0x1fe6 <GPIO_readPort+0x78>
			break;
		case PORTB_ID:
			value = PINB;
    1fca:	e6 e3       	ldi	r30, 0x36	; 54
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <GPIO_readPort+0x78>
			break;
		case PORTC_ID:
			value = PINC;
    1fd4:	e3 e3       	ldi	r30, 0x33	; 51
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	04 c0       	rjmp	.+8      	; 0x1fe6 <GPIO_readPort+0x78>
			break;
		case PORTD_ID:
			value = PIND;
    1fde:	e0 e3       	ldi	r30, 0x30	; 48
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <TWI_init>:
#include "i2c.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <TWI_init+0x6>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	89 83       	std	Y+1, r24	; 0x01
 /*  According to F(SCL) equation, Normal mode and fast mode are only valid for F(CPU)=8Mhz
  *  Valid prescaler for all modes at F(CPU)=8Mhz is 0---> TWPS=00
  */
	if(Config_Ptr->bit_rate == NORMAL_MODE)
    2004:	e9 81       	ldd	r30, Y+1	; 0x01
    2006:	fa 81       	ldd	r31, Y+2	; 0x02
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	a4 81       	ldd	r26, Z+4	; 0x04
    200e:	b5 81       	ldd	r27, Z+5	; 0x05
    2010:	80 3a       	cpi	r24, 0xA0	; 160
    2012:	26 e8       	ldi	r18, 0x86	; 134
    2014:	92 07       	cpc	r25, r18
    2016:	21 e0       	ldi	r18, 0x01	; 1
    2018:	a2 07       	cpc	r26, r18
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	b2 07       	cpc	r27, r18
    201e:	41 f4       	brne	.+16     	; 0x2030 <TWI_init+0x3a>
	{
		/* Other bits are (Read Only) so, masking isn't needed*/
		TWSR = 0x00;
    2020:	e1 e2       	ldi	r30, 0x21	; 33
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	10 82       	st	Z, r1
		TWBR = 0x03;
    2026:	e0 e2       	ldi	r30, 0x20	; 32
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	80 83       	st	Z, r24
    202e:	15 c0       	rjmp	.+42     	; 0x205a <TWI_init+0x64>
	}
	else if(Config_Ptr->bit_rate == FAST_MODE)
    2030:	e9 81       	ldd	r30, Y+1	; 0x01
    2032:	fa 81       	ldd	r31, Y+2	; 0x02
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	a4 81       	ldd	r26, Z+4	; 0x04
    203a:	b5 81       	ldd	r27, Z+5	; 0x05
    203c:	80 38       	cpi	r24, 0x80	; 128
    203e:	2a e1       	ldi	r18, 0x1A	; 26
    2040:	92 07       	cpc	r25, r18
    2042:	26 e0       	ldi	r18, 0x06	; 6
    2044:	a2 07       	cpc	r26, r18
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	b2 07       	cpc	r27, r18
    204a:	39 f4       	brne	.+14     	; 0x205a <TWI_init+0x64>
	{
		TWSR = 0x00;
    204c:	e1 e2       	ldi	r30, 0x21	; 33
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	10 82       	st	Z, r1
		TWBR = 0x02;
    2052:	e0 e2       	ldi	r30, 0x20	; 32
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	80 83       	st	Z, r24
	}

	/* my address if any master device want to call me */
	TWAR = Config_Ptr->address;
    205a:	a2 e2       	ldi	r26, 0x22	; 34
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e9 81       	ldd	r30, Y+1	; 0x01
    2060:	fa 81       	ldd	r31, Y+2	; 0x02
    2062:	80 81       	ld	r24, Z
    2064:	91 81       	ldd	r25, Z+1	; 0x01
    2066:	8c 93       	st	X, r24

	/* enable TWI */
	TWCR = (1<<TWEN);
    2068:	e6 e5       	ldi	r30, 0x56	; 86
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	84 e0       	ldi	r24, 0x04	; 4
    206e:	80 83       	st	Z, r24
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <TWI_start>:

void TWI_start(void)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2082:	e6 e5       	ldi	r30, 0x56	; 86
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	84 ea       	ldi	r24, 0xA4	; 164
    2088:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    208a:	e6 e5       	ldi	r30, 0x56	; 86
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	88 23       	and	r24, r24
    2092:	dc f7       	brge	.-10     	; 0x208a <TWI_start+0x10>
}
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <TWI_stop>:

void TWI_stop(void)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    20a2:	e6 e5       	ldi	r30, 0x56	; 86
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	84 e9       	ldi	r24, 0x94	; 148
    20a8:	80 83       	st	Z, r24
}
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    20bc:	e3 e2       	ldi	r30, 0x23	; 35
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data (TWINT=1) in the next call
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    20c4:	e6 e5       	ldi	r30, 0x56	; 86
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	84 e8       	ldi	r24, 0x84	; 132
    20ca:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    20cc:	e6 e5       	ldi	r30, 0x56	; 86
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	88 23       	and	r24, r24
    20d4:	dc f7       	brge	.-10     	; 0x20cc <TWI_writeByte+0x1c>
}
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(void)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    20e6:	e6 e5       	ldi	r30, 0x56	; 86
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	84 ec       	ldi	r24, 0xC4	; 196
    20ec:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    20ee:	e6 e5       	ldi	r30, 0x56	; 86
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	88 23       	and	r24, r24
    20f6:	dc f7       	brge	.-10     	; 0x20ee <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    20f8:	e3 e2       	ldi	r30, 0x23	; 35
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
}
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    210c:	e6 e5       	ldi	r30, 0x56	; 86
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	84 e8       	ldi	r24, 0x84	; 132
    2112:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2114:	e6 e5       	ldi	r30, 0x56	; 86
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	88 23       	and	r24, r24
    211c:	dc f7       	brge	.-10     	; 0x2114 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    211e:	e3 e2       	ldi	r30, 0x23	; 35
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	0f 92       	push	r0
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    2134:	e1 e2       	ldi	r30, 0x21	; 33
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	88 7f       	andi	r24, 0xF8	; 248
    213c:	89 83       	std	Y+1, r24	; 0x01
	return status;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <PWM_Timer0_Start>:
#include "pwm.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include "common_macros.h"

void PWM_Timer0_Start(uint8 duty_cycle){
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <PWM_Timer0_Start+0x6>
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	8a 83       	std	Y+2, r24	; 0x02

    /* Equation of OCR value calculation, Duty cycle=((OCR0+1)/256)*100,
     * where 256 is the number of counts (8-bits register)
     * (OCR0+1) because the timer counts from 0 to 255, at the count number 256 it returns to zero.
     */
	uint8 ocr0_value = (uint8)(((float)(duty_cycle*0.01))*256-1);
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	88 2f       	mov	r24, r24
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	aa 27       	eor	r26, r26
    215c:	97 fd       	sbrc	r25, 7
    215e:	a0 95       	com	r26
    2160:	ba 2f       	mov	r27, r26
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	37 ed       	ldi	r19, 0xD7	; 215
    2176:	43 e2       	ldi	r20, 0x23	; 35
    2178:	5c e3       	ldi	r21, 0x3C	; 60
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	bc 01       	movw	r22, r24
    2184:	cd 01       	movw	r24, r26
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e8       	ldi	r20, 0x80	; 128
    218c:	53 e4       	ldi	r21, 0x43	; 67
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	89 83       	std	Y+1, r24	; 0x01

	/* Set Timer Initial Value to 0 */
	TCNT0 = 0;
    21b8:	e2 e5       	ldi	r30, 0x52	; 82
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	10 82       	st	Z, r1

	/* Compare value */
	OCR0  = ocr0_value;
    21be:	ec e5       	ldi	r30, 0x5C	; 92
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	80 83       	st	Z, r24

	/*Configure PB3/OC0 as output pin, where the PWM signal is generated */
	SET_BIT(DDRB,PB3);
    21c6:	a7 e3       	ldi	r26, 0x37	; 55
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e7 e3       	ldi	r30, 0x37	; 55
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	88 60       	ori	r24, 0x08	; 8
    21d2:	8c 93       	st	X, r24

	/*Fast PWM mode, non inverting mode, clock = F_CPU/8 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    21d4:	e3 e5       	ldi	r30, 0x53	; 83
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	8a e6       	ldi	r24, 0x6A	; 106
    21da:	80 83       	st	Z, r24
}
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <__vector_9>:
 *                        Interrupt Service Routine
 *****************************************************************************/

/* For Normal Mode */
ISR(TIMER1_OVF_vect)
{
    21e6:	1f 92       	push	r1
    21e8:	0f 92       	push	r0
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	0f 92       	push	r0
    21ee:	11 24       	eor	r1, r1
    21f0:	2f 93       	push	r18
    21f2:	3f 93       	push	r19
    21f4:	4f 93       	push	r20
    21f6:	5f 93       	push	r21
    21f8:	6f 93       	push	r22
    21fa:	7f 93       	push	r23
    21fc:	8f 93       	push	r24
    21fe:	9f 93       	push	r25
    2200:	af 93       	push	r26
    2202:	bf 93       	push	r27
    2204:	ef 93       	push	r30
    2206:	ff 93       	push	r31
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_count++;
    2210:	80 91 86 01 	lds	r24, 0x0186
    2214:	8f 5f       	subi	r24, 0xFF	; 255
    2216:	80 93 86 01 	sts	0x0186, r24

	if(g_Timer1_Call_Back_Ptr!=NULL_PTR)
    221a:	80 91 87 01 	lds	r24, 0x0187
    221e:	90 91 88 01 	lds	r25, 0x0188
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	29 f0       	breq	.+10     	; 0x2230 <__vector_9+0x4a>
	{
		/* Calling back the passed function */
		(*g_Timer1_Call_Back_Ptr)();
    2226:	e0 91 87 01 	lds	r30, 0x0187
    222a:	f0 91 88 01 	lds	r31, 0x0188
    222e:	09 95       	icall
	}
}
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	ff 91       	pop	r31
    2236:	ef 91       	pop	r30
    2238:	bf 91       	pop	r27
    223a:	af 91       	pop	r26
    223c:	9f 91       	pop	r25
    223e:	8f 91       	pop	r24
    2240:	7f 91       	pop	r23
    2242:	6f 91       	pop	r22
    2244:	5f 91       	pop	r21
    2246:	4f 91       	pop	r20
    2248:	3f 91       	pop	r19
    224a:	2f 91       	pop	r18
    224c:	0f 90       	pop	r0
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	0f 90       	pop	r0
    2252:	1f 90       	pop	r1
    2254:	18 95       	reti

00002256 <__vector_7>:

/* For compare mode */
ISR (TIMER1_COMPA_vect)
{
    2256:	1f 92       	push	r1
    2258:	0f 92       	push	r0
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	0f 92       	push	r0
    225e:	11 24       	eor	r1, r1
    2260:	2f 93       	push	r18
    2262:	3f 93       	push	r19
    2264:	4f 93       	push	r20
    2266:	5f 93       	push	r21
    2268:	6f 93       	push	r22
    226a:	7f 93       	push	r23
    226c:	8f 93       	push	r24
    226e:	9f 93       	push	r25
    2270:	af 93       	push	r26
    2272:	bf 93       	push	r27
    2274:	ef 93       	push	r30
    2276:	ff 93       	push	r31
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_count++;
    2280:	80 91 86 01 	lds	r24, 0x0186
    2284:	8f 5f       	subi	r24, 0xFF	; 255
    2286:	80 93 86 01 	sts	0x0186, r24

	if(g_Timer1_Call_Back_Ptr!=NULL_PTR)
    228a:	80 91 87 01 	lds	r24, 0x0187
    228e:	90 91 88 01 	lds	r25, 0x0188
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	29 f0       	breq	.+10     	; 0x22a0 <__vector_7+0x4a>
	{
		/* Calling back the passed function */
		(*g_Timer1_Call_Back_Ptr)();
    2296:	e0 91 87 01 	lds	r30, 0x0187
    229a:	f0 91 88 01 	lds	r31, 0x0188
    229e:	09 95       	icall
	}
}
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	ff 91       	pop	r31
    22a6:	ef 91       	pop	r30
    22a8:	bf 91       	pop	r27
    22aa:	af 91       	pop	r26
    22ac:	9f 91       	pop	r25
    22ae:	8f 91       	pop	r24
    22b0:	7f 91       	pop	r23
    22b2:	6f 91       	pop	r22
    22b4:	5f 91       	pop	r21
    22b6:	4f 91       	pop	r20
    22b8:	3f 91       	pop	r19
    22ba:	2f 91       	pop	r18
    22bc:	0f 90       	pop	r0
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	0f 90       	pop	r0
    22c2:	1f 90       	pop	r1
    22c4:	18 95       	reti

000022c6 <Timer1_init>:

/******************************************************************************
 *                       Functions Definitions
 *****************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <Timer1_init+0x6>
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01
	/* Setting the initial count */
	TCNT1 = Config_Ptr->initial_value;
    22d4:	ac e4       	ldi	r26, 0x4C	; 76
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e9 81       	ldd	r30, Y+1	; 0x01
    22da:	fa 81       	ldd	r31, Y+2	; 0x02
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	11 96       	adiw	r26, 0x01	; 1
    22e2:	9c 93       	st	X, r25
    22e4:	8e 93       	st	-X, r24

	/* Setting the configured compare value */
	OCR1A = Config_Ptr->compare_value;
    22e6:	aa e4       	ldi	r26, 0x4A	; 74
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e9 81       	ldd	r30, Y+1	; 0x01
    22ec:	fa 81       	ldd	r31, Y+2	; 0x02
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	93 81       	ldd	r25, Z+3	; 0x03
    22f2:	11 96       	adiw	r26, 0x01	; 1
    22f4:	9c 93       	st	X, r25
    22f6:	8e 93       	st	-X, r24

	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    22f8:	ef e4       	ldi	r30, 0x4F	; 79
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	8c e0       	ldi	r24, 0x0C	; 12
    22fe:	80 83       	st	Z, r24

	/*Setting overflow or CTC Mode*/
	TCCR1B = (TCCR1B & 0xF7) | (Config_Ptr->mode << 3);
    2300:	ae e4       	ldi	r26, 0x4E	; 78
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	ee e4       	ldi	r30, 0x4E	; 78
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	28 2f       	mov	r18, r24
    230c:	27 7f       	andi	r18, 0xF7	; 247
    230e:	e9 81       	ldd	r30, Y+1	; 0x01
    2310:	fa 81       	ldd	r31, Y+2	; 0x02
    2312:	85 81       	ldd	r24, Z+5	; 0x05
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	82 2b       	or	r24, r18
    2326:	8c 93       	st	X, r24


	if(Config_Ptr->mode == NORMAL_MODE)
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	85 81       	ldd	r24, Z+5	; 0x05
    232e:	88 23       	and	r24, r24
    2330:	41 f4       	brne	.+16     	; 0x2342 <Timer1_init+0x7c>
	{
		/* Enable Overflow Interrupt */
		TIMSK |= (1<<TOIE1);
    2332:	a9 e5       	ldi	r26, 0x59	; 89
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e9 e5       	ldi	r30, 0x59	; 89
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	84 60       	ori	r24, 0x04	; 4
    233e:	8c 93       	st	X, r24
    2340:	0e c0       	rjmp	.+28     	; 0x235e <Timer1_init+0x98>
	}
	else
	{
		/* Enable Compare A Interrupt and setting the channels */
		TIMSK |= (1<<OCIE1A);
    2342:	a9 e5       	ldi	r26, 0x59	; 89
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e9 e5       	ldi	r30, 0x59	; 89
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	80 61       	ori	r24, 0x10	; 16
    234e:	8c 93       	st	X, r24
		TCCR1A= (TCCR1A & 0x0F)|(CHANNELS_DISCONNECTED<<4);
    2350:	af e4       	ldi	r26, 0x4F	; 79
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	ef e4       	ldi	r30, 0x4F	; 79
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8f 70       	andi	r24, 0x0F	; 15
    235c:	8c 93       	st	X, r24
	}

	/*Setting the Prescaler*/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07);
    235e:	ae e4       	ldi	r26, 0x4E	; 78
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	ee e4       	ldi	r30, 0x4E	; 78
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	98 2f       	mov	r25, r24
    236a:	98 7f       	andi	r25, 0xF8	; 248
    236c:	e9 81       	ldd	r30, Y+1	; 0x01
    236e:	fa 81       	ldd	r31, Y+2	; 0x02
    2370:	84 81       	ldd	r24, Z+4	; 0x04
    2372:	87 70       	andi	r24, 0x07	; 7
    2374:	89 2b       	or	r24, r25
    2376:	8c 93       	st	X, r24
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <Timer1_deInit>:

void Timer1_deInit(void)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1, disconnect the clk */
	TCCR1B=0;
    238a:	ee e4       	ldi	r30, 0x4E	; 78
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	10 82       	st	Z, r1
}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <Timer1_setCallBack+0x6>
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_Call_Back_Ptr = a_ptr;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	90 93 88 01 	sts	0x0188, r25
    23ac:	80 93 87 01 	sts	0x0187, r24
}
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <__vector_13>:
 * so, i've implemented the UART_receiveString in ISR
 * and we needen't to call it in the application code
 */

ISR(USART_RXC_vect)
{
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	0f 92       	push	r0
    23c2:	11 24       	eor	r1, r1
    23c4:	2f 93       	push	r18
    23c6:	8f 93       	push	r24
    23c8:	9f 93       	push	r25
    23ca:	ef 93       	push	r30
    23cc:	ff 93       	push	r31
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
	g_uart_buffer[g_uart_counter] = UDR;
    23d6:	80 91 89 01 	lds	r24, 0x0189
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	ec e2       	ldi	r30, 0x2C	; 44
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	20 81       	ld	r18, Z
    23e4:	fc 01       	movw	r30, r24
    23e6:	e7 56       	subi	r30, 0x67	; 103
    23e8:	fe 4f       	sbci	r31, 0xFE	; 254
    23ea:	20 83       	st	Z, r18
	if(g_uart_buffer[g_uart_counter]=='#')
    23ec:	80 91 89 01 	lds	r24, 0x0189
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	fc 01       	movw	r30, r24
    23f6:	e7 56       	subi	r30, 0x67	; 103
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	80 81       	ld	r24, Z
    23fc:	83 32       	cpi	r24, 0x23	; 35
    23fe:	41 f4       	brne	.+16     	; 0x2410 <__vector_13+0x56>
	{
		g_uart_buffer[g_uart_counter]='\0';
    2400:	80 91 89 01 	lds	r24, 0x0189
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	fc 01       	movw	r30, r24
    240a:	e7 56       	subi	r30, 0x67	; 103
    240c:	fe 4f       	sbci	r31, 0xFE	; 254
    240e:	10 82       	st	Z, r1
	}
	g_uart_counter++;
    2410:	80 91 89 01 	lds	r24, 0x0189
    2414:	8f 5f       	subi	r24, 0xFF	; 255
    2416:	80 93 89 01 	sts	0x0189, r24
}
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	ff 91       	pop	r31
    2420:	ef 91       	pop	r30
    2422:	9f 91       	pop	r25
    2424:	8f 91       	pop	r24
    2426:	2f 91       	pop	r18
    2428:	0f 90       	pop	r0
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	0f 90       	pop	r0
    242e:	1f 90       	pop	r1
    2430:	18 95       	reti

00002432 <UART_init>:
/******************************************************************************
 *                       Functions Definitions
 *****************************************************************************/

void UART_init(const UART_ConfigType*Config_Ptr)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	00 d0       	rcall	.+0      	; 0x2438 <UART_init+0x6>
    2438:	00 d0       	rcall	.+0      	; 0x243a <UART_init+0x8>
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    2442:	1a 82       	std	Y+2, r1	; 0x02
    2444:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2446:	eb e2       	ldi	r30, 0x2B	; 43
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	82 e0       	ldi	r24, 0x02	; 2
    244c:	80 83       	st	Z, r24

	/* RX Complete Interrupt Enable
	 * Receiver Enable
	 * Transmitter Enable
	 * */
	UCSRB|=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
    244e:	aa e2       	ldi	r26, 0x2A	; 42
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	ea e2       	ldi	r30, 0x2A	; 42
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	88 69       	ori	r24, 0x98	; 152
    245a:	8c 93       	st	X, r24

	/*
	 * Configuring the required:
	 * parity type,stop bit, character size,
	 */
	UCSRC|=(1<<URSEL)|(1<<(Config_Ptr->parity))|(1<<(Config_Ptr->stop_bit))|(1<<(Config_Ptr->bit_data));
    245c:	a0 e4       	ldi	r26, 0x40	; 64
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e0 e4       	ldi	r30, 0x40	; 64
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	58 2f       	mov	r21, r24
    2468:	eb 81       	ldd	r30, Y+3	; 0x03
    246a:	fc 81       	ldd	r31, Y+4	; 0x04
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 c0       	rjmp	.+4      	; 0x247c <UART_init+0x4a>
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	2a 95       	dec	r18
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <UART_init+0x46>
    2480:	48 2f       	mov	r20, r24
    2482:	40 68       	ori	r20, 0x80	; 128
    2484:	eb 81       	ldd	r30, Y+3	; 0x03
    2486:	fc 81       	ldd	r31, Y+4	; 0x04
    2488:	81 81       	ldd	r24, Z+1	; 0x01
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <UART_init+0x66>
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	2a 95       	dec	r18
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <UART_init+0x62>
    249c:	48 2b       	or	r20, r24
    249e:	eb 81       	ldd	r30, Y+3	; 0x03
    24a0:	fc 81       	ldd	r31, Y+4	; 0x04
    24a2:	80 81       	ld	r24, Z
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <UART_init+0x80>
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	2a 95       	dec	r18
    24b4:	e2 f7       	brpl	.-8      	; 0x24ae <UART_init+0x7c>
    24b6:	84 2b       	or	r24, r20
    24b8:	85 2b       	or	r24, r21
    24ba:	8c 93       	st	X, r24

	/*Calculating the UBRR value according to the required baud rate */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    24bc:	eb 81       	ldd	r30, Y+3	; 0x03
    24be:	fc 81       	ldd	r31, Y+4	; 0x04
    24c0:	83 81       	ldd	r24, Z+3	; 0x03
    24c2:	94 81       	ldd	r25, Z+4	; 0x04
    24c4:	a5 81       	ldd	r26, Z+5	; 0x05
    24c6:	b6 81       	ldd	r27, Z+6	; 0x06
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	aa 1f       	adc	r26, r26
    24ce:	bb 1f       	adc	r27, r27
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	aa 1f       	adc	r26, r26
    24d6:	bb 1f       	adc	r27, r27
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	aa 1f       	adc	r26, r26
    24de:	bb 1f       	adc	r27, r27
    24e0:	9c 01       	movw	r18, r24
    24e2:	ad 01       	movw	r20, r26
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	92 e1       	ldi	r25, 0x12	; 18
    24e8:	aa e7       	ldi	r26, 0x7A	; 122
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	0e 94 34 13 	call	0x2668	; 0x2668 <__udivmodsi4>
    24f4:	da 01       	movw	r26, r20
    24f6:	c9 01       	movw	r24, r18
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	9a 83       	std	Y+2, r25	; 0x02
    24fc:	89 83       	std	Y+1, r24	; 0x01

	UBRRL = ubrr_value;
    24fe:	e9 e2       	ldi	r30, 0x29	; 41
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	80 83       	st	Z, r24
	UBRRH = ubrr_value>>8;;
    2506:	e0 e4       	ldi	r30, 0x40	; 64
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	89 2f       	mov	r24, r25
    2510:	99 27       	eor	r25, r25
    2512:	80 83       	st	Z, r24
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	0f 92       	push	r0
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	89 83       	std	Y+1, r24	; 0x01
	/* Waiting until the transmit buffer becomes empty (ready for transmission a new byte)*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    252e:	eb e2       	ldi	r30, 0x2B	; 43
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	80 72       	andi	r24, 0x20	; 32
    253a:	90 70       	andi	r25, 0x00	; 0
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	b9 f3       	breq	.-18     	; 0x252e <UART_sendByte+0xc>
	UDR = data;
    2540:	ec e2       	ldi	r30, 0x2C	; 44
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	80 83       	st	Z, r24
}
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <UART_receiveByte>:

/* another receive function by polling to be used by the other device*/

uint8 UART_receiveByte(void)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the receive buffer get the data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2558:	eb e2       	ldi	r30, 0x2B	; 43
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	88 23       	and	r24, r24
    2560:	dc f7       	brge	.-10     	; 0x2558 <UART_receiveByte+0x8>
	return UDR;
    2562:	ec e2       	ldi	r30, 0x2C	; 44
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
}
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <UART_sendString>:

void UART_sendString(const uint8 *str)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	00 d0       	rcall	.+0      	; 0x2574 <UART_sendString+0x6>
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	9a 83       	std	Y+2, r25	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	0a c0       	rjmp	.+20     	; 0x2592 <UART_sendString+0x24>
	while(*str != '\0')
	{
		UART_sendByte(*str);
    257e:	e9 81       	ldd	r30, Y+1	; 0x01
    2580:	fa 81       	ldd	r31, Y+2	; 0x02
    2582:	80 81       	ld	r24, Z
    2584:	0e 94 91 12 	call	0x2522	; 0x2522 <UART_sendByte>
		str++;
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	01 96       	adiw	r24, 0x01	; 1
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(const uint8 *str)
{
	while(*str != '\0')
    2592:	e9 81       	ldd	r30, Y+1	; 0x01
    2594:	fa 81       	ldd	r31, Y+2	; 0x02
    2596:	80 81       	ld	r24, Z
    2598:	88 23       	and	r24, r24
    259a:	89 f7       	brne	.-30     	; 0x257e <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <UART_receiveString>:

/* another receive string function by polling
 * (i don't use it in this project)
 */
void UART_receiveString(uint8 *str)
{
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <UART_receiveString+0xa>
    25b0:	0f 92       	push	r0
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	9b 83       	std	Y+3, r25	; 0x03
    25b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    25ba:	19 82       	std	Y+1, r1	; 0x01
	/*Receive the first byte*/
	str[i]=UART_receiveByte();
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	9b 81       	ldd	r25, Y+3	; 0x03
    25c6:	8c 01       	movw	r16, r24
    25c8:	02 0f       	add	r16, r18
    25ca:	13 1f       	adc	r17, r19
    25cc:	0e 94 a8 12 	call	0x2550	; 0x2550 <UART_receiveByte>
    25d0:	f8 01       	movw	r30, r16
    25d2:	80 83       	st	Z, r24
    25d4:	0f c0       	rjmp	.+30     	; 0x25f4 <UART_receiveString+0x4e>

	/* then check for the '#'*/
	while(str[i]!='#')
	{
		i++;
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	8f 5f       	subi	r24, 0xFF	; 255
    25da:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_receiveByte();
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	9b 81       	ldd	r25, Y+3	; 0x03
    25e6:	8c 01       	movw	r16, r24
    25e8:	02 0f       	add	r16, r18
    25ea:	13 1f       	adc	r17, r19
    25ec:	0e 94 a8 12 	call	0x2550	; 0x2550 <UART_receiveByte>
    25f0:	f8 01       	movw	r30, r16
    25f2:	80 83       	st	Z, r24
	uint8 i=0;
	/*Receive the first byte*/
	str[i]=UART_receiveByte();

	/* then check for the '#'*/
	while(str[i]!='#')
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	9b 81       	ldd	r25, Y+3	; 0x03
    25fe:	fc 01       	movw	r30, r24
    2600:	e2 0f       	add	r30, r18
    2602:	f3 1f       	adc	r31, r19
    2604:	80 81       	ld	r24, Z
    2606:	83 32       	cpi	r24, 0x23	; 35
    2608:	31 f7       	brne	.-52     	; 0x25d6 <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_receiveByte();
	}
	str[i]='\0';
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	fc 01       	movw	r30, r24
    2616:	e2 0f       	add	r30, r18
    2618:	f3 1f       	adc	r31, r19
    261a:	10 82       	st	Z, r1
}
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	1f 91       	pop	r17
    2628:	0f 91       	pop	r16
    262a:	08 95       	ret

0000262c <UART_clearBuffer>:

void UART_clearBuffer(void)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
	g_uart_counter=0;
    2634:	10 92 89 01 	sts	0x0189, r1
    2638:	0e c0       	rjmp	.+28     	; 0x2656 <UART_clearBuffer+0x2a>
	while(g_uart_counter<20)
	{
		g_uart_buffer[g_uart_counter]=CLEAR;
    263a:	80 91 89 01 	lds	r24, 0x0189
    263e:	88 2f       	mov	r24, r24
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	fc 01       	movw	r30, r24
    2644:	e7 56       	subi	r30, 0x67	; 103
    2646:	fe 4f       	sbci	r31, 0xFE	; 254
    2648:	84 e6       	ldi	r24, 0x64	; 100
    264a:	80 83       	st	Z, r24
		g_uart_counter++;
    264c:	80 91 89 01 	lds	r24, 0x0189
    2650:	8f 5f       	subi	r24, 0xFF	; 255
    2652:	80 93 89 01 	sts	0x0189, r24
}

void UART_clearBuffer(void)
{
	g_uart_counter=0;
	while(g_uart_counter<20)
    2656:	80 91 89 01 	lds	r24, 0x0189
    265a:	84 31       	cpi	r24, 0x14	; 20
    265c:	70 f3       	brcs	.-36     	; 0x263a <UART_clearBuffer+0xe>
	{
		g_uart_buffer[g_uart_counter]=CLEAR;
		g_uart_counter++;
	}
	g_uart_counter=0;
    265e:	10 92 89 01 	sts	0x0189, r1
}
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <__udivmodsi4>:
    2668:	a1 e2       	ldi	r26, 0x21	; 33
    266a:	1a 2e       	mov	r1, r26
    266c:	aa 1b       	sub	r26, r26
    266e:	bb 1b       	sub	r27, r27
    2670:	fd 01       	movw	r30, r26
    2672:	0d c0       	rjmp	.+26     	; 0x268e <__udivmodsi4_ep>

00002674 <__udivmodsi4_loop>:
    2674:	aa 1f       	adc	r26, r26
    2676:	bb 1f       	adc	r27, r27
    2678:	ee 1f       	adc	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	a2 17       	cp	r26, r18
    267e:	b3 07       	cpc	r27, r19
    2680:	e4 07       	cpc	r30, r20
    2682:	f5 07       	cpc	r31, r21
    2684:	20 f0       	brcs	.+8      	; 0x268e <__udivmodsi4_ep>
    2686:	a2 1b       	sub	r26, r18
    2688:	b3 0b       	sbc	r27, r19
    268a:	e4 0b       	sbc	r30, r20
    268c:	f5 0b       	sbc	r31, r21

0000268e <__udivmodsi4_ep>:
    268e:	66 1f       	adc	r22, r22
    2690:	77 1f       	adc	r23, r23
    2692:	88 1f       	adc	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	1a 94       	dec	r1
    2698:	69 f7       	brne	.-38     	; 0x2674 <__udivmodsi4_loop>
    269a:	60 95       	com	r22
    269c:	70 95       	com	r23
    269e:	80 95       	com	r24
    26a0:	90 95       	com	r25
    26a2:	9b 01       	movw	r18, r22
    26a4:	ac 01       	movw	r20, r24
    26a6:	bd 01       	movw	r22, r26
    26a8:	cf 01       	movw	r24, r30
    26aa:	08 95       	ret

000026ac <__prologue_saves__>:
    26ac:	2f 92       	push	r2
    26ae:	3f 92       	push	r3
    26b0:	4f 92       	push	r4
    26b2:	5f 92       	push	r5
    26b4:	6f 92       	push	r6
    26b6:	7f 92       	push	r7
    26b8:	8f 92       	push	r8
    26ba:	9f 92       	push	r9
    26bc:	af 92       	push	r10
    26be:	bf 92       	push	r11
    26c0:	cf 92       	push	r12
    26c2:	df 92       	push	r13
    26c4:	ef 92       	push	r14
    26c6:	ff 92       	push	r15
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	ca 1b       	sub	r28, r26
    26d6:	db 0b       	sbc	r29, r27
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	09 94       	ijmp

000026e4 <__epilogue_restores__>:
    26e4:	2a 88       	ldd	r2, Y+18	; 0x12
    26e6:	39 88       	ldd	r3, Y+17	; 0x11
    26e8:	48 88       	ldd	r4, Y+16	; 0x10
    26ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    26ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    26ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    26f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26f6:	b9 84       	ldd	r11, Y+9	; 0x09
    26f8:	c8 84       	ldd	r12, Y+8	; 0x08
    26fa:	df 80       	ldd	r13, Y+7	; 0x07
    26fc:	ee 80       	ldd	r14, Y+6	; 0x06
    26fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2700:	0c 81       	ldd	r16, Y+4	; 0x04
    2702:	1b 81       	ldd	r17, Y+3	; 0x03
    2704:	aa 81       	ldd	r26, Y+2	; 0x02
    2706:	b9 81       	ldd	r27, Y+1	; 0x01
    2708:	ce 0f       	add	r28, r30
    270a:	d1 1d       	adc	r29, r1
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	ed 01       	movw	r28, r26
    2718:	08 95       	ret

0000271a <_exit>:
    271a:	f8 94       	cli

0000271c <__stop_program>:
    271c:	ff cf       	rjmp	.-2      	; 0x271c <__stop_program>
