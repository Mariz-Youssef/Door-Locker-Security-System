
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003006  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  00003006  0000309a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080013a  0080013a  00003174  2**0
                  ALLOC
  3 .stab         00002db4  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000134d  00000000  00000000  00005f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007275  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007525  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000916e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a059  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 36       	cpi	r26, 0x66	; 102
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1a 06 	call	0xc34	; 0xc34 <main>
      8a:	0c 94 01 18 	jmp	0x3002	; 0x3002 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e2       	ldi	r26, 0x24	; 36
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e2       	ldi	r24, 0x24	; 36
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <action_for_matched_pass_inHMI>:

uint8 interrupt_count=0;

/* the passed function to timer.1 call back function */
void action_for_matched_pass_inHMI(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* 15 sec*/
	if(interrupt_count<=30)
     b4e:	80 91 3a 01 	lds	r24, 0x013A
     b52:	8f 31       	cpi	r24, 0x1F	; 31
     b54:	a0 f4       	brcc	.+40     	; 0xb7e <action_for_matched_pass_inHMI+0x38>
	{
		LCD_displayStringRowColumn(0,0,"    Door is      ");
     b56:	20 e6       	ldi	r18, 0x60	; 96
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	a9 01       	movw	r20, r18
     b60:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"   unlocking     ");
     b64:	22 e7       	ldi	r18, 0x72	; 114
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	a9 01       	movw	r20, r18
     b6e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
		interrupt_count++;
     b72:	80 91 3a 01 	lds	r24, 0x013A
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	80 93 3a 01 	sts	0x013A, r24
     b7c:	35 c0       	rjmp	.+106    	; 0xbe8 <action_for_matched_pass_inHMI+0xa2>
	}
	/* hold for 3 sec */
	else if((interrupt_count>30) && (interrupt_count<=36))
     b7e:	80 91 3a 01 	lds	r24, 0x013A
     b82:	8f 31       	cpi	r24, 0x1F	; 31
     b84:	60 f0       	brcs	.+24     	; 0xb9e <action_for_matched_pass_inHMI+0x58>
     b86:	80 91 3a 01 	lds	r24, 0x013A
     b8a:	85 32       	cpi	r24, 0x25	; 37
     b8c:	40 f4       	brcc	.+16     	; 0xb9e <action_for_matched_pass_inHMI+0x58>
	{
		LCD_clearScreen();
     b8e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <LCD_clearScreen>
		interrupt_count++;
     b92:	80 91 3a 01 	lds	r24, 0x013A
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	80 93 3a 01 	sts	0x013A, r24
     b9c:	25 c0       	rjmp	.+74     	; 0xbe8 <action_for_matched_pass_inHMI+0xa2>
	}

	else if((interrupt_count>36) && (interrupt_count<=66))
     b9e:	80 91 3a 01 	lds	r24, 0x013A
     ba2:	85 32       	cpi	r24, 0x25	; 37
     ba4:	08 f1       	brcs	.+66     	; 0xbe8 <action_for_matched_pass_inHMI+0xa2>
     ba6:	80 91 3a 01 	lds	r24, 0x013A
     baa:	83 34       	cpi	r24, 0x43	; 67
     bac:	e8 f4       	brcc	.+58     	; 0xbe8 <action_for_matched_pass_inHMI+0xa2>
	{
		LCD_displayStringRowColumn(0,0,"    Door is       ");
     bae:	24 e8       	ldi	r18, 0x84	; 132
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	a9 01       	movw	r20, r18
     bb8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"    locking       ");
     bbc:	27 e9       	ldi	r18, 0x97	; 151
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	a9 01       	movw	r20, r18
     bc6:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
		interrupt_count++;
     bca:	80 91 3a 01 	lds	r24, 0x013A
     bce:	8f 5f       	subi	r24, 0xFF	; 255
     bd0:	80 93 3a 01 	sts	0x013A, r24
		if(g_Timer1_count>=66)
     bd4:	80 91 44 01 	lds	r24, 0x0144
     bd8:	82 34       	cpi	r24, 0x42	; 66
     bda:	30 f0       	brcs	.+12     	; 0xbe8 <action_for_matched_pass_inHMI+0xa2>
		{
			LCD_clearScreen();
     bdc:	0e 94 18 15 	call	0x2a30	; 0x2a30 <LCD_clearScreen>
			interrupt_count=0;
     be0:	10 92 3a 01 	sts	0x013A, r1
			Timer1_deInit();
     be4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <Timer1_deInit>
		}
	}
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <action_for_unmatched_pass_inHMI>:

void action_for_unmatched_pass_inHMI(void)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
	/* activate the buzzer for 1 min */
	if(g_Timer1_count<=120)
     bf6:	80 91 44 01 	lds	r24, 0x0144
     bfa:	89 37       	cpi	r24, 0x79	; 121
     bfc:	c0 f4       	brcc	.+48     	; 0xc2e <action_for_unmatched_pass_inHMI+0x40>
	{
		LCD_displayStringRowColumn(0,0,"    ERROR        ");
     bfe:	2a ea       	ldi	r18, 0xAA	; 170
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	a9 01       	movw	r20, r18
     c08:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"   locking       ");
     c0c:	2c eb       	ldi	r18, 0xBC	; 188
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	a9 01       	movw	r20, r18
     c16:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
		if(g_Timer1_count>=120)
     c1a:	80 91 44 01 	lds	r24, 0x0144
     c1e:	88 37       	cpi	r24, 0x78	; 120
     c20:	30 f0       	brcs	.+12     	; 0xc2e <action_for_unmatched_pass_inHMI+0x40>
		{
			LCD_clearScreen();
     c22:	0e 94 18 15 	call	0x2a30	; 0x2a30 <LCD_clearScreen>
			g_Timer1_count=0;
     c26:	10 92 44 01 	sts	0x0144, r1
			Timer1_deInit();
     c2a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <Timer1_deInit>
		}
	}
}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <main>:
/* Description: send the password to control to check it*/
void send_pass_to_control(uint8*pass);


int main()
{
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	a5 97       	sbiw	r28, 0x25	; 37
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	/* Enable I_bit */
	SREG|=(1<<7);
     c48:	af e5       	ldi	r26, 0x5F	; 95
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ef e5       	ldi	r30, 0x5F	; 95
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	8c 93       	st	X, r24

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_ConfigType config={EIGHT_BITS,ONE_BIT,DISABLED,9600};
     c56:	ce 01       	movw	r24, r28
     c58:	0f 96       	adiw	r24, 0x0f	; 15
     c5a:	9d 8f       	std	Y+29, r25	; 0x1d
     c5c:	8c 8f       	std	Y+28, r24	; 0x1c
     c5e:	e3 e3       	ldi	r30, 0x33	; 51
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	ff 8f       	std	Y+31, r31	; 0x1f
     c64:	ee 8f       	std	Y+30, r30	; 0x1e
     c66:	f7 e0       	ldi	r31, 0x07	; 7
     c68:	f8 a3       	std	Y+32, r31	; 0x20
     c6a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     c6c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     c6e:	00 80       	ld	r0, Z
     c70:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c72:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	9f 8f       	std	Y+31, r25	; 0x1f
     c78:	8e 8f       	std	Y+30, r24	; 0x1e
     c7a:	ec 8d       	ldd	r30, Y+28	; 0x1c
     c7c:	fd 8d       	ldd	r31, Y+29	; 0x1d
     c7e:	00 82       	st	Z, r0
     c80:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c82:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	9d 8f       	std	Y+29, r25	; 0x1d
     c88:	8c 8f       	std	Y+28, r24	; 0x1c
     c8a:	98 a1       	ldd	r25, Y+32	; 0x20
     c8c:	91 50       	subi	r25, 0x01	; 1
     c8e:	98 a3       	std	Y+32, r25	; 0x20
     c90:	e8 a1       	ldd	r30, Y+32	; 0x20
     c92:	ee 23       	and	r30, r30
     c94:	51 f7       	brne	.-44     	; 0xc6a <main+0x36>
	UART_init(&config);
     c96:	ce 01       	movw	r24, r28
     c98:	0f 96       	adiw	r24, 0x0f	; 15
     c9a:	0e 94 48 16 	call	0x2c90	; 0x2c90 <UART_init>

	/* Initialization of LCD */
	LCD_init();
     c9e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_init>

	Timer1_ConfigType timer1_config={0,7813,COMPARE_MODE,CPU_CLK_PRESCALER_1024};
     ca2:	ce 01       	movw	r24, r28
     ca4:	46 96       	adiw	r24, 0x16	; 22
     ca6:	9a a3       	std	Y+34, r25	; 0x22
     ca8:	89 a3       	std	Y+33, r24	; 0x21
     caa:	ed e2       	ldi	r30, 0x2D	; 45
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	fc a3       	std	Y+36, r31	; 0x24
     cb0:	eb a3       	std	Y+35, r30	; 0x23
     cb2:	f6 e0       	ldi	r31, 0x06	; 6
     cb4:	fd a3       	std	Y+37, r31	; 0x25
     cb6:	eb a1       	ldd	r30, Y+35	; 0x23
     cb8:	fc a1       	ldd	r31, Y+36	; 0x24
     cba:	00 80       	ld	r0, Z
     cbc:	8b a1       	ldd	r24, Y+35	; 0x23
     cbe:	9c a1       	ldd	r25, Y+36	; 0x24
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	9c a3       	std	Y+36, r25	; 0x24
     cc4:	8b a3       	std	Y+35, r24	; 0x23
     cc6:	e9 a1       	ldd	r30, Y+33	; 0x21
     cc8:	fa a1       	ldd	r31, Y+34	; 0x22
     cca:	00 82       	st	Z, r0
     ccc:	89 a1       	ldd	r24, Y+33	; 0x21
     cce:	9a a1       	ldd	r25, Y+34	; 0x22
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	9a a3       	std	Y+34, r25	; 0x22
     cd4:	89 a3       	std	Y+33, r24	; 0x21
     cd6:	9d a1       	ldd	r25, Y+37	; 0x25
     cd8:	91 50       	subi	r25, 0x01	; 1
     cda:	9d a3       	std	Y+37, r25	; 0x25
     cdc:	ed a1       	ldd	r30, Y+37	; 0x25
     cde:	ee 23       	and	r30, r30
     ce0:	51 f7       	brne	.-44     	; 0xcb6 <main+0x82>

	UART_clearBuffer();
     ce2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <UART_clearBuffer>

	while(1)
	{
		/* Store the reply of the control ECU */
		control_reply=g_uart_buffer[0];
     ce6:	80 91 52 01 	lds	r24, 0x0152
     cea:	80 93 43 01 	sts	0x0143, r24

		/* Step_1 */
		if(next_step==STEP_1)
     cee:	80 91 2c 01 	lds	r24, 0x012C
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	79 f5       	brne	.+94     	; 0xd54 <main+0x120>
		{
			create_password();
     cf6:	0e 94 0a 08 	call	0x1014	; 0x1014 <create_password>
			if(control_reply==MATCHED)
     cfa:	80 91 43 01 	lds	r24, 0x0143
     cfe:	8b 30       	cpi	r24, 0x0B	; 11
     d00:	51 f4       	brne	.+20     	; 0xd16 <main+0xe2>
			{
				next_step = STEP_2;
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	80 93 2c 01 	sts	0x012C, r24
				control_reply=CLEAR;
     d08:	84 e6       	ldi	r24, 0x64	; 100
     d0a:	80 93 43 01 	sts	0x0143, r24
				g_uart_buffer[0]=CLEAR;
     d0e:	84 e6       	ldi	r24, 0x64	; 100
     d10:	80 93 52 01 	sts	0x0152, r24
     d14:	e8 cf       	rjmp	.-48     	; 0xce6 <main+0xb2>
			}
			else if(control_reply==UNMATCHED)
     d16:	80 91 43 01 	lds	r24, 0x0143
     d1a:	8c 30       	cpi	r24, 0x0C	; 12
     d1c:	21 f7       	brne	.-56     	; 0xce6 <main+0xb2>
			{
				UART_sendByte(CREATE_PASS);
     d1e:	8d e0       	ldi	r24, 0x0D	; 13
     d20:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_sendByte>
				key=0; final_key=0;
     d24:	10 92 3b 01 	sts	0x013B, r1
     d28:	10 92 3c 01 	sts	0x013C, r1
				row=0; col=0; enter_count=0;send_flag=0;count=0;
     d2c:	10 92 3e 01 	sts	0x013E, r1
     d30:	10 92 3f 01 	sts	0x013F, r1
     d34:	10 92 40 01 	sts	0x0140, r1
     d38:	10 92 41 01 	sts	0x0141, r1
     d3c:	10 92 42 01 	sts	0x0142, r1
				control_reply=CLEAR;
     d40:	84 e6       	ldi	r24, 0x64	; 100
     d42:	80 93 43 01 	sts	0x0143, r24
				g_uart_buffer[0]=CLEAR;
     d46:	84 e6       	ldi	r24, 0x64	; 100
     d48:	80 93 52 01 	sts	0x0152, r24
				next_step=STEP_1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 2c 01 	sts	0x012C, r24
     d52:	c9 cf       	rjmp	.-110    	; 0xce6 <main+0xb2>
			}
		}

		/* Step_2 */
		else if(next_step==STEP_2)
     d54:	80 91 2c 01 	lds	r24, 0x012C
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	09 f0       	breq	.+2      	; 0xd5e <main+0x12a>
     d5c:	a1 c0       	rjmp	.+322    	; 0xea0 <main+0x26c>
		{
			LCD_clearScreen();
     d5e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0," + : Open Door");
     d62:	2e ec       	ldi	r18, 0xCE	; 206
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	a9 01       	movw	r20, r18
     d6c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0," - : Change Pass");
     d70:	2d ed       	ldi	r18, 0xDD	; 221
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	a9 01       	movw	r20, r18
     d7a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>

			key=KEYPAD_getPressedKey();
     d7e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <KEYPAD_getPressedKey>
     d82:	80 93 3b 01 	sts	0x013B, r24

			if(key=='+')
     d86:	80 91 3b 01 	lds	r24, 0x013B
     d8a:	8b 32       	cpi	r24, 0x2B	; 43
     d8c:	39 f4       	brne	.+14     	; 0xd9c <main+0x168>
			{
				/* to prevent printing '*' in next steps depending on the last value of key*/
				key=ENTER;
     d8e:	8d e3       	ldi	r24, 0x3D	; 61
     d90:	80 93 3b 01 	sts	0x013B, r24
				next_step = STEP_3;
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	80 93 2c 01 	sts	0x012C, r24
     d9a:	0f c0       	rjmp	.+30     	; 0xdba <main+0x186>
			}
			else if(key=='-')
     d9c:	80 91 3b 01 	lds	r24, 0x013B
     da0:	8d 32       	cpi	r24, 0x2D	; 45
     da2:	39 f4       	brne	.+14     	; 0xdb2 <main+0x17e>
			{
				/* to prevent printing '*' in next steps depending on the last value of key*/
				key=ENTER;
     da4:	8d e3       	ldi	r24, 0x3D	; 61
     da6:	80 93 3b 01 	sts	0x013B, r24
				next_step = STEP_4;
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	80 93 2c 01 	sts	0x012C, r24
     db0:	04 c0       	rjmp	.+8      	; 0xdba <main+0x186>
			}
			else
			{
				key=KEYPAD_getPressedKey();
     db2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <KEYPAD_getPressedKey>
     db6:	80 93 3b 01 	sts	0x013B, r24
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a6 e9       	ldi	r26, 0x96	; 150
     dc0:	b3 e4       	ldi	r27, 0x43	; 67
     dc2:	8b 87       	std	Y+11, r24	; 0x0b
     dc4:	9c 87       	std	Y+12, r25	; 0x0c
     dc6:	ad 87       	std	Y+13, r26	; 0x0d
     dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dca:	6b 85       	ldd	r22, Y+11	; 0x0b
     dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dce:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4a ef       	ldi	r20, 0xFA	; 250
     dd8:	54 e4       	ldi	r21, 0x44	; 68
     dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	8f 83       	std	Y+7, r24	; 0x07
     de4:	98 87       	std	Y+8, r25	; 0x08
     de6:	a9 87       	std	Y+9, r26	; 0x09
     de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dea:	6f 81       	ldd	r22, Y+7	; 0x07
     dec:	78 85       	ldd	r23, Y+8	; 0x08
     dee:	89 85       	ldd	r24, Y+9	; 0x09
     df0:	9a 85       	ldd	r25, Y+10	; 0x0a
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e8       	ldi	r20, 0x80	; 128
     df8:	5f e3       	ldi	r21, 0x3F	; 63
     dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dfe:	88 23       	and	r24, r24
     e00:	2c f4       	brge	.+10     	; 0xe0c <main+0x1d8>
		__ticks = 1;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
     e0a:	3f c0       	rjmp	.+126    	; 0xe8a <main+0x256>
	else if (__tmp > 65535)
     e0c:	6f 81       	ldd	r22, Y+7	; 0x07
     e0e:	78 85       	ldd	r23, Y+8	; 0x08
     e10:	89 85       	ldd	r24, Y+9	; 0x09
     e12:	9a 85       	ldd	r25, Y+10	; 0x0a
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	3f ef       	ldi	r19, 0xFF	; 255
     e18:	4f e7       	ldi	r20, 0x7F	; 127
     e1a:	57 e4       	ldi	r21, 0x47	; 71
     e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e20:	18 16       	cp	r1, r24
     e22:	4c f5       	brge	.+82     	; 0xe76 <main+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e24:	6b 85       	ldd	r22, Y+11	; 0x0b
     e26:	7c 85       	ldd	r23, Y+12	; 0x0c
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e2       	ldi	r20, 0x20	; 32
     e32:	51 e4       	ldi	r21, 0x41	; 65
     e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9e 83       	std	Y+6, r25	; 0x06
     e4a:	8d 83       	std	Y+5, r24	; 0x05
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <main+0x238>
     e4e:	88 ec       	ldi	r24, 0xC8	; 200
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9c 83       	std	Y+4, r25	; 0x04
     e54:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <main+0x226>
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f7       	brne	.-38     	; 0xe4e <main+0x21a>
     e74:	38 cf       	rjmp	.-400    	; 0xce6 <main+0xb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e76:	6f 81       	ldd	r22, Y+7	; 0x07
     e78:	78 85       	ldd	r23, Y+8	; 0x08
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	9e 83       	std	Y+6, r25	; 0x06
     e88:	8d 83       	std	Y+5, r24	; 0x05
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <main+0x262>
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	23 cf       	rjmp	.-442    	; 0xce6 <main+0xb2>
			}
			_delay_ms(300);
		}

		/* Step_3 */
		else if(next_step==STEP_3)
     ea0:	80 91 2c 01 	lds	r24, 0x012C
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	09 f0       	breq	.+2      	; 0xeaa <main+0x276>
     ea8:	4e c0       	rjmp	.+156    	; 0xf46 <main+0x312>
		{
			UART_clearBuffer();
     eaa:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <UART_clearBuffer>
			if(entered==0)
     eae:	80 91 3d 01 	lds	r24, 0x013D
     eb2:	88 23       	and	r24, r24
     eb4:	19 f4       	brne	.+6      	; 0xebc <main+0x288>
			{
				enter_saved_password();
     eb6:	0e 94 4f 09 	call	0x129e	; 0x129e <enter_saved_password>
     eba:	15 cf       	rjmp	.-470    	; 0xce6 <main+0xb2>
			}
			else if(entered==1)
     ebc:	80 91 3d 01 	lds	r24, 0x013D
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <main+0x292>
     ec4:	10 cf       	rjmp	.-480    	; 0xce6 <main+0xb2>
			{
				UART_sendByte(CHECK);
     ec6:	88 e0       	ldi	r24, 0x08	; 8
     ec8:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_sendByte>
				send_pass_to_control(pass);
     ecc:	88 e4       	ldi	r24, 0x48	; 72
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	0e 94 06 0b 	call	0x160c	; 0x160c <send_pass_to_control>
				UART_sendByte(PASS_SENT);
     ed4:	8a e0       	ldi	r24, 0x0A	; 10
     ed6:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_sendByte>

				if(control_reply==MATCHED)
     eda:	80 91 43 01 	lds	r24, 0x0143
     ede:	8b 30       	cpi	r24, 0x0B	; 11
     ee0:	99 f4       	brne	.+38     	; 0xf08 <main+0x2d4>
				{
					Timer1_setCallBack(action_for_matched_pass_inHMI);
     ee2:	83 ea       	ldi	r24, 0xA3	; 163
     ee4:	95 e0       	ldi	r25, 0x05	; 5
     ee6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <Timer1_setCallBack>
					Timer1_init(&timer1_config);
     eea:	ce 01       	movw	r24, r28
     eec:	46 96       	adiw	r24, 0x16	; 22
     eee:	0e 94 92 15 	call	0x2b24	; 0x2b24 <Timer1_init>
					next_step=STEP_2;
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	80 93 2c 01 	sts	0x012C, r24
					control_reply=CLEAR;
     ef8:	84 e6       	ldi	r24, 0x64	; 100
     efa:	80 93 43 01 	sts	0x0143, r24
					UART_clearBuffer();
     efe:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <UART_clearBuffer>
					entered=0;
     f02:	10 92 3d 01 	sts	0x013D, r1
     f06:	ef ce       	rjmp	.-546    	; 0xce6 <main+0xb2>
				}
				else if(control_reply==UNMATCHED)
     f08:	80 91 43 01 	lds	r24, 0x0143
     f0c:	8c 30       	cpi	r24, 0x0C	; 12
     f0e:	09 f0       	breq	.+2      	; 0xf12 <main+0x2de>
     f10:	ea ce       	rjmp	.-556    	; 0xce6 <main+0xb2>
				{
					control_reply=CLEAR;
     f12:	84 e6       	ldi	r24, 0x64	; 100
     f14:	80 93 43 01 	sts	0x0143, r24
					UART_clearBuffer();
     f18:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <UART_clearBuffer>
					if(count==2)
     f1c:	80 91 42 01 	lds	r24, 0x0142
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	31 f4       	brne	.+12     	; 0xf30 <main+0x2fc>
					{
						next_step=STEP_5;
     f24:	85 e0       	ldi	r24, 0x05	; 5
     f26:	80 93 2c 01 	sts	0x012C, r24
						count=0;
     f2a:	10 92 42 01 	sts	0x0142, r1
     f2e:	05 c0       	rjmp	.+10     	; 0xf3a <main+0x306>
					}
					else
					{
						entered=0;
     f30:	10 92 3d 01 	sts	0x013D, r1
						next_step=STEP_3;
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	80 93 2c 01 	sts	0x012C, r24
					}
					count++;
     f3a:	80 91 42 01 	lds	r24, 0x0142
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 42 01 	sts	0x0142, r24
     f44:	d0 ce       	rjmp	.-608    	; 0xce6 <main+0xb2>
				}
			}
		}

		/* Step_4 */
		else if(next_step==STEP_4)
     f46:	80 91 2c 01 	lds	r24, 0x012C
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	09 f0       	breq	.+2      	; 0xf50 <main+0x31c>
     f4e:	4f c0       	rjmp	.+158    	; 0xfee <main+0x3ba>
		{
			UART_clearBuffer();
     f50:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <UART_clearBuffer>
			if(entered==0)
     f54:	80 91 3d 01 	lds	r24, 0x013D
     f58:	88 23       	and	r24, r24
     f5a:	19 f4       	brne	.+6      	; 0xf62 <main+0x32e>
			{
				enter_saved_password();
     f5c:	0e 94 4f 09 	call	0x129e	; 0x129e <enter_saved_password>
     f60:	c2 ce       	rjmp	.-636    	; 0xce6 <main+0xb2>
			}
			else if(entered==1)
     f62:	80 91 3d 01 	lds	r24, 0x013D
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	09 f0       	breq	.+2      	; 0xf6c <main+0x338>
     f6a:	bd ce       	rjmp	.-646    	; 0xce6 <main+0xb2>
			{
				UART_sendByte(CHANGE_PASS);
     f6c:	87 e0       	ldi	r24, 0x07	; 7
     f6e:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_sendByte>
				send_pass_to_control(pass);
     f72:	88 e4       	ldi	r24, 0x48	; 72
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	0e 94 06 0b 	call	0x160c	; 0x160c <send_pass_to_control>
				UART_sendByte(PASS_SENT);
     f7a:	8a e0       	ldi	r24, 0x0A	; 10
     f7c:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_sendByte>

				if(control_reply==MATCHED)
     f80:	80 91 43 01 	lds	r24, 0x0143
     f84:	8b 30       	cpi	r24, 0x0B	; 11
     f86:	b9 f4       	brne	.+46     	; 0xfb6 <main+0x382>
				{
					key=0; final_key=0; entered=0;
     f88:	10 92 3b 01 	sts	0x013B, r1
     f8c:	10 92 3c 01 	sts	0x013C, r1
     f90:	10 92 3d 01 	sts	0x013D, r1
					row=0; col=0; enter_count=0;send_flag=0;
     f94:	10 92 3e 01 	sts	0x013E, r1
     f98:	10 92 3f 01 	sts	0x013F, r1
     f9c:	10 92 40 01 	sts	0x0140, r1
     fa0:	10 92 41 01 	sts	0x0141, r1
					next_step=STEP_1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 2c 01 	sts	0x012C, r24
					control_reply=CLEAR;
     faa:	84 e6       	ldi	r24, 0x64	; 100
     fac:	80 93 43 01 	sts	0x0143, r24
					UART_clearBuffer();
     fb0:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <UART_clearBuffer>
     fb4:	98 ce       	rjmp	.-720    	; 0xce6 <main+0xb2>
				}
				else if(control_reply==UNMATCHED)
     fb6:	80 91 43 01 	lds	r24, 0x0143
     fba:	8c 30       	cpi	r24, 0x0C	; 12
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <main+0x38c>
     fbe:	93 ce       	rjmp	.-730    	; 0xce6 <main+0xb2>
				{
					UART_clearBuffer();
     fc0:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <UART_clearBuffer>
					if(count==2)
     fc4:	80 91 42 01 	lds	r24, 0x0142
     fc8:	82 30       	cpi	r24, 0x02	; 2
     fca:	31 f4       	brne	.+12     	; 0xfd8 <main+0x3a4>
					{
						next_step=STEP_5;
     fcc:	85 e0       	ldi	r24, 0x05	; 5
     fce:	80 93 2c 01 	sts	0x012C, r24
						count=0;
     fd2:	10 92 42 01 	sts	0x0142, r1
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <main+0x3ae>
					}
					else
					{
						entered=0;
     fd8:	10 92 3d 01 	sts	0x013D, r1
						next_step=STEP_4;
     fdc:	84 e0       	ldi	r24, 0x04	; 4
     fde:	80 93 2c 01 	sts	0x012C, r24
					}
					count++;
     fe2:	80 91 42 01 	lds	r24, 0x0142
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	80 93 42 01 	sts	0x0142, r24
     fec:	7c ce       	rjmp	.-776    	; 0xce6 <main+0xb2>
				}
			}
		}

		/* Step_5 */
		else if(next_step==STEP_5)
     fee:	80 91 2c 01 	lds	r24, 0x012C
     ff2:	85 30       	cpi	r24, 0x05	; 5
     ff4:	09 f0       	breq	.+2      	; 0xff8 <main+0x3c4>
     ff6:	77 ce       	rjmp	.-786    	; 0xce6 <main+0xb2>
		{
			Timer1_setCallBack(action_for_unmatched_pass_inHMI);
     ff8:	87 ef       	ldi	r24, 0xF7	; 247
     ffa:	95 e0       	ldi	r25, 0x05	; 5
     ffc:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <Timer1_setCallBack>
			Timer1_init(&timer1_config);
    1000:	ce 01       	movw	r24, r28
    1002:	46 96       	adiw	r24, 0x16	; 22
    1004:	0e 94 92 15 	call	0x2b24	; 0x2b24 <Timer1_init>
			next_step=STEP_2;
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	80 93 2c 01 	sts	0x012C, r24
			LCD_clearScreen();
    100e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <LCD_clearScreen>
    1012:	69 ce       	rjmp	.-814    	; 0xce6 <main+0xb2>

00001014 <create_password>:

/**********************************************************************************
 *                         Functions Definitions
 *********************************************************************************/
void create_password()
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	60 97       	sbiw	r28, 0x10	; 16
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
	/* Receive the reply of the Control ECU */
	if((final_key==ENTER) && (enter_count==0))
    1028:	80 91 3c 01 	lds	r24, 0x013C
    102c:	8d 33       	cpi	r24, 0x3D	; 61
    102e:	d9 f5       	brne	.+118    	; 0x10a6 <create_password+0x92>
    1030:	80 91 40 01 	lds	r24, 0x0140
    1034:	88 23       	and	r24, r24
    1036:	b9 f5       	brne	.+110    	; 0x10a6 <create_password+0x92>
	{
		if(send_flag==0)
    1038:	80 91 41 01 	lds	r24, 0x0141
    103c:	88 23       	and	r24, r24
    103e:	b9 f4       	brne	.+46     	; 0x106e <create_password+0x5a>
		{
			/* Send the password to the control ECU */
			uint8 b=0;
    1040:	18 8a       	std	Y+16, r1	; 0x10
			for(b=0; b<5; b++)
    1042:	18 8a       	std	Y+16, r1	; 0x10
    1044:	0c c0       	rjmp	.+24     	; 0x105e <create_password+0x4a>
			{
				UART_sendByte(pass[b]);
    1046:	88 89       	ldd	r24, Y+16	; 0x10
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	fc 01       	movw	r30, r24
    104e:	e8 5b       	subi	r30, 0xB8	; 184
    1050:	fe 4f       	sbci	r31, 0xFE	; 254
    1052:	80 81       	ld	r24, Z
    1054:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_sendByte>
	{
		if(send_flag==0)
		{
			/* Send the password to the control ECU */
			uint8 b=0;
			for(b=0; b<5; b++)
    1058:	88 89       	ldd	r24, Y+16	; 0x10
    105a:	8f 5f       	subi	r24, 0xFF	; 255
    105c:	88 8b       	std	Y+16, r24	; 0x10
    105e:	88 89       	ldd	r24, Y+16	; 0x10
    1060:	85 30       	cpi	r24, 0x05	; 5
    1062:	88 f3       	brcs	.-30     	; 0x1046 <create_password+0x32>
			{
				UART_sendByte(pass[b]);
			}
			send_flag++;
    1064:	80 91 41 01 	lds	r24, 0x0141
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	80 93 41 01 	sts	0x0141, r24
		}
		/* Move the cursor to the next line */
		LCD_clearScreen();
    106e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Re-enter same ");
    1072:	2e ee       	ldi	r18, 0xEE	; 238
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"pass:");
    1080:	2d ef       	ldi	r18, 0xFD	; 253
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
		row=0;col=0;enter_count++;
    108e:	10 92 3e 01 	sts	0x013E, r1
    1092:	10 92 3f 01 	sts	0x013F, r1
    1096:	80 91 40 01 	lds	r24, 0x0140
    109a:	8f 5f       	subi	r24, 0xFF	; 255
    109c:	80 93 40 01 	sts	0x0140, r24
		final_key=0;
    10a0:	10 92 3c 01 	sts	0x013C, r1
    10a4:	ee c0       	rjmp	.+476    	; 0x1282 <create_password+0x26e>

	/* To skip the loop of taking the password and go to the next step
	 * and To receive the correct "Enter" even if it is not pressed correctly
	 * from the first time
	 */
	else if((enter_count==1) && (final_key==ENTER))
    10a6:	80 91 40 01 	lds	r24, 0x0140
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	f9 f4       	brne	.+62     	; 0x10ec <create_password+0xd8>
    10ae:	80 91 3c 01 	lds	r24, 0x013C
    10b2:	8d 33       	cpi	r24, 0x3D	; 61
    10b4:	d9 f4       	brne	.+54     	; 0x10ec <create_password+0xd8>
	{
		final_key=0;
    10b6:	10 92 3c 01 	sts	0x013C, r1
		if(send_flag==1)
    10ba:	80 91 41 01 	lds	r24, 0x0141
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 f4       	brne	.+36     	; 0x10e6 <create_password+0xd2>
		{
			/* Send the password to the control ECU */
			uint8 b=0;
    10c2:	1f 86       	std	Y+15, r1	; 0x0f
			for(b=0; b<5; b++)
    10c4:	1f 86       	std	Y+15, r1	; 0x0f
    10c6:	0c c0       	rjmp	.+24     	; 0x10e0 <create_password+0xcc>
			{
				UART_sendByte(confirmed_pass[b]);
    10c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	fc 01       	movw	r30, r24
    10d0:	e3 5b       	subi	r30, 0xB3	; 179
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	80 81       	ld	r24, Z
    10d6:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_sendByte>
		final_key=0;
		if(send_flag==1)
		{
			/* Send the password to the control ECU */
			uint8 b=0;
			for(b=0; b<5; b++)
    10da:	8f 85       	ldd	r24, Y+15	; 0x0f
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	8f 87       	std	Y+15, r24	; 0x0f
    10e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e2:	85 30       	cpi	r24, 0x05	; 5
    10e4:	88 f3       	brcs	.-30     	; 0x10c8 <create_password+0xb4>
			{
				UART_sendByte(confirmed_pass[b]);
			}
		}
		send_flag=0;
    10e6:	10 92 41 01 	sts	0x0141, r1
    10ea:	cb c0       	rjmp	.+406    	; 0x1282 <create_password+0x26e>
	}

	/* To receive the correct "Enter" key from the user after entering the password */
	else if(row==5)
    10ec:	80 91 3e 01 	lds	r24, 0x013E
    10f0:	85 30       	cpi	r24, 0x05	; 5
    10f2:	51 f4       	brne	.+20     	; 0x1108 <create_password+0xf4>
	{
		if(final_key!=ENTER)
    10f4:	80 91 3c 01 	lds	r24, 0x013C
    10f8:	8d 33       	cpi	r24, 0x3D	; 61
    10fa:	09 f4       	brne	.+2      	; 0x10fe <create_password+0xea>
    10fc:	c2 c0       	rjmp	.+388    	; 0x1282 <create_password+0x26e>
		{
			final_key=KEYPAD_getPressedKey();
    10fe:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <KEYPAD_getPressedKey>
    1102:	80 93 3c 01 	sts	0x013C, r24
    1106:	bd c0       	rjmp	.+378    	; 0x1282 <create_password+0x26e>
	}

	/* To take the password for the first time */
	else
	{
		LCD_clearScreen();
    1108:	0e 94 18 15 	call	0x2a30	; 0x2a30 <LCD_clearScreen>
		/* Move the cursor to the next line */
		LCD_displayStringRowColumn(0,0,"Please enter new");
    110c:	23 e0       	ldi	r18, 0x03	; 3
    110e:	31 e0       	ldi	r19, 0x01	; 1
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"pass:");
    111a:	2d ef       	ldi	r18, 0xFD	; 253
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LCD_displayStringRowColumn>
    1128:	ac c0       	rjmp	.+344    	; 0x1282 <create_password+0x26e>
	}

	/* Taking the password from the user */
	while(row<5){

		key=KEYPAD_getPressedKey();
    112a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <KEYPAD_getPressedKey>
    112e:	80 93 3b 01 	sts	0x013B, r24

		if(key>=0 && (key!=ENTER))
    1132:	80 91 3b 01 	lds	r24, 0x013B
    1136:	8d 33       	cpi	r24, 0x3D	; 61
    1138:	91 f1       	breq	.+100    	; 0x119e <create_password+0x18a>
		{
			/* Display after the end of the last word */
			LCD_moveCursor(1,col+5);
    113a:	80 91 3f 01 	lds	r24, 0x013F
    113e:	98 2f       	mov	r25, r24
    1140:	9b 5f       	subi	r25, 0xFB	; 251
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	69 2f       	mov	r22, r25
    1146:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_moveCursor>
			LCD_displayCharacter('*');
    114a:	8a e2       	ldi	r24, 0x2A	; 42
    114c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
			if(send_flag==0)
    1150:	80 91 41 01 	lds	r24, 0x0141
    1154:	88 23       	and	r24, r24
    1156:	59 f4       	brne	.+22     	; 0x116e <create_password+0x15a>
			{
				pass[row]=key;
    1158:	80 91 3e 01 	lds	r24, 0x013E
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	20 91 3b 01 	lds	r18, 0x013B
    1164:	fc 01       	movw	r30, r24
    1166:	e8 5b       	subi	r30, 0xB8	; 184
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	20 83       	st	Z, r18
    116c:	0e c0       	rjmp	.+28     	; 0x118a <create_password+0x176>
			}
			else if(send_flag==1)
    116e:	80 91 41 01 	lds	r24, 0x0141
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	51 f4       	brne	.+20     	; 0x118a <create_password+0x176>
			{
				confirmed_pass[row]=key;
    1176:	80 91 3e 01 	lds	r24, 0x013E
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	20 91 3b 01 	lds	r18, 0x013B
    1182:	fc 01       	movw	r30, r24
    1184:	e3 5b       	subi	r30, 0xB3	; 179
    1186:	fe 4f       	sbci	r31, 0xFE	; 254
    1188:	20 83       	st	Z, r18
			}
			row++; col++;
    118a:	80 91 3e 01 	lds	r24, 0x013E
    118e:	8f 5f       	subi	r24, 0xFF	; 255
    1190:	80 93 3e 01 	sts	0x013E, r24
    1194:	80 91 3f 01 	lds	r24, 0x013F
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	80 93 3f 01 	sts	0x013F, r24
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a6 e9       	ldi	r26, 0x96	; 150
    11a4:	b3 e4       	ldi	r27, 0x43	; 67
    11a6:	8b 87       	std	Y+11, r24	; 0x0b
    11a8:	9c 87       	std	Y+12, r25	; 0x0c
    11aa:	ad 87       	std	Y+13, r26	; 0x0d
    11ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	4a ef       	ldi	r20, 0xFA	; 250
    11bc:	54 e4       	ldi	r21, 0x44	; 68
    11be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	8f 83       	std	Y+7, r24	; 0x07
    11c8:	98 87       	std	Y+8, r25	; 0x08
    11ca:	a9 87       	std	Y+9, r26	; 0x09
    11cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ce:	6f 81       	ldd	r22, Y+7	; 0x07
    11d0:	78 85       	ldd	r23, Y+8	; 0x08
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e8       	ldi	r20, 0x80	; 128
    11dc:	5f e3       	ldi	r21, 0x3F	; 63
    11de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e2:	88 23       	and	r24, r24
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <create_password+0x1dc>
		__ticks = 1;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	9e 83       	std	Y+6, r25	; 0x06
    11ec:	8d 83       	std	Y+5, r24	; 0x05
    11ee:	3f c0       	rjmp	.+126    	; 0x126e <create_password+0x25a>
	else if (__tmp > 65535)
    11f0:	6f 81       	ldd	r22, Y+7	; 0x07
    11f2:	78 85       	ldd	r23, Y+8	; 0x08
    11f4:	89 85       	ldd	r24, Y+9	; 0x09
    11f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	3f ef       	ldi	r19, 0xFF	; 255
    11fc:	4f e7       	ldi	r20, 0x7F	; 127
    11fe:	57 e4       	ldi	r21, 0x47	; 71
    1200:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1204:	18 16       	cp	r1, r24
    1206:	4c f5       	brge	.+82     	; 0x125a <create_password+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1208:	6b 85       	ldd	r22, Y+11	; 0x0b
    120a:	7c 85       	ldd	r23, Y+12	; 0x0c
    120c:	8d 85       	ldd	r24, Y+13	; 0x0d
    120e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e2       	ldi	r20, 0x20	; 32
    1216:	51 e4       	ldi	r21, 0x41	; 65
    1218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	bc 01       	movw	r22, r24
    1222:	cd 01       	movw	r24, r26
    1224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <create_password+0x23c>
    1232:	88 ec       	ldi	r24, 0xC8	; 200
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	8b 83       	std	Y+3, r24	; 0x03
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <create_password+0x22a>
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	9e 81       	ldd	r25, Y+6	; 0x06
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	9e 83       	std	Y+6, r25	; 0x06
    124e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	69 f7       	brne	.-38     	; 0x1232 <create_password+0x21e>
    1258:	14 c0       	rjmp	.+40     	; 0x1282 <create_password+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125a:	6f 81       	ldd	r22, Y+7	; 0x07
    125c:	78 85       	ldd	r23, Y+8	; 0x08
    125e:	89 85       	ldd	r24, Y+9	; 0x09
    1260:	9a 85       	ldd	r25, Y+10	; 0x0a
    1262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <create_password+0x266>
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayStringRowColumn(0,0,"Please enter new");
		LCD_displayStringRowColumn(1,0,"pass:");
	}

	/* Taking the password from the user */
	while(row<5){
    1282:	80 91 3e 01 	lds	r24, 0x013E
    1286:	85 30       	cpi	r24, 0x05	; 5
    1288:	08 f4       	brcc	.+2      	; 0x128c <create_password+0x278>
    128a:	4f cf       	rjmp	.-354    	; 0x112a <create_password+0x116>
			row++; col++;
		}
		/* Press Time */
		_delay_ms(300);
	}
}
    128c:	60 96       	adiw	r28, 0x10	; 16
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <enter_saved_password>:

void enter_saved_password()
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	aa 97       	sbiw	r28, 0x2a	; 42
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    12b2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <LCD_clearScreen>
	/* Move the cursor to the next line */
	LCD_moveCursor(0,0);
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_moveCursor>
	LCD_displayString("Plz enter Pass:");
    12be:	84 e1       	ldi	r24, 0x14	; 20
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_displayString>
	row=0;col=0;
    12c6:	10 92 3e 01 	sts	0x013E, r1
    12ca:	10 92 3f 01 	sts	0x013F, r1
    12ce:	97 c0       	rjmp	.+302    	; 0x13fe <enter_saved_password+0x160>
	/* Taking the password from the user */
	while(row<5){
		key=KEYPAD_getPressedKey();
    12d0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <KEYPAD_getPressedKey>
    12d4:	80 93 3b 01 	sts	0x013B, r24

		if((key>=0) && (key!=ENTER))
    12d8:	80 91 3b 01 	lds	r24, 0x013B
    12dc:	8d 33       	cpi	r24, 0x3D	; 61
    12de:	e9 f0       	breq	.+58     	; 0x131a <enter_saved_password+0x7c>
		{
			LCD_moveCursor(1,col);
    12e0:	90 91 3f 01 	lds	r25, 0x013F
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	69 2f       	mov	r22, r25
    12e8:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_moveCursor>
			LCD_displayCharacter('*');
    12ec:	8a e2       	ldi	r24, 0x2A	; 42
    12ee:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
			pass[row]=key;
    12f2:	80 91 3e 01 	lds	r24, 0x013E
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	20 91 3b 01 	lds	r18, 0x013B
    12fe:	fc 01       	movw	r30, r24
    1300:	e8 5b       	subi	r30, 0xB8	; 184
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	20 83       	st	Z, r18
			row++; col++;
    1306:	80 91 3e 01 	lds	r24, 0x013E
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	80 93 3e 01 	sts	0x013E, r24
    1310:	80 91 3f 01 	lds	r24, 0x013F
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	80 93 3f 01 	sts	0x013F, r24
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a6 e9       	ldi	r26, 0x96	; 150
    1320:	b3 e4       	ldi	r27, 0x43	; 67
    1322:	8f a3       	std	Y+39, r24	; 0x27
    1324:	98 a7       	std	Y+40, r25	; 0x28
    1326:	a9 a7       	std	Y+41, r26	; 0x29
    1328:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132a:	6f a1       	ldd	r22, Y+39	; 0x27
    132c:	78 a5       	ldd	r23, Y+40	; 0x28
    132e:	89 a5       	ldd	r24, Y+41	; 0x29
    1330:	9a a5       	ldd	r25, Y+42	; 0x2a
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	4a ef       	ldi	r20, 0xFA	; 250
    1338:	54 e4       	ldi	r21, 0x44	; 68
    133a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	8b a3       	std	Y+35, r24	; 0x23
    1344:	9c a3       	std	Y+36, r25	; 0x24
    1346:	ad a3       	std	Y+37, r26	; 0x25
    1348:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    134a:	6b a1       	ldd	r22, Y+35	; 0x23
    134c:	7c a1       	ldd	r23, Y+36	; 0x24
    134e:	8d a1       	ldd	r24, Y+37	; 0x25
    1350:	9e a1       	ldd	r25, Y+38	; 0x26
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    135e:	88 23       	and	r24, r24
    1360:	2c f4       	brge	.+10     	; 0x136c <enter_saved_password+0xce>
		__ticks = 1;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9a a3       	std	Y+34, r25	; 0x22
    1368:	89 a3       	std	Y+33, r24	; 0x21
    136a:	3f c0       	rjmp	.+126    	; 0x13ea <enter_saved_password+0x14c>
	else if (__tmp > 65535)
    136c:	6b a1       	ldd	r22, Y+35	; 0x23
    136e:	7c a1       	ldd	r23, Y+36	; 0x24
    1370:	8d a1       	ldd	r24, Y+37	; 0x25
    1372:	9e a1       	ldd	r25, Y+38	; 0x26
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	3f ef       	ldi	r19, 0xFF	; 255
    1378:	4f e7       	ldi	r20, 0x7F	; 127
    137a:	57 e4       	ldi	r21, 0x47	; 71
    137c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1380:	18 16       	cp	r1, r24
    1382:	4c f5       	brge	.+82     	; 0x13d6 <enter_saved_password+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1384:	6f a1       	ldd	r22, Y+39	; 0x27
    1386:	78 a5       	ldd	r23, Y+40	; 0x28
    1388:	89 a5       	ldd	r24, Y+41	; 0x29
    138a:	9a a5       	ldd	r25, Y+42	; 0x2a
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e2       	ldi	r20, 0x20	; 32
    1392:	51 e4       	ldi	r21, 0x41	; 65
    1394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9a a3       	std	Y+34, r25	; 0x22
    13aa:	89 a3       	std	Y+33, r24	; 0x21
    13ac:	0f c0       	rjmp	.+30     	; 0x13cc <enter_saved_password+0x12e>
    13ae:	88 ec       	ldi	r24, 0xC8	; 200
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	98 a3       	std	Y+32, r25	; 0x20
    13b4:	8f 8f       	std	Y+31, r24	; 0x1f
    13b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13b8:	98 a1       	ldd	r25, Y+32	; 0x20
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <enter_saved_password+0x11c>
    13be:	98 a3       	std	Y+32, r25	; 0x20
    13c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c2:	89 a1       	ldd	r24, Y+33	; 0x21
    13c4:	9a a1       	ldd	r25, Y+34	; 0x22
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	9a a3       	std	Y+34, r25	; 0x22
    13ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13cc:	89 a1       	ldd	r24, Y+33	; 0x21
    13ce:	9a a1       	ldd	r25, Y+34	; 0x22
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	69 f7       	brne	.-38     	; 0x13ae <enter_saved_password+0x110>
    13d4:	14 c0       	rjmp	.+40     	; 0x13fe <enter_saved_password+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d6:	6b a1       	ldd	r22, Y+35	; 0x23
    13d8:	7c a1       	ldd	r23, Y+36	; 0x24
    13da:	8d a1       	ldd	r24, Y+37	; 0x25
    13dc:	9e a1       	ldd	r25, Y+38	; 0x26
    13de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	9a a3       	std	Y+34, r25	; 0x22
    13e8:	89 a3       	std	Y+33, r24	; 0x21
    13ea:	89 a1       	ldd	r24, Y+33	; 0x21
    13ec:	9a a1       	ldd	r25, Y+34	; 0x22
    13ee:	9e 8f       	std	Y+30, r25	; 0x1e
    13f0:	8d 8f       	std	Y+29, r24	; 0x1d
    13f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <enter_saved_password+0x158>
    13fa:	9e 8f       	std	Y+30, r25	; 0x1e
    13fc:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Move the cursor to the next line */
	LCD_moveCursor(0,0);
	LCD_displayString("Plz enter Pass:");
	row=0;col=0;
	/* Taking the password from the user */
	while(row<5){
    13fe:	80 91 3e 01 	lds	r24, 0x013E
    1402:	85 30       	cpi	r24, 0x05	; 5
    1404:	08 f4       	brcc	.+2      	; 0x1408 <enter_saved_password+0x16a>
    1406:	64 cf       	rjmp	.-312    	; 0x12d0 <enter_saved_password+0x32>
			row++; col++;
		}
		/* press time */
		_delay_ms(300);
	}
	final_key=KEYPAD_getPressedKey();
    1408:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <KEYPAD_getPressedKey>
    140c:	80 93 3c 01 	sts	0x013C, r24
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a6 e9       	ldi	r26, 0x96	; 150
    1416:	b3 e4       	ldi	r27, 0x43	; 67
    1418:	89 8f       	std	Y+25, r24	; 0x19
    141a:	9a 8f       	std	Y+26, r25	; 0x1a
    141c:	ab 8f       	std	Y+27, r26	; 0x1b
    141e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	69 8d       	ldd	r22, Y+25	; 0x19
    1422:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1424:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1426:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	4a ef       	ldi	r20, 0xFA	; 250
    142e:	54 e4       	ldi	r21, 0x44	; 68
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	8d 8b       	std	Y+21, r24	; 0x15
    143a:	9e 8b       	std	Y+22, r25	; 0x16
    143c:	af 8b       	std	Y+23, r26	; 0x17
    143e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1440:	6d 89       	ldd	r22, Y+21	; 0x15
    1442:	7e 89       	ldd	r23, Y+22	; 0x16
    1444:	8f 89       	ldd	r24, Y+23	; 0x17
    1446:	98 8d       	ldd	r25, Y+24	; 0x18
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1454:	88 23       	and	r24, r24
    1456:	2c f4       	brge	.+10     	; 0x1462 <enter_saved_password+0x1c4>
		__ticks = 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9c 8b       	std	Y+20, r25	; 0x14
    145e:	8b 8b       	std	Y+19, r24	; 0x13
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <enter_saved_password+0x242>
	else if (__tmp > 65535)
    1462:	6d 89       	ldd	r22, Y+21	; 0x15
    1464:	7e 89       	ldd	r23, Y+22	; 0x16
    1466:	8f 89       	ldd	r24, Y+23	; 0x17
    1468:	98 8d       	ldd	r25, Y+24	; 0x18
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	3f ef       	ldi	r19, 0xFF	; 255
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	57 e4       	ldi	r21, 0x47	; 71
    1472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	4c f5       	brge	.+82     	; 0x14cc <enter_saved_password+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	69 8d       	ldd	r22, Y+25	; 0x19
    147c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    147e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1480:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e4       	ldi	r21, 0x41	; 65
    148a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9c 8b       	std	Y+20, r25	; 0x14
    14a0:	8b 8b       	std	Y+19, r24	; 0x13
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <enter_saved_password+0x224>
    14a4:	88 ec       	ldi	r24, 0xC8	; 200
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9a 8b       	std	Y+18, r25	; 0x12
    14aa:	89 8b       	std	Y+17, r24	; 0x11
    14ac:	89 89       	ldd	r24, Y+17	; 0x11
    14ae:	9a 89       	ldd	r25, Y+18	; 0x12
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <enter_saved_password+0x212>
    14b4:	9a 8b       	std	Y+18, r25	; 0x12
    14b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ba:	9c 89       	ldd	r25, Y+20	; 0x14
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	9c 8b       	std	Y+20, r25	; 0x14
    14c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	8b 89       	ldd	r24, Y+19	; 0x13
    14c4:	9c 89       	ldd	r25, Y+20	; 0x14
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f7       	brne	.-38     	; 0x14a4 <enter_saved_password+0x206>
    14ca:	8b c0       	rjmp	.+278    	; 0x15e2 <enter_saved_password+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	6d 89       	ldd	r22, Y+21	; 0x15
    14ce:	7e 89       	ldd	r23, Y+22	; 0x16
    14d0:	8f 89       	ldd	r24, Y+23	; 0x17
    14d2:	98 8d       	ldd	r25, Y+24	; 0x18
    14d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9c 8b       	std	Y+20, r25	; 0x14
    14de:	8b 8b       	std	Y+19, r24	; 0x13
    14e0:	8b 89       	ldd	r24, Y+19	; 0x13
    14e2:	9c 89       	ldd	r25, Y+20	; 0x14
    14e4:	98 8b       	std	Y+16, r25	; 0x10
    14e6:	8f 87       	std	Y+15, r24	; 0x0f
    14e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ea:	98 89       	ldd	r25, Y+16	; 0x10
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <enter_saved_password+0x24e>
    14f0:	98 8b       	std	Y+16, r25	; 0x10
    14f2:	8f 87       	std	Y+15, r24	; 0x0f
    14f4:	76 c0       	rjmp	.+236    	; 0x15e2 <enter_saved_password+0x344>
	_delay_ms(300);

	while(final_key!=ENTER)
	{
		final_key=KEYPAD_getPressedKey();
    14f6:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <KEYPAD_getPressedKey>
    14fa:	80 93 3c 01 	sts	0x013C, r24
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a6 e9       	ldi	r26, 0x96	; 150
    1504:	b3 e4       	ldi	r27, 0x43	; 67
    1506:	8b 87       	std	Y+11, r24	; 0x0b
    1508:	9c 87       	std	Y+12, r25	; 0x0c
    150a:	ad 87       	std	Y+13, r26	; 0x0d
    150c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	4a ef       	ldi	r20, 0xFA	; 250
    151c:	54 e4       	ldi	r21, 0x44	; 68
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8f 83       	std	Y+7, r24	; 0x07
    1528:	98 87       	std	Y+8, r25	; 0x08
    152a:	a9 87       	std	Y+9, r26	; 0x09
    152c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1542:	88 23       	and	r24, r24
    1544:	2c f4       	brge	.+10     	; 0x1550 <enter_saved_password+0x2b2>
		__ticks = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	3f c0       	rjmp	.+126    	; 0x15ce <enter_saved_password+0x330>
	else if (__tmp > 65535)
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1564:	18 16       	cp	r1, r24
    1566:	4c f5       	brge	.+82     	; 0x15ba <enter_saved_password+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <enter_saved_password+0x312>
    1592:	88 ec       	ldi	r24, 0xC8	; 200
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9c 83       	std	Y+4, r25	; 0x04
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <enter_saved_password+0x300>
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f7       	brne	.-38     	; 0x1592 <enter_saved_password+0x2f4>
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <enter_saved_password+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ba:	6f 81       	ldd	r22, Y+7	; 0x07
    15bc:	78 85       	ldd	r23, Y+8	; 0x08
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <enter_saved_password+0x33c>
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
	}
	final_key=KEYPAD_getPressedKey();
	_delay_ms(300);

	while(final_key!=ENTER)
    15e2:	80 91 3c 01 	lds	r24, 0x013C
    15e6:	8d 33       	cpi	r24, 0x3D	; 61
    15e8:	09 f0       	breq	.+2      	; 0x15ec <enter_saved_password+0x34e>
    15ea:	85 cf       	rjmp	.-246    	; 0x14f6 <enter_saved_password+0x258>
	{
		final_key=KEYPAD_getPressedKey();
		_delay_ms(300);
	}
	if(final_key==ENTER)
    15ec:	80 91 3c 01 	lds	r24, 0x013C
    15f0:	8d 33       	cpi	r24, 0x3D	; 61
    15f2:	19 f4       	brne	.+6      	; 0x15fa <enter_saved_password+0x35c>
	{
		entered=1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 3d 01 	sts	0x013D, r24
	}
}
    15fa:	aa 96       	adiw	r28, 0x2a	; 42
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <send_pass_to_control>:

void send_pass_to_control(uint8*pass)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <send_pass_to_control+0x6>
    1612:	0f 92       	push	r0
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	9b 83       	std	Y+3, r25	; 0x03
    161a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 x=0;
    161c:	19 82       	std	Y+1, r1	; 0x01
	for(x=0; x<5; x++)
    161e:	19 82       	std	Y+1, r1	; 0x01
    1620:	0e c0       	rjmp	.+28     	; 0x163e <send_pass_to_control+0x32>
	{
		UART_sendByte(pass[x]);
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	9b 81       	ldd	r25, Y+3	; 0x03
    162c:	fc 01       	movw	r30, r24
    162e:	e2 0f       	add	r30, r18
    1630:	f3 1f       	adc	r31, r19
    1632:	80 81       	ld	r24, Z
    1634:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_sendByte>
}

void send_pass_to_control(uint8*pass)
{
	uint8 x=0;
	for(x=0; x<5; x++)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	85 30       	cpi	r24, 0x05	; 5
    1642:	78 f3       	brcs	.-34     	; 0x1622 <send_pass_to_control+0x16>
	{
		UART_sendByte(pass[x]);
	}
}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <GPIO_setupPinDirection>:
#include "gpio.h"
#include "common_macros.h"
#include "avr/io.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <GPIO_setupPinDirection+0x6>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <GPIO_setupPinDirection+0x8>
    1658:	0f 92       	push	r0
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	6a 83       	std	Y+2, r22	; 0x02
    1662:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	88 30       	cpi	r24, 0x08	; 8
    1668:	08 f0       	brcs	.+2      	; 0x166c <GPIO_setupPinDirection+0x1c>
    166a:	d5 c0       	rjmp	.+426    	; 0x1816 <GPIO_setupPinDirection+0x1c6>
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	08 f0       	brcs	.+2      	; 0x1674 <GPIO_setupPinDirection+0x24>
    1672:	d1 c0       	rjmp	.+418    	; 0x1816 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3d 83       	std	Y+5, r19	; 0x05
    167c:	2c 83       	std	Y+4, r18	; 0x04
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <GPIO_setupPinDirection+0x3a>
    1688:	43 c0       	rjmp	.+134    	; 0x1710 <GPIO_setupPinDirection+0xc0>
    168a:	2c 81       	ldd	r18, Y+4	; 0x04
    168c:	3d 81       	ldd	r19, Y+5	; 0x05
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	2c f4       	brge	.+10     	; 0x169e <GPIO_setupPinDirection+0x4e>
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	71 f0       	breq	.+28     	; 0x16b8 <GPIO_setupPinDirection+0x68>
    169c:	bc c0       	rjmp	.+376    	; 0x1816 <GPIO_setupPinDirection+0x1c6>
    169e:	2c 81       	ldd	r18, Y+4	; 0x04
    16a0:	3d 81       	ldd	r19, Y+5	; 0x05
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <GPIO_setupPinDirection+0x5a>
    16a8:	5f c0       	rjmp	.+190    	; 0x1768 <GPIO_setupPinDirection+0x118>
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <GPIO_setupPinDirection+0x66>
    16b4:	85 c0       	rjmp	.+266    	; 0x17c0 <GPIO_setupPinDirection+0x170>
    16b6:	af c0       	rjmp	.+350    	; 0x1816 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	a1 f4       	brne	.+40     	; 0x16e6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16be:	aa e3       	ldi	r26, 0x3A	; 58
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ea e3       	ldi	r30, 0x3A	; 58
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <GPIO_setupPinDirection+0x8c>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <GPIO_setupPinDirection+0x88>
    16e0:	84 2b       	or	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	98 c0       	rjmp	.+304    	; 0x1816 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16e6:	aa e3       	ldi	r26, 0x3A	; 58
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	ea e3       	ldi	r30, 0x3A	; 58
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <GPIO_setupPinDirection+0xb4>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <GPIO_setupPinDirection+0xb0>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	83 c0       	rjmp	.+262    	; 0x1816 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	a1 f4       	brne	.+40     	; 0x173e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1716:	a7 e3       	ldi	r26, 0x37	; 55
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e7 e3       	ldi	r30, 0x37	; 55
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_setupPinDirection+0xe4>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_setupPinDirection+0xe0>
    1738:	84 2b       	or	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	6c c0       	rjmp	.+216    	; 0x1816 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    173e:	a7 e3       	ldi	r26, 0x37	; 55
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e7 e3       	ldi	r30, 0x37	; 55
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <GPIO_setupPinDirection+0x10c>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <GPIO_setupPinDirection+0x108>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	57 c0       	rjmp	.+174    	; 0x1816 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	a1 f4       	brne	.+40     	; 0x1796 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    176e:	a4 e3       	ldi	r26, 0x34	; 52
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e4 e3       	ldi	r30, 0x34	; 52
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <GPIO_setupPinDirection+0x13c>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <GPIO_setupPinDirection+0x138>
    1790:	84 2b       	or	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	40 c0       	rjmp	.+128    	; 0x1816 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1796:	a4 e3       	ldi	r26, 0x34	; 52
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e4 e3       	ldi	r30, 0x34	; 52
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <GPIO_setupPinDirection+0x164>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <GPIO_setupPinDirection+0x160>
    17b8:	80 95       	com	r24
    17ba:	84 23       	and	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	2b c0       	rjmp	.+86     	; 0x1816 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	a1 f4       	brne	.+40     	; 0x17ee <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17c6:	a1 e3       	ldi	r26, 0x31	; 49
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e1 e3       	ldi	r30, 0x31	; 49
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_setupPinDirection+0x194>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_setupPinDirection+0x190>
    17e8:	84 2b       	or	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17ee:	a1 e3       	ldi	r26, 0x31	; 49
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e1 e3       	ldi	r30, 0x31	; 49
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_setupPinDirection+0x1bc>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_setupPinDirection+0x1b8>
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <GPIO_writePin>:


void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <GPIO_writePin+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <GPIO_writePin+0x8>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	6a 83       	std	Y+2, r22	; 0x02
    1838:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	88 30       	cpi	r24, 0x08	; 8
    183e:	08 f0       	brcs	.+2      	; 0x1842 <GPIO_writePin+0x1c>
    1840:	d5 c0       	rjmp	.+426    	; 0x19ec <GPIO_writePin+0x1c6>
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	08 f0       	brcs	.+2      	; 0x184a <GPIO_writePin+0x24>
    1848:	d1 c0       	rjmp	.+418    	; 0x19ec <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3d 83       	std	Y+5, r19	; 0x05
    1852:	2c 83       	std	Y+4, r18	; 0x04
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <GPIO_writePin+0x3a>
    185e:	43 c0       	rjmp	.+134    	; 0x18e6 <GPIO_writePin+0xc0>
    1860:	2c 81       	ldd	r18, Y+4	; 0x04
    1862:	3d 81       	ldd	r19, Y+5	; 0x05
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	2c f4       	brge	.+10     	; 0x1874 <GPIO_writePin+0x4e>
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	71 f0       	breq	.+28     	; 0x188e <GPIO_writePin+0x68>
    1872:	bc c0       	rjmp	.+376    	; 0x19ec <GPIO_writePin+0x1c6>
    1874:	2c 81       	ldd	r18, Y+4	; 0x04
    1876:	3d 81       	ldd	r19, Y+5	; 0x05
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <GPIO_writePin+0x5a>
    187e:	5f c0       	rjmp	.+190    	; 0x193e <GPIO_writePin+0x118>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <GPIO_writePin+0x66>
    188a:	85 c0       	rjmp	.+266    	; 0x1996 <GPIO_writePin+0x170>
    188c:	af c0       	rjmp	.+350    	; 0x19ec <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW)
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	88 23       	and	r24, r24
    1892:	a9 f4       	brne	.+42     	; 0x18be <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
    1894:	ab e3       	ldi	r26, 0x3B	; 59
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e3       	ldi	r30, 0x3B	; 59
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_writePin+0x8c>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_writePin+0x88>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	97 c0       	rjmp	.+302    	; 0x19ec <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
    18be:	ab e3       	ldi	r26, 0x3B	; 59
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	eb e3       	ldi	r30, 0x3B	; 59
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <GPIO_writePin+0xb6>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <GPIO_writePin+0xb2>
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	83 c0       	rjmp	.+262    	; 0x19ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW)
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	88 23       	and	r24, r24
    18ea:	a9 f4       	brne	.+42     	; 0x1916 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    18ec:	a8 e3       	ldi	r26, 0x38	; 56
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e8 e3       	ldi	r30, 0x38	; 56
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_writePin+0xe4>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_writePin+0xe0>
    190e:	80 95       	com	r24
    1910:	84 23       	and	r24, r20
    1912:	8c 93       	st	X, r24
    1914:	6b c0       	rjmp	.+214    	; 0x19ec <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    1916:	a8 e3       	ldi	r26, 0x38	; 56
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e8 e3       	ldi	r30, 0x38	; 56
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	48 2f       	mov	r20, r24
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <GPIO_writePin+0x10e>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <GPIO_writePin+0x10a>
    1938:	84 2b       	or	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	57 c0       	rjmp	.+174    	; 0x19ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW)
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	88 23       	and	r24, r24
    1942:	a9 f4       	brne	.+42     	; 0x196e <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
    1944:	a5 e3       	ldi	r26, 0x35	; 53
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e5 e3       	ldi	r30, 0x35	; 53
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_writePin+0x13c>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_writePin+0x138>
    1966:	80 95       	com	r24
    1968:	84 23       	and	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	3f c0       	rjmp	.+126    	; 0x19ec <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
    196e:	a5 e3       	ldi	r26, 0x35	; 53
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e5 e3       	ldi	r30, 0x35	; 53
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <GPIO_writePin+0x166>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <GPIO_writePin+0x162>
    1990:	84 2b       	or	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	2b c0       	rjmp	.+86     	; 0x19ec <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW)
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	88 23       	and	r24, r24
    199a:	a9 f4       	brne	.+42     	; 0x19c6 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
    199c:	a2 e3       	ldi	r26, 0x32	; 50
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e2 e3       	ldi	r30, 0x32	; 50
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_writePin+0x194>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_writePin+0x190>
    19be:	80 95       	com	r24
    19c0:	84 23       	and	r24, r20
    19c2:	8c 93       	st	X, r24
    19c4:	13 c0       	rjmp	.+38     	; 0x19ec <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
    19c6:	a2 e3       	ldi	r26, 0x32	; 50
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e2 e3       	ldi	r30, 0x32	; 50
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <GPIO_writePin+0x1be>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <GPIO_writePin+0x1ba>
    19e8:	84 2b       	or	r24, r20
    19ea:	8c 93       	st	X, r24
			}
			break;
		}

	}
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <GPIO_readPin+0x6>
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <GPIO_readPin+0x8>
    1a04:	0f 92       	push	r0
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	8a 83       	std	Y+2, r24	; 0x02
    1a0c:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	88 30       	cpi	r24, 0x08	; 8
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <GPIO_readPin+0x1a>
    1a14:	84 c0       	rjmp	.+264    	; 0x1b1e <GPIO_readPin+0x122>
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	84 30       	cpi	r24, 0x04	; 4
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <GPIO_readPin+0x22>
    1a1c:	80 c0       	rjmp	.+256    	; 0x1b1e <GPIO_readPin+0x122>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	3d 83       	std	Y+5, r19	; 0x05
    1a26:	2c 83       	std	Y+4, r18	; 0x04
    1a28:	4c 81       	ldd	r20, Y+4	; 0x04
    1a2a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a2c:	41 30       	cpi	r20, 0x01	; 1
    1a2e:	51 05       	cpc	r21, r1
    1a30:	79 f1       	breq	.+94     	; 0x1a90 <GPIO_readPin+0x94>
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	9d 81       	ldd	r25, Y+5	; 0x05
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	91 05       	cpc	r25, r1
    1a3a:	34 f4       	brge	.+12     	; 0x1a48 <GPIO_readPin+0x4c>
    1a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a40:	21 15       	cp	r18, r1
    1a42:	31 05       	cpc	r19, r1
    1a44:	69 f0       	breq	.+26     	; 0x1a60 <GPIO_readPin+0x64>
    1a46:	6b c0       	rjmp	.+214    	; 0x1b1e <GPIO_readPin+0x122>
    1a48:	4c 81       	ldd	r20, Y+4	; 0x04
    1a4a:	5d 81       	ldd	r21, Y+5	; 0x05
    1a4c:	42 30       	cpi	r20, 0x02	; 2
    1a4e:	51 05       	cpc	r21, r1
    1a50:	b9 f1       	breq	.+110    	; 0x1ac0 <GPIO_readPin+0xc4>
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	9d 81       	ldd	r25, Y+5	; 0x05
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	91 05       	cpc	r25, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <GPIO_readPin+0x62>
    1a5c:	49 c0       	rjmp	.+146    	; 0x1af0 <GPIO_readPin+0xf4>
    1a5e:	5f c0       	rjmp	.+190    	; 0x1b1e <GPIO_readPin+0x122>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a60:	e9 e3       	ldi	r30, 0x39	; 57
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a9 01       	movw	r20, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <GPIO_readPin+0x7c>
    1a74:	55 95       	asr	r21
    1a76:	47 95       	ror	r20
    1a78:	8a 95       	dec	r24
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <GPIO_readPin+0x78>
    1a7c:	ca 01       	movw	r24, r20
    1a7e:	81 70       	andi	r24, 0x01	; 1
    1a80:	90 70       	andi	r25, 0x00	; 0
    1a82:	88 23       	and	r24, r24
    1a84:	19 f0       	breq	.+6      	; 0x1a8c <GPIO_readPin+0x90>
			{
				value = LOGIC_HIGH;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	49 c0       	rjmp	.+146    	; 0x1b1e <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1a8c:	19 82       	std	Y+1, r1	; 0x01
    1a8e:	47 c0       	rjmp	.+142    	; 0x1b1e <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a90:	e6 e3       	ldi	r30, 0x36	; 54
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a9 01       	movw	r20, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_readPin+0xac>
    1aa4:	55 95       	asr	r21
    1aa6:	47 95       	ror	r20
    1aa8:	8a 95       	dec	r24
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_readPin+0xa8>
    1aac:	ca 01       	movw	r24, r20
    1aae:	81 70       	andi	r24, 0x01	; 1
    1ab0:	90 70       	andi	r25, 0x00	; 0
    1ab2:	88 23       	and	r24, r24
    1ab4:	19 f0       	breq	.+6      	; 0x1abc <GPIO_readPin+0xc0>
			{
				value = LOGIC_HIGH;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	31 c0       	rjmp	.+98     	; 0x1b1e <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1abc:	19 82       	std	Y+1, r1	; 0x01
    1abe:	2f c0       	rjmp	.+94     	; 0x1b1e <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ac0:	e3 e3       	ldi	r30, 0x33	; 51
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	88 2f       	mov	r24, r24
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <GPIO_readPin+0xdc>
    1ad4:	55 95       	asr	r21
    1ad6:	47 95       	ror	r20
    1ad8:	8a 95       	dec	r24
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <GPIO_readPin+0xd8>
    1adc:	ca 01       	movw	r24, r20
    1ade:	81 70       	andi	r24, 0x01	; 1
    1ae0:	90 70       	andi	r25, 0x00	; 0
    1ae2:	88 23       	and	r24, r24
    1ae4:	19 f0       	breq	.+6      	; 0x1aec <GPIO_readPin+0xf0>
			{
				value = LOGIC_HIGH;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	19 c0       	rjmp	.+50     	; 0x1b1e <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1aec:	19 82       	std	Y+1, r1	; 0x01
    1aee:	17 c0       	rjmp	.+46     	; 0x1b1e <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1af0:	e6 e3       	ldi	r30, 0x36	; 54
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a9 01       	movw	r20, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_readPin+0x10c>
    1b04:	55 95       	asr	r21
    1b06:	47 95       	ror	r20
    1b08:	8a 95       	dec	r24
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_readPin+0x108>
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	81 70       	andi	r24, 0x01	; 1
    1b10:	90 70       	andi	r25, 0x00	; 0
    1b12:	88 23       	and	r24, r24
    1b14:	19 f0       	breq	.+6      	; 0x1b1c <GPIO_readPin+0x120>
			{
				value = LOGIC_HIGH;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <GPIO_setupPortDirection>:


void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <GPIO_setupPortDirection+0x6>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <GPIO_setupPortDirection+0x8>
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	84 30       	cpi	r24, 0x04	; 4
    1b44:	90 f5       	brcc	.+100    	; 0x1baa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	3c 83       	std	Y+4, r19	; 0x04
    1b4e:	2b 83       	std	Y+3, r18	; 0x03
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	81 30       	cpi	r24, 0x01	; 1
    1b56:	91 05       	cpc	r25, r1
    1b58:	d1 f0       	breq	.+52     	; 0x1b8e <GPIO_setupPortDirection+0x5e>
    1b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <GPIO_setupPortDirection+0x3e>
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	61 f0       	breq	.+24     	; 0x1b84 <GPIO_setupPortDirection+0x54>
    1b6c:	1e c0       	rjmp	.+60     	; 0x1baa <GPIO_setupPortDirection+0x7a>
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	3c 81       	ldd	r19, Y+4	; 0x04
    1b72:	22 30       	cpi	r18, 0x02	; 2
    1b74:	31 05       	cpc	r19, r1
    1b76:	81 f0       	breq	.+32     	; 0x1b98 <GPIO_setupPortDirection+0x68>
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	81 f0       	breq	.+32     	; 0x1ba2 <GPIO_setupPortDirection+0x72>
    1b82:	13 c0       	rjmp	.+38     	; 0x1baa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b84:	ea e3       	ldi	r30, 0x3A	; 58
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	80 83       	st	Z, r24
    1b8c:	0e c0       	rjmp	.+28     	; 0x1baa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b8e:	e7 e3       	ldi	r30, 0x37	; 55
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	80 83       	st	Z, r24
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b98:	e4 e3       	ldi	r30, 0x34	; 52
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	80 83       	st	Z, r24
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ba2:	e1 e3       	ldi	r30, 0x31	; 49
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <GPIO_writePort>:

void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <GPIO_writePort+0x6>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <GPIO_writePort+0x8>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	84 30       	cpi	r24, 0x04	; 4
    1bcc:	90 f5       	brcc	.+100    	; 0x1c32 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	3c 83       	std	Y+4, r19	; 0x04
    1bd6:	2b 83       	std	Y+3, r18	; 0x03
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	91 05       	cpc	r25, r1
    1be0:	d1 f0       	breq	.+52     	; 0x1c16 <GPIO_writePort+0x5e>
    1be2:	2b 81       	ldd	r18, Y+3	; 0x03
    1be4:	3c 81       	ldd	r19, Y+4	; 0x04
    1be6:	22 30       	cpi	r18, 0x02	; 2
    1be8:	31 05       	cpc	r19, r1
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <GPIO_writePort+0x3e>
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	61 f0       	breq	.+24     	; 0x1c0c <GPIO_writePort+0x54>
    1bf4:	1e c0       	rjmp	.+60     	; 0x1c32 <GPIO_writePort+0x7a>
    1bf6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	81 f0       	breq	.+32     	; 0x1c20 <GPIO_writePort+0x68>
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	83 30       	cpi	r24, 0x03	; 3
    1c06:	91 05       	cpc	r25, r1
    1c08:	81 f0       	breq	.+32     	; 0x1c2a <GPIO_writePort+0x72>
    1c0a:	13 c0       	rjmp	.+38     	; 0x1c32 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c0c:	eb e3       	ldi	r30, 0x3B	; 59
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	80 83       	st	Z, r24
    1c14:	0e c0       	rjmp	.+28     	; 0x1c32 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c16:	e8 e3       	ldi	r30, 0x38	; 56
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	80 83       	st	Z, r24
    1c1e:	09 c0       	rjmp	.+18     	; 0x1c32 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c20:	e5 e3       	ldi	r30, 0x35	; 53
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	80 83       	st	Z, r24
    1c28:	04 c0       	rjmp	.+8      	; 0x1c32 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c2a:	e2 e3       	ldi	r30, 0x32	; 50
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <GPIO_readPort>:

uint8 GPIO_readPort(uint8 port_num)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <GPIO_readPort+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <GPIO_readPort+0x8>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	8a 83       	std	Y+2, r24	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	84 30       	cpi	r24, 0x04	; 4
    1c52:	90 f5       	brcc	.+100    	; 0x1cb8 <GPIO_readPort+0x78>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	3c 83       	std	Y+4, r19	; 0x04
    1c5c:	2b 83       	std	Y+3, r18	; 0x03
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	91 05       	cpc	r25, r1
    1c66:	d1 f0       	breq	.+52     	; 0x1c9c <GPIO_readPort+0x5c>
    1c68:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6c:	22 30       	cpi	r18, 0x02	; 2
    1c6e:	31 05       	cpc	r19, r1
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <GPIO_readPort+0x3c>
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	61 f0       	breq	.+24     	; 0x1c92 <GPIO_readPort+0x52>
    1c7a:	1e c0       	rjmp	.+60     	; 0x1cb8 <GPIO_readPort+0x78>
    1c7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	81 f0       	breq	.+32     	; 0x1ca6 <GPIO_readPort+0x66>
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	83 30       	cpi	r24, 0x03	; 3
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	81 f0       	breq	.+32     	; 0x1cb0 <GPIO_readPort+0x70>
    1c90:	13 c0       	rjmp	.+38     	; 0x1cb8 <GPIO_readPort+0x78>
		{
		case PORTA_ID:
			value = PINA;
    1c92:	e9 e3       	ldi	r30, 0x39	; 57
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	0e c0       	rjmp	.+28     	; 0x1cb8 <GPIO_readPort+0x78>
			break;
		case PORTB_ID:
			value = PINB;
    1c9c:	e6 e3       	ldi	r30, 0x36	; 54
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	09 c0       	rjmp	.+18     	; 0x1cb8 <GPIO_readPort+0x78>
			break;
		case PORTC_ID:
			value = PINC;
    1ca6:	e3 e3       	ldi	r30, 0x33	; 51
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <GPIO_readPort+0x78>
			break;
		case PORTD_ID:
			value = PIND;
    1cb0:	e0 e3       	ldi	r30, 0x30	; 48
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	60 97       	sbiw	r28, 0x10	; 16
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
	 * and set to (0 or 1 depends on the button 's configuration (KEYPAD_BUTTON_PRESSED)),
	 * then looping over the columns to check if there is a pin reads (0 or 1 same signal
	 * of the row), this means that the button intersects this column and row is pressed
	 */
	/* For Rows */
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	63 e0       	ldi	r22, 0x03	; 3
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	64 e0       	ldi	r22, 0x04	; 4
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>

	/* For Columns */
	GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	64 e0       	ldi	r22, 0x04	; 4
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d0e:	83 e0       	ldi	r24, 0x03	; 3
    1d10:	65 e0       	ldi	r22, 0x05	; 5
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1d18:	83 e0       	ldi	r24, 0x03	; 3
    1d1a:	66 e0       	ldi	r22, 0x06	; 6
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
#if(KEYPAD_NUMBER_OF_COLS==4)
	GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1d22:	83 e0       	ldi	r24, 0x03	; 3
    1d24:	67 e0       	ldi	r22, 0x07	; 7
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
#endif

	while(1){
		uint8 row,col;
		for(row=0; row<KEYPAD_NUMBER_OF_ROWS; row++)
    1d2c:	18 8a       	std	Y+16, r1	; 0x10
    1d2e:	b4 c0       	rjmp	.+360    	; 0x1e98 <KEYPAD_getPressedKey+0x1d0>
		{
			/* Each row is set to be output */
			GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    1d30:	88 89       	ldd	r24, Y+16	; 0x10
    1d32:	98 2f       	mov	r25, r24
    1d34:	9f 5f       	subi	r25, 0xFF	; 255
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	69 2f       	mov	r22, r25
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1d40:	88 89       	ldd	r24, Y+16	; 0x10
    1d42:	98 2f       	mov	r25, r24
    1d44:	9f 5f       	subi	r25, 0xFF	; 255
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	69 2f       	mov	r22, r25
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_writePin>
			/* iterating over the columns */
			for(col=0; col<KEYPAD_NUMBER_OF_COLS; col++)
    1d50:	1f 86       	std	Y+15, r1	; 0x0f
    1d52:	22 c0       	rjmp	.+68     	; 0x1d98 <KEYPAD_getPressedKey+0xd0>
			{
				if(GPIO_readPin(KEYPAD_COLS_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col)==KEYPAD_BUTTON_PRESSED)
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	98 2f       	mov	r25, r24
    1d58:	9c 5f       	subi	r25, 0xFC	; 252
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	69 2f       	mov	r22, r25
    1d5e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <GPIO_readPin>
    1d62:	88 23       	and	r24, r24
    1d64:	b1 f4       	brne	.+44     	; 0x1d92 <KEYPAD_getPressedKey+0xca>
				{
#ifndef STANDARD_KEYPAD
#if(KEYPAD_NUMBER_OF_COLS==3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUMBER_OF_COLS)+col+1);
#elif(KEYPAD_NUMBER_OF_COLS==4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUMBER_OF_COLS)+col+1);
    1d66:	88 89       	ldd	r24, Y+16	; 0x10
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	98 2f       	mov	r25, r24
    1d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d78:	89 0f       	add	r24, r25
    1d7a:	8f 5f       	subi	r24, 0xFF	; 255
    1d7c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
			_delay_ms(5); /*small delay to fix CPU load issue in proteus */
		}
	}
}
    1d80:	60 96       	adiw	r28, 0x10	; 16
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret
		{
			/* Each row is set to be output */
			GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
			/* iterating over the columns */
			for(col=0; col<KEYPAD_NUMBER_OF_COLS; col++)
    1d92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d94:	8f 5f       	subi	r24, 0xFF	; 255
    1d96:	8f 87       	std	Y+15, r24	; 0x0f
    1d98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9a:	84 30       	cpi	r24, 0x04	; 4
    1d9c:	d8 f2       	brcs	.-74     	; 0x1d54 <KEYPAD_getPressedKey+0x8c>
#else
					return (row*KEYPAD_NUMBER_OF_COLS)+col+1;
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
    1d9e:	88 89       	ldd	r24, Y+16	; 0x10
    1da0:	98 2f       	mov	r25, r24
    1da2:	9f 5f       	subi	r25, 0xFF	; 255
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	69 2f       	mov	r22, r25
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 ea       	ldi	r26, 0xA0	; 160
    1db4:	b0 e4       	ldi	r27, 0x40	; 64
    1db6:	8b 87       	std	Y+11, r24	; 0x0b
    1db8:	9c 87       	std	Y+12, r25	; 0x0c
    1dba:	ad 87       	std	Y+13, r26	; 0x0d
    1dbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4a ef       	ldi	r20, 0xFA	; 250
    1dcc:	54 e4       	ldi	r21, 0x44	; 68
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8f 83       	std	Y+7, r24	; 0x07
    1dd8:	98 87       	std	Y+8, r25	; 0x08
    1dda:	a9 87       	std	Y+9, r26	; 0x09
    1ddc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	3f c0       	rjmp	.+126    	; 0x1e7e <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1e00:	6f 81       	ldd	r22, Y+7	; 0x07
    1e02:	78 85       	ldd	r23, Y+8	; 0x08
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	57 e4       	ldi	r21, 0x47	; 71
    1e10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	4c f5       	brge	.+82     	; 0x1e6a <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e2       	ldi	r20, 0x20	; 32
    1e26:	51 e4       	ldi	r21, 0x41	; 65
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <KEYPAD_getPressedKey+0x198>
    1e42:	88 ec       	ldi	r24, 0xC8	; 200
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <KEYPAD_getPressedKey+0x186>
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	69 f7       	brne	.-38     	; 0x1e42 <KEYPAD_getPressedKey+0x17a>
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <KEYPAD_getPressedKey+0x1c2>
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif

	while(1){
		uint8 row,col;
		for(row=0; row<KEYPAD_NUMBER_OF_ROWS; row++)
    1e92:	88 89       	ldd	r24, Y+16	; 0x10
    1e94:	8f 5f       	subi	r24, 0xFF	; 255
    1e96:	88 8b       	std	Y+16, r24	; 0x10
    1e98:	88 89       	ldd	r24, Y+16	; 0x10
    1e9a:	84 30       	cpi	r24, 0x04	; 4
    1e9c:	08 f4       	brcc	.+2      	; 0x1ea0 <KEYPAD_getPressedKey+0x1d8>
    1e9e:	48 cf       	rjmp	.-368    	; 0x1d30 <KEYPAD_getPressedKey+0x68>
    1ea0:	45 cf       	rjmp	.-374    	; 0x1d2c <KEYPAD_getPressedKey+0x64>

00001ea2 <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_NUMBER_OF_COLS == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <KEYPAD_4x4_adjustKeyNumber+0x8>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_correct_button;
	switch(button_number)
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	3c 83       	std	Y+4, r19	; 0x04
    1eb8:	2b 83       	std	Y+3, r18	; 0x03
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	88 30       	cpi	r24, 0x08	; 8
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x24>
    1ec4:	70 c0       	rjmp	.+224    	; 0x1fa6 <KEYPAD_4x4_adjustKeyNumber+0x104>
    1ec6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eca:	29 30       	cpi	r18, 0x09	; 9
    1ecc:	31 05       	cpc	r19, r1
    1ece:	5c f5       	brge	.+86     	; 0x1f26 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	84 30       	cpi	r24, 0x04	; 4
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <KEYPAD_4x4_adjustKeyNumber+0x3a>
    1eda:	59 c0       	rjmp	.+178    	; 0x1f8e <KEYPAD_4x4_adjustKeyNumber+0xec>
    1edc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ede:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee0:	25 30       	cpi	r18, 0x05	; 5
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	9c f4       	brge	.+38     	; 0x1f0c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	91 05       	cpc	r25, r1
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <KEYPAD_4x4_adjustKeyNumber+0x50>
    1ef0:	48 c0       	rjmp	.+144    	; 0x1f82 <KEYPAD_4x4_adjustKeyNumber+0xe0>
    1ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef6:	23 30       	cpi	r18, 0x03	; 3
    1ef8:	31 05       	cpc	r19, r1
    1efa:	0c f0       	brlt	.+2      	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x5c>
    1efc:	45 c0       	rjmp	.+138    	; 0x1f88 <KEYPAD_4x4_adjustKeyNumber+0xe6>
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	91 05       	cpc	r25, r1
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <KEYPAD_4x4_adjustKeyNumber+0x68>
    1f08:	39 c0       	rjmp	.+114    	; 0x1f7c <KEYPAD_4x4_adjustKeyNumber+0xda>
    1f0a:	67 c0       	rjmp	.+206    	; 0x1fda <KEYPAD_4x4_adjustKeyNumber+0x138>
    1f0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f10:	26 30       	cpi	r18, 0x06	; 6
    1f12:	31 05       	cpc	r19, r1
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <KEYPAD_4x4_adjustKeyNumber+0x76>
    1f16:	41 c0       	rjmp	.+130    	; 0x1f9a <KEYPAD_4x4_adjustKeyNumber+0xf8>
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	87 30       	cpi	r24, 0x07	; 7
    1f1e:	91 05       	cpc	r25, r1
    1f20:	0c f0       	brlt	.+2      	; 0x1f24 <KEYPAD_4x4_adjustKeyNumber+0x82>
    1f22:	3e c0       	rjmp	.+124    	; 0x1fa0 <KEYPAD_4x4_adjustKeyNumber+0xfe>
    1f24:	37 c0       	rjmp	.+110    	; 0x1f94 <KEYPAD_4x4_adjustKeyNumber+0xf2>
    1f26:	2b 81       	ldd	r18, Y+3	; 0x03
    1f28:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2a:	2c 30       	cpi	r18, 0x0C	; 12
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <KEYPAD_4x4_adjustKeyNumber+0x90>
    1f30:	46 c0       	rjmp	.+140    	; 0x1fbe <KEYPAD_4x4_adjustKeyNumber+0x11c>
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	8d 30       	cpi	r24, 0x0D	; 13
    1f38:	91 05       	cpc	r25, r1
    1f3a:	5c f4       	brge	.+22     	; 0x1f52 <KEYPAD_4x4_adjustKeyNumber+0xb0>
    1f3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f40:	2a 30       	cpi	r18, 0x0A	; 10
    1f42:	31 05       	cpc	r19, r1
    1f44:	b1 f1       	breq	.+108    	; 0x1fb2 <KEYPAD_4x4_adjustKeyNumber+0x110>
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	8b 30       	cpi	r24, 0x0B	; 11
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	a4 f5       	brge	.+104    	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0x116>
    1f50:	2d c0       	rjmp	.+90     	; 0x1fac <KEYPAD_4x4_adjustKeyNumber+0x10a>
    1f52:	2b 81       	ldd	r18, Y+3	; 0x03
    1f54:	3c 81       	ldd	r19, Y+4	; 0x04
    1f56:	2e 30       	cpi	r18, 0x0E	; 14
    1f58:	31 05       	cpc	r19, r1
    1f5a:	b9 f1       	breq	.+110    	; 0x1fca <KEYPAD_4x4_adjustKeyNumber+0x128>
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f60:	8e 30       	cpi	r24, 0x0E	; 14
    1f62:	91 05       	cpc	r25, r1
    1f64:	7c f1       	brlt	.+94     	; 0x1fc4 <KEYPAD_4x4_adjustKeyNumber+0x122>
    1f66:	2b 81       	ldd	r18, Y+3	; 0x03
    1f68:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6a:	2f 30       	cpi	r18, 0x0F	; 15
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	79 f1       	breq	.+94     	; 0x1fce <KEYPAD_4x4_adjustKeyNumber+0x12c>
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	80 31       	cpi	r24, 0x10	; 16
    1f76:	91 05       	cpc	r25, r1
    1f78:	69 f1       	breq	.+90     	; 0x1fd4 <KEYPAD_4x4_adjustKeyNumber+0x132>
    1f7a:	2f c0       	rjmp	.+94     	; 0x1fda <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
		case 1: keypad_correct_button = 7;
    1f7c:	87 e0       	ldi	r24, 0x07	; 7
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	2e c0       	rjmp	.+92     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: keypad_correct_button = 8;
    1f82:	88 e0       	ldi	r24, 0x08	; 8
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	2b c0       	rjmp	.+86     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: keypad_correct_button = 9;
    1f88:	89 e0       	ldi	r24, 0x09	; 9
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	28 c0       	rjmp	.+80     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: keypad_correct_button = '/'; // ASCII Code of /
    1f8e:	8f e2       	ldi	r24, 0x2F	; 47
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	25 c0       	rjmp	.+74     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: keypad_correct_button = 4;
    1f94:	84 e0       	ldi	r24, 0x04	; 4
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	22 c0       	rjmp	.+68     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: keypad_correct_button = 5;
    1f9a:	85 e0       	ldi	r24, 0x05	; 5
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	1f c0       	rjmp	.+62     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: keypad_correct_button = 6;
    1fa0:	86 e0       	ldi	r24, 0x06	; 6
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	1c c0       	rjmp	.+56     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: keypad_correct_button = '*'; /* ASCII Code of '*' */
    1fa6:	8a e2       	ldi	r24, 0x2A	; 42
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	19 c0       	rjmp	.+50     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: keypad_correct_button = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	16 c0       	rjmp	.+44     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: keypad_correct_button = 2;
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	13 c0       	rjmp	.+38     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: keypad_correct_button = 3;
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	10 c0       	rjmp	.+32     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: keypad_correct_button = '-'; /* ASCII Code of '-' */
    1fbe:	8d e2       	ldi	r24, 0x2D	; 45
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	0d c0       	rjmp	.+26     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: keypad_correct_button = 13;  /* ASCII of Enter */
    1fc4:	8d e0       	ldi	r24, 0x0D	; 13
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	0a c0       	rjmp	.+20     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: keypad_correct_button = 0;
    1fca:	19 82       	std	Y+1, r1	; 0x01
    1fcc:	08 c0       	rjmp	.+16     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: keypad_correct_button = '='; /* ASCII Code of '=' */
    1fce:	8d e3       	ldi	r24, 0x3D	; 61
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: keypad_correct_button = '+'; /* ASCII Code of '+' */
    1fd4:	8b e2       	ldi	r24, 0x2B	; 43
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		default: keypad_correct_button = button_number;
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_correct_button;
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <LCD_sendCommand>:
#include "lcd.h"
#include "common_macros.h"
#include "gpio.h"
#include <util/delay.h>

void LCD_sendCommand(uint8 command){
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	e9 97       	sbiw	r28, 0x39	; 57
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	89 af       	std	Y+57, r24	; 0x39
   GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Tas=50nSec*/
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	62 e0       	ldi	r22, 0x02	; 2
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_writePin>
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a0 e8       	ldi	r26, 0x80	; 128
    2014:	bf e3       	ldi	r27, 0x3F	; 63
    2016:	8d ab       	std	Y+53, r24	; 0x35
    2018:	9e ab       	std	Y+54, r25	; 0x36
    201a:	af ab       	std	Y+55, r26	; 0x37
    201c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201e:	6d a9       	ldd	r22, Y+53	; 0x35
    2020:	7e a9       	ldd	r23, Y+54	; 0x36
    2022:	8f a9       	ldd	r24, Y+55	; 0x37
    2024:	98 ad       	ldd	r25, Y+56	; 0x38
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4a ef       	ldi	r20, 0xFA	; 250
    202c:	54 e4       	ldi	r21, 0x44	; 68
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	89 ab       	std	Y+49, r24	; 0x31
    2038:	9a ab       	std	Y+50, r25	; 0x32
    203a:	ab ab       	std	Y+51, r26	; 0x33
    203c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    203e:	69 a9       	ldd	r22, Y+49	; 0x31
    2040:	7a a9       	ldd	r23, Y+50	; 0x32
    2042:	8b a9       	ldd	r24, Y+51	; 0x33
    2044:	9c a9       	ldd	r25, Y+52	; 0x34
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e8       	ldi	r20, 0x80	; 128
    204c:	5f e3       	ldi	r21, 0x3F	; 63
    204e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2052:	88 23       	and	r24, r24
    2054:	2c f4       	brge	.+10     	; 0x2060 <LCD_sendCommand+0x72>
		__ticks = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	98 ab       	std	Y+48, r25	; 0x30
    205c:	8f a7       	std	Y+47, r24	; 0x2f
    205e:	3f c0       	rjmp	.+126    	; 0x20de <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2060:	69 a9       	ldd	r22, Y+49	; 0x31
    2062:	7a a9       	ldd	r23, Y+50	; 0x32
    2064:	8b a9       	ldd	r24, Y+51	; 0x33
    2066:	9c a9       	ldd	r25, Y+52	; 0x34
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	4c f5       	brge	.+82     	; 0x20ca <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	6d a9       	ldd	r22, Y+53	; 0x35
    207a:	7e a9       	ldd	r23, Y+54	; 0x36
    207c:	8f a9       	ldd	r24, Y+55	; 0x37
    207e:	98 ad       	ldd	r25, Y+56	; 0x38
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e2       	ldi	r20, 0x20	; 32
    2086:	51 e4       	ldi	r21, 0x41	; 65
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	98 ab       	std	Y+48, r25	; 0x30
    209e:	8f a7       	std	Y+47, r24	; 0x2f
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <LCD_sendCommand+0xd2>
    20a2:	88 ec       	ldi	r24, 0xC8	; 200
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9e a7       	std	Y+46, r25	; 0x2e
    20a8:	8d a7       	std	Y+45, r24	; 0x2d
    20aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    20ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_sendCommand+0xc0>
    20b2:	9e a7       	std	Y+46, r25	; 0x2e
    20b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b8:	98 a9       	ldd	r25, Y+48	; 0x30
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	98 ab       	std	Y+48, r25	; 0x30
    20be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c2:	98 a9       	ldd	r25, Y+48	; 0x30
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	69 f7       	brne	.-38     	; 0x20a2 <LCD_sendCommand+0xb4>
    20c8:	14 c0       	rjmp	.+40     	; 0x20f2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	69 a9       	ldd	r22, Y+49	; 0x31
    20cc:	7a a9       	ldd	r23, Y+50	; 0x32
    20ce:	8b a9       	ldd	r24, Y+51	; 0x33
    20d0:	9c a9       	ldd	r25, Y+52	; 0x34
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	98 ab       	std	Y+48, r25	; 0x30
    20dc:	8f a7       	std	Y+47, r24	; 0x2f
    20de:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e0:	98 a9       	ldd	r25, Y+48	; 0x30
    20e2:	9c a7       	std	Y+44, r25	; 0x2c
    20e4:	8b a7       	std	Y+43, r24	; 0x2b
    20e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_sendCommand+0xfc>
    20ee:	9c a7       	std	Y+44, r25	; 0x2c
    20f0:	8b a7       	std	Y+43, r24	; 0x2b
   _delay_ms(1); /*delay 1ms 34an l board, 1uSec for proteus*/
   GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    20f2:	83 e0       	ldi	r24, 0x03	; 3
    20f4:	63 e0       	ldi	r22, 0x03	; 3
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_writePin>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e8       	ldi	r26, 0x80	; 128
    2102:	bf e3       	ldi	r27, 0x3F	; 63
    2104:	8f a3       	std	Y+39, r24	; 0x27
    2106:	98 a7       	std	Y+40, r25	; 0x28
    2108:	a9 a7       	std	Y+41, r26	; 0x29
    210a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210c:	6f a1       	ldd	r22, Y+39	; 0x27
    210e:	78 a5       	ldd	r23, Y+40	; 0x28
    2110:	89 a5       	ldd	r24, Y+41	; 0x29
    2112:	9a a5       	ldd	r25, Y+42	; 0x2a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a ef       	ldi	r20, 0xFA	; 250
    211a:	54 e4       	ldi	r21, 0x44	; 68
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	8b a3       	std	Y+35, r24	; 0x23
    2126:	9c a3       	std	Y+36, r25	; 0x24
    2128:	ad a3       	std	Y+37, r26	; 0x25
    212a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    212c:	6b a1       	ldd	r22, Y+35	; 0x23
    212e:	7c a1       	ldd	r23, Y+36	; 0x24
    2130:	8d a1       	ldd	r24, Y+37	; 0x25
    2132:	9e a1       	ldd	r25, Y+38	; 0x26
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	2c f4       	brge	.+10     	; 0x214e <LCD_sendCommand+0x160>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9a a3       	std	Y+34, r25	; 0x22
    214a:	89 a3       	std	Y+33, r24	; 0x21
    214c:	3f c0       	rjmp	.+126    	; 0x21cc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    214e:	6b a1       	ldd	r22, Y+35	; 0x23
    2150:	7c a1       	ldd	r23, Y+36	; 0x24
    2152:	8d a1       	ldd	r24, Y+37	; 0x25
    2154:	9e a1       	ldd	r25, Y+38	; 0x26
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	57 e4       	ldi	r21, 0x47	; 71
    215e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2162:	18 16       	cp	r1, r24
    2164:	4c f5       	brge	.+82     	; 0x21b8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	6f a1       	ldd	r22, Y+39	; 0x27
    2168:	78 a5       	ldd	r23, Y+40	; 0x28
    216a:	89 a5       	ldd	r24, Y+41	; 0x29
    216c:	9a a5       	ldd	r25, Y+42	; 0x2a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e2       	ldi	r20, 0x20	; 32
    2174:	51 e4       	ldi	r21, 0x41	; 65
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9a a3       	std	Y+34, r25	; 0x22
    218c:	89 a3       	std	Y+33, r24	; 0x21
    218e:	0f c0       	rjmp	.+30     	; 0x21ae <LCD_sendCommand+0x1c0>
    2190:	88 ec       	ldi	r24, 0xC8	; 200
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	98 a3       	std	Y+32, r25	; 0x20
    2196:	8f 8f       	std	Y+31, r24	; 0x1f
    2198:	8f 8d       	ldd	r24, Y+31	; 0x1f
    219a:	98 a1       	ldd	r25, Y+32	; 0x20
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_sendCommand+0x1ae>
    21a0:	98 a3       	std	Y+32, r25	; 0x20
    21a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	89 a1       	ldd	r24, Y+33	; 0x21
    21a6:	9a a1       	ldd	r25, Y+34	; 0x22
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	9a a3       	std	Y+34, r25	; 0x22
    21ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ae:	89 a1       	ldd	r24, Y+33	; 0x21
    21b0:	9a a1       	ldd	r25, Y+34	; 0x22
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	69 f7       	brne	.-38     	; 0x2190 <LCD_sendCommand+0x1a2>
    21b6:	14 c0       	rjmp	.+40     	; 0x21e0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ba:	7c a1       	ldd	r23, Y+36	; 0x24
    21bc:	8d a1       	ldd	r24, Y+37	; 0x25
    21be:	9e a1       	ldd	r25, Y+38	; 0x26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9a a3       	std	Y+34, r25	; 0x22
    21ca:	89 a3       	std	Y+33, r24	; 0x21
    21cc:	89 a1       	ldd	r24, Y+33	; 0x21
    21ce:	9a a1       	ldd	r25, Y+34	; 0x22
    21d0:	9e 8f       	std	Y+30, r25	; 0x1e
    21d2:	8d 8f       	std	Y+29, r24	; 0x1d
    21d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_sendCommand+0x1ea>
    21dc:	9e 8f       	std	Y+30, r25	; 0x1e
    21de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	69 ad       	ldd	r22, Y+57	; 0x39
    21e4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <GPIO_writePort>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e8       	ldi	r26, 0x80	; 128
    21ee:	bf e3       	ldi	r27, 0x3F	; 63
    21f0:	89 8f       	std	Y+25, r24	; 0x19
    21f2:	9a 8f       	std	Y+26, r25	; 0x1a
    21f4:	ab 8f       	std	Y+27, r26	; 0x1b
    21f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	69 8d       	ldd	r22, Y+25	; 0x19
    21fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8d 8b       	std	Y+21, r24	; 0x15
    2212:	9e 8b       	std	Y+22, r25	; 0x16
    2214:	af 8b       	std	Y+23, r26	; 0x17
    2216:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2218:	6d 89       	ldd	r22, Y+21	; 0x15
    221a:	7e 89       	ldd	r23, Y+22	; 0x16
    221c:	8f 89       	ldd	r24, Y+23	; 0x17
    221e:	98 8d       	ldd	r25, Y+24	; 0x18
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    223a:	6d 89       	ldd	r22, Y+21	; 0x15
    223c:	7e 89       	ldd	r23, Y+22	; 0x16
    223e:	8f 89       	ldd	r24, Y+23	; 0x17
    2240:	98 8d       	ldd	r25, Y+24	; 0x18
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	69 8d       	ldd	r22, Y+25	; 0x19
    2254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9c 8b       	std	Y+20, r25	; 0x14
    2278:	8b 8b       	std	Y+19, r24	; 0x13
    227a:	0f c0       	rjmp	.+30     	; 0x229a <LCD_sendCommand+0x2ac>
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9a 8b       	std	Y+18, r25	; 0x12
    2282:	89 8b       	std	Y+17, r24	; 0x11
    2284:	89 89       	ldd	r24, Y+17	; 0x11
    2286:	9a 89       	ldd	r25, Y+18	; 0x12
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_sendCommand+0x29a>
    228c:	9a 8b       	std	Y+18, r25	; 0x12
    228e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8b 89       	ldd	r24, Y+19	; 0x13
    2292:	9c 89       	ldd	r25, Y+20	; 0x14
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9c 8b       	std	Y+20, r25	; 0x14
    2298:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8b 89       	ldd	r24, Y+19	; 0x13
    229c:	9c 89       	ldd	r25, Y+20	; 0x14
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <LCD_sendCommand+0x28e>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9c 8b       	std	Y+20, r25	; 0x14
    22b6:	8b 8b       	std	Y+19, r24	; 0x13
    22b8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ba:	9c 89       	ldd	r25, Y+20	; 0x14
    22bc:	98 8b       	std	Y+16, r25	; 0x10
    22be:	8f 87       	std	Y+15, r24	; 0x0f
    22c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c2:	98 89       	ldd	r25, Y+16	; 0x10
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <LCD_sendCommand+0x2d6>
    22c8:	98 8b       	std	Y+16, r25	; 0x10
    22ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22cc:	83 e0       	ldi	r24, 0x03	; 3
    22ce:	63 e0       	ldi	r22, 0x03	; 3
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_writePin>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 e8       	ldi	r26, 0x80	; 128
    22dc:	bf e3       	ldi	r27, 0x3F	; 63
    22de:	8b 87       	std	Y+11, r24	; 0x0b
    22e0:	9c 87       	std	Y+12, r25	; 0x0c
    22e2:	ad 87       	std	Y+13, r26	; 0x0d
    22e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a ef       	ldi	r20, 0xFA	; 250
    22f4:	54 e4       	ldi	r21, 0x44	; 68
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8f 83       	std	Y+7, r24	; 0x07
    2300:	98 87       	std	Y+8, r25	; 0x08
    2302:	a9 87       	std	Y+9, r26	; 0x09
    2304:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e8       	ldi	r20, 0x80	; 128
    2314:	5f e3       	ldi	r21, 0x3F	; 63
    2316:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    231a:	88 23       	and	r24, r24
    231c:	2c f4       	brge	.+10     	; 0x2328 <LCD_sendCommand+0x33a>
		__ticks = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	3f c0       	rjmp	.+126    	; 0x23a6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2328:	6f 81       	ldd	r22, Y+7	; 0x07
    232a:	78 85       	ldd	r23, Y+8	; 0x08
    232c:	89 85       	ldd	r24, Y+9	; 0x09
    232e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	4c f5       	brge	.+82     	; 0x2392 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2340:	6b 85       	ldd	r22, Y+11	; 0x0b
    2342:	7c 85       	ldd	r23, Y+12	; 0x0c
    2344:	8d 85       	ldd	r24, Y+13	; 0x0d
    2346:	9e 85       	ldd	r25, Y+14	; 0x0e
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <LCD_sendCommand+0x39a>
    236a:	88 ec       	ldi	r24, 0xC8	; 200
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	8b 83       	std	Y+3, r24	; 0x03
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_sendCommand+0x388>
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	9e 81       	ldd	r25, Y+6	; 0x06
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	69 f7       	brne	.-38     	; 0x236a <LCD_sendCommand+0x37c>
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_sendCommand+0x3c4>
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23ba:	e9 96       	adiw	r28, 0x39	; 57
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data){
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	e9 97       	sbiw	r28, 0x39	; 57
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Rs*/
    23e2:	83 e0       	ldi	r24, 0x03	; 3
    23e4:	62 e0       	ldi	r22, 0x02	; 2
    23e6:	41 e0       	ldi	r20, 0x01	; 1
    23e8:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_writePin>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e8       	ldi	r26, 0x80	; 128
    23f2:	bf e3       	ldi	r27, 0x3F	; 63
    23f4:	8d ab       	std	Y+53, r24	; 0x35
    23f6:	9e ab       	std	Y+54, r25	; 0x36
    23f8:	af ab       	std	Y+55, r26	; 0x37
    23fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fc:	6d a9       	ldd	r22, Y+53	; 0x35
    23fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2400:	8f a9       	ldd	r24, Y+55	; 0x37
    2402:	98 ad       	ldd	r25, Y+56	; 0x38
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	4a ef       	ldi	r20, 0xFA	; 250
    240a:	54 e4       	ldi	r21, 0x44	; 68
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	89 ab       	std	Y+49, r24	; 0x31
    2416:	9a ab       	std	Y+50, r25	; 0x32
    2418:	ab ab       	std	Y+51, r26	; 0x33
    241a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    241c:	69 a9       	ldd	r22, Y+49	; 0x31
    241e:	7a a9       	ldd	r23, Y+50	; 0x32
    2420:	8b a9       	ldd	r24, Y+51	; 0x33
    2422:	9c a9       	ldd	r25, Y+52	; 0x34
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e8       	ldi	r20, 0x80	; 128
    242a:	5f e3       	ldi	r21, 0x3F	; 63
    242c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2430:	88 23       	and	r24, r24
    2432:	2c f4       	brge	.+10     	; 0x243e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	98 ab       	std	Y+48, r25	; 0x30
    243a:	8f a7       	std	Y+47, r24	; 0x2f
    243c:	3f c0       	rjmp	.+126    	; 0x24bc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    243e:	69 a9       	ldd	r22, Y+49	; 0x31
    2440:	7a a9       	ldd	r23, Y+50	; 0x32
    2442:	8b a9       	ldd	r24, Y+51	; 0x33
    2444:	9c a9       	ldd	r25, Y+52	; 0x34
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	3f ef       	ldi	r19, 0xFF	; 255
    244a:	4f e7       	ldi	r20, 0x7F	; 127
    244c:	57 e4       	ldi	r21, 0x47	; 71
    244e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2452:	18 16       	cp	r1, r24
    2454:	4c f5       	brge	.+82     	; 0x24a8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2456:	6d a9       	ldd	r22, Y+53	; 0x35
    2458:	7e a9       	ldd	r23, Y+54	; 0x36
    245a:	8f a9       	ldd	r24, Y+55	; 0x37
    245c:	98 ad       	ldd	r25, Y+56	; 0x38
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e2       	ldi	r20, 0x20	; 32
    2464:	51 e4       	ldi	r21, 0x41	; 65
    2466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	98 ab       	std	Y+48, r25	; 0x30
    247c:	8f a7       	std	Y+47, r24	; 0x2f
    247e:	0f c0       	rjmp	.+30     	; 0x249e <LCD_displayCharacter+0xd2>
    2480:	88 ec       	ldi	r24, 0xC8	; 200
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9e a7       	std	Y+46, r25	; 0x2e
    2486:	8d a7       	std	Y+45, r24	; 0x2d
    2488:	8d a5       	ldd	r24, Y+45	; 0x2d
    248a:	9e a5       	ldd	r25, Y+46	; 0x2e
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_displayCharacter+0xc0>
    2490:	9e a7       	std	Y+46, r25	; 0x2e
    2492:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2494:	8f a5       	ldd	r24, Y+47	; 0x2f
    2496:	98 a9       	ldd	r25, Y+48	; 0x30
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	98 ab       	std	Y+48, r25	; 0x30
    249c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249e:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a0:	98 a9       	ldd	r25, Y+48	; 0x30
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	69 f7       	brne	.-38     	; 0x2480 <LCD_displayCharacter+0xb4>
    24a6:	14 c0       	rjmp	.+40     	; 0x24d0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a8:	69 a9       	ldd	r22, Y+49	; 0x31
    24aa:	7a a9       	ldd	r23, Y+50	; 0x32
    24ac:	8b a9       	ldd	r24, Y+51	; 0x33
    24ae:	9c a9       	ldd	r25, Y+52	; 0x34
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	98 ab       	std	Y+48, r25	; 0x30
    24ba:	8f a7       	std	Y+47, r24	; 0x2f
    24bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24be:	98 a9       	ldd	r25, Y+48	; 0x30
    24c0:	9c a7       	std	Y+44, r25	; 0x2c
    24c2:	8b a7       	std	Y+43, r24	; 0x2b
    24c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <LCD_displayCharacter+0xfc>
    24cc:	9c a7       	std	Y+44, r25	; 0x2c
    24ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /*E*/
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	63 e0       	ldi	r22, 0x03	; 3
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_writePin>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 e8       	ldi	r26, 0x80	; 128
    24e0:	bf e3       	ldi	r27, 0x3F	; 63
    24e2:	8f a3       	std	Y+39, r24	; 0x27
    24e4:	98 a7       	std	Y+40, r25	; 0x28
    24e6:	a9 a7       	std	Y+41, r26	; 0x29
    24e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	6f a1       	ldd	r22, Y+39	; 0x27
    24ec:	78 a5       	ldd	r23, Y+40	; 0x28
    24ee:	89 a5       	ldd	r24, Y+41	; 0x29
    24f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8b a3       	std	Y+35, r24	; 0x23
    2504:	9c a3       	std	Y+36, r25	; 0x24
    2506:	ad a3       	std	Y+37, r26	; 0x25
    2508:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    250a:	6b a1       	ldd	r22, Y+35	; 0x23
    250c:	7c a1       	ldd	r23, Y+36	; 0x24
    250e:	8d a1       	ldd	r24, Y+37	; 0x25
    2510:	9e a1       	ldd	r25, Y+38	; 0x26
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9a a3       	std	Y+34, r25	; 0x22
    2528:	89 a3       	std	Y+33, r24	; 0x21
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    252c:	6b a1       	ldd	r22, Y+35	; 0x23
    252e:	7c a1       	ldd	r23, Y+36	; 0x24
    2530:	8d a1       	ldd	r24, Y+37	; 0x25
    2532:	9e a1       	ldd	r25, Y+38	; 0x26
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	6f a1       	ldd	r22, Y+39	; 0x27
    2546:	78 a5       	ldd	r23, Y+40	; 0x28
    2548:	89 a5       	ldd	r24, Y+41	; 0x29
    254a:	9a a5       	ldd	r25, Y+42	; 0x2a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9a a3       	std	Y+34, r25	; 0x22
    256a:	89 a3       	std	Y+33, r24	; 0x21
    256c:	0f c0       	rjmp	.+30     	; 0x258c <LCD_displayCharacter+0x1c0>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	98 a3       	std	Y+32, r25	; 0x20
    2574:	8f 8f       	std	Y+31, r24	; 0x1f
    2576:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2578:	98 a1       	ldd	r25, Y+32	; 0x20
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_displayCharacter+0x1ae>
    257e:	98 a3       	std	Y+32, r25	; 0x20
    2580:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	89 a1       	ldd	r24, Y+33	; 0x21
    2584:	9a a1       	ldd	r25, Y+34	; 0x22
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9a a3       	std	Y+34, r25	; 0x22
    258a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	89 a1       	ldd	r24, Y+33	; 0x21
    258e:	9a a1       	ldd	r25, Y+34	; 0x22
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <LCD_displayCharacter+0x1a2>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6b a1       	ldd	r22, Y+35	; 0x23
    2598:	7c a1       	ldd	r23, Y+36	; 0x24
    259a:	8d a1       	ldd	r24, Y+37	; 0x25
    259c:	9e a1       	ldd	r25, Y+38	; 0x26
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9a a3       	std	Y+34, r25	; 0x22
    25a8:	89 a3       	std	Y+33, r24	; 0x21
    25aa:	89 a1       	ldd	r24, Y+33	; 0x21
    25ac:	9a a1       	ldd	r25, Y+34	; 0x22
    25ae:	9e 8f       	std	Y+30, r25	; 0x1e
    25b0:	8d 8f       	std	Y+29, r24	; 0x1d
    25b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_displayCharacter+0x1ea>
    25ba:	9e 8f       	std	Y+30, r25	; 0x1e
    25bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	69 ad       	ldd	r22, Y+57	; 0x39
    25c2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <GPIO_writePort>
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	a0 e8       	ldi	r26, 0x80	; 128
    25cc:	bf e3       	ldi	r27, 0x3F	; 63
    25ce:	89 8f       	std	Y+25, r24	; 0x19
    25d0:	9a 8f       	std	Y+26, r25	; 0x1a
    25d2:	ab 8f       	std	Y+27, r26	; 0x1b
    25d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d6:	69 8d       	ldd	r22, Y+25	; 0x19
    25d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4a ef       	ldi	r20, 0xFA	; 250
    25e4:	54 e4       	ldi	r21, 0x44	; 68
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	8d 8b       	std	Y+21, r24	; 0x15
    25f0:	9e 8b       	std	Y+22, r25	; 0x16
    25f2:	af 8b       	std	Y+23, r26	; 0x17
    25f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25f6:	6d 89       	ldd	r22, Y+21	; 0x15
    25f8:	7e 89       	ldd	r23, Y+22	; 0x16
    25fa:	8f 89       	ldd	r24, Y+23	; 0x17
    25fc:	98 8d       	ldd	r25, Y+24	; 0x18
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e8       	ldi	r20, 0x80	; 128
    2604:	5f e3       	ldi	r21, 0x3F	; 63
    2606:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    260a:	88 23       	and	r24, r24
    260c:	2c f4       	brge	.+10     	; 0x2618 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
    2616:	3f c0       	rjmp	.+126    	; 0x2696 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2618:	6d 89       	ldd	r22, Y+21	; 0x15
    261a:	7e 89       	ldd	r23, Y+22	; 0x16
    261c:	8f 89       	ldd	r24, Y+23	; 0x17
    261e:	98 8d       	ldd	r25, Y+24	; 0x18
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	3f ef       	ldi	r19, 0xFF	; 255
    2624:	4f e7       	ldi	r20, 0x7F	; 127
    2626:	57 e4       	ldi	r21, 0x47	; 71
    2628:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262c:	18 16       	cp	r1, r24
    262e:	4c f5       	brge	.+82     	; 0x2682 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2630:	69 8d       	ldd	r22, Y+25	; 0x19
    2632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e2       	ldi	r20, 0x20	; 32
    263e:	51 e4       	ldi	r21, 0x41	; 65
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9c 8b       	std	Y+20, r25	; 0x14
    2656:	8b 8b       	std	Y+19, r24	; 0x13
    2658:	0f c0       	rjmp	.+30     	; 0x2678 <LCD_displayCharacter+0x2ac>
    265a:	88 ec       	ldi	r24, 0xC8	; 200
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9a 8b       	std	Y+18, r25	; 0x12
    2660:	89 8b       	std	Y+17, r24	; 0x11
    2662:	89 89       	ldd	r24, Y+17	; 0x11
    2664:	9a 89       	ldd	r25, Y+18	; 0x12
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_displayCharacter+0x29a>
    266a:	9a 8b       	std	Y+18, r25	; 0x12
    266c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	9c 8b       	std	Y+20, r25	; 0x14
    2676:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	8b 89       	ldd	r24, Y+19	; 0x13
    267a:	9c 89       	ldd	r25, Y+20	; 0x14
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	69 f7       	brne	.-38     	; 0x265a <LCD_displayCharacter+0x28e>
    2680:	14 c0       	rjmp	.+40     	; 0x26aa <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2682:	6d 89       	ldd	r22, Y+21	; 0x15
    2684:	7e 89       	ldd	r23, Y+22	; 0x16
    2686:	8f 89       	ldd	r24, Y+23	; 0x17
    2688:	98 8d       	ldd	r25, Y+24	; 0x18
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9c 8b       	std	Y+20, r25	; 0x14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	8b 89       	ldd	r24, Y+19	; 0x13
    2698:	9c 89       	ldd	r25, Y+20	; 0x14
    269a:	98 8b       	std	Y+16, r25	; 0x10
    269c:	8f 87       	std	Y+15, r24	; 0x0f
    269e:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a0:	98 89       	ldd	r25, Y+16	; 0x10
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <LCD_displayCharacter+0x2d6>
    26a6:	98 8b       	std	Y+16, r25	; 0x10
    26a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26aa:	83 e0       	ldi	r24, 0x03	; 3
    26ac:	63 e0       	ldi	r22, 0x03	; 3
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_writePin>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a0 e8       	ldi	r26, 0x80	; 128
    26ba:	bf e3       	ldi	r27, 0x3F	; 63
    26bc:	8b 87       	std	Y+11, r24	; 0x0b
    26be:	9c 87       	std	Y+12, r25	; 0x0c
    26c0:	ad 87       	std	Y+13, r26	; 0x0d
    26c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	4a ef       	ldi	r20, 0xFA	; 250
    26d2:	54 e4       	ldi	r21, 0x44	; 68
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	8f 83       	std	Y+7, r24	; 0x07
    26de:	98 87       	std	Y+8, r25	; 0x08
    26e0:	a9 87       	std	Y+9, r26	; 0x09
    26e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	5f e3       	ldi	r21, 0x3F	; 63
    26f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f8:	88 23       	and	r24, r24
    26fa:	2c f4       	brge	.+10     	; 0x2706 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
    2704:	3f c0       	rjmp	.+126    	; 0x2784 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	3f ef       	ldi	r19, 0xFF	; 255
    2712:	4f e7       	ldi	r20, 0x7F	; 127
    2714:	57 e4       	ldi	r21, 0x47	; 71
    2716:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271a:	18 16       	cp	r1, r24
    271c:	4c f5       	brge	.+82     	; 0x2770 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2720:	7c 85       	ldd	r23, Y+12	; 0x0c
    2722:	8d 85       	ldd	r24, Y+13	; 0x0d
    2724:	9e 85       	ldd	r25, Y+14	; 0x0e
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e2       	ldi	r20, 0x20	; 32
    272c:	51 e4       	ldi	r21, 0x41	; 65
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	bc 01       	movw	r22, r24
    2738:	cd 01       	movw	r24, r26
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	0f c0       	rjmp	.+30     	; 0x2766 <LCD_displayCharacter+0x39a>
    2748:	88 ec       	ldi	r24, 0xC8	; 200
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9c 83       	std	Y+4, r25	; 0x04
    274e:	8b 83       	std	Y+3, r24	; 0x03
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	9c 81       	ldd	r25, Y+4	; 0x04
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <LCD_displayCharacter+0x388>
    2758:	9c 83       	std	Y+4, r25	; 0x04
    275a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	9e 81       	ldd	r25, Y+6	; 0x06
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	69 f7       	brne	.-38     	; 0x2748 <LCD_displayCharacter+0x37c>
    276e:	14 c0       	rjmp	.+40     	; 0x2798 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2770:	6f 81       	ldd	r22, Y+7	; 0x07
    2772:	78 85       	ldd	r23, Y+8	; 0x08
    2774:	89 85       	ldd	r24, Y+9	; 0x09
    2776:	9a 85       	ldd	r25, Y+10	; 0x0a
    2778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	9e 83       	std	Y+6, r25	; 0x06
    2782:	8d 83       	std	Y+5, r24	; 0x05
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_displayCharacter+0x3c4>
    2794:	9a 83       	std	Y+2, r25	; 0x02
    2796:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2798:	e9 96       	adiw	r28, 0x39	; 57
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <LCD_init>:

void LCD_init(void){
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	2e 97       	sbiw	r28, 0x0e	; 14
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT); /*RS*/
    27be:	83 e0       	ldi	r24, 0x03	; 3
    27c0:	62 e0       	ldi	r22, 0x02	; 2
    27c2:	41 e0       	ldi	r20, 0x01	; 1
    27c4:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT); /*E*/
    27c8:	83 e0       	ldi	r24, 0x03	; 3
    27ca:	63 e0       	ldi	r22, 0x03	; 3
    27cc:	41 e0       	ldi	r20, 0x01	; 1
    27ce:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_setupPinDirection>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	a0 ea       	ldi	r26, 0xA0	; 160
    27d8:	b1 e4       	ldi	r27, 0x41	; 65
    27da:	8b 87       	std	Y+11, r24	; 0x0b
    27dc:	9c 87       	std	Y+12, r25	; 0x0c
    27de:	ad 87       	std	Y+13, r26	; 0x0d
    27e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a ef       	ldi	r20, 0xFA	; 250
    27f0:	54 e4       	ldi	r21, 0x44	; 68
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8f 83       	std	Y+7, r24	; 0x07
    27fc:	98 87       	std	Y+8, r25	; 0x08
    27fe:	a9 87       	std	Y+9, r26	; 0x09
    2800:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2802:	6f 81       	ldd	r22, Y+7	; 0x07
    2804:	78 85       	ldd	r23, Y+8	; 0x08
    2806:	89 85       	ldd	r24, Y+9	; 0x09
    2808:	9a 85       	ldd	r25, Y+10	; 0x0a
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e8       	ldi	r20, 0x80	; 128
    2810:	5f e3       	ldi	r21, 0x3F	; 63
    2812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2816:	88 23       	and	r24, r24
    2818:	2c f4       	brge	.+10     	; 0x2824 <LCD_init+0x7a>
		__ticks = 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	3f c0       	rjmp	.+126    	; 0x28a2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	4f e7       	ldi	r20, 0x7F	; 127
    2832:	57 e4       	ldi	r21, 0x47	; 71
    2834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2838:	18 16       	cp	r1, r24
    283a:	4c f5       	brge	.+82     	; 0x288e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283c:	6b 85       	ldd	r22, Y+11	; 0x0b
    283e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2840:	8d 85       	ldd	r24, Y+13	; 0x0d
    2842:	9e 85       	ldd	r25, Y+14	; 0x0e
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <LCD_init+0xda>
    2866:	88 ec       	ldi	r24, 0xC8	; 200
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9c 83       	std	Y+4, r25	; 0x04
    286c:	8b 83       	std	Y+3, r24	; 0x03
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	9c 81       	ldd	r25, Y+4	; 0x04
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_init+0xc8>
    2876:	9c 83       	std	Y+4, r25	; 0x04
    2878:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	69 f7       	brne	.-38     	; 0x2866 <LCD_init+0xbc>
    288c:	14 c0       	rjmp	.+40     	; 0x28b6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288e:	6f 81       	ldd	r22, Y+7	; 0x07
    2890:	78 85       	ldd	r23, Y+8	; 0x08
    2892:	89 85       	ldd	r24, Y+9	; 0x09
    2894:	9a 85       	ldd	r25, Y+10	; 0x0a
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	8d 81       	ldd	r24, Y+5	; 0x05
    28a4:	9e 81       	ldd	r25, Y+6	; 0x06
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_init+0x104>
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	6f ef       	ldi	r22, 0xFF	; 255
    28ba:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    28be:	88 e3       	ldi	r24, 0x38	; 56
    28c0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF);/* cursor off*/
    28c4:	8c e0       	ldi	r24, 0x0C	; 12
    28c6:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);/*clear screen*/
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>
}
    28d0:	2e 96       	adiw	r28, 0x0e	; 14
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <LCD_displayString>:

void LCD_displayString(uint8*str){
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <LCD_displayString+0x6>
    28e8:	0f 92       	push	r0
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	9b 83       	std	Y+3, r25	; 0x03
    28f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    28f2:	19 82       	std	Y+1, r1	; 0x01
    28f4:	0e c0       	rjmp	.+28     	; 0x2912 <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	fc 01       	movw	r30, r24
    2902:	e2 0f       	add	r30, r18
    2904:	f3 1f       	adc	r31, r19
    2906:	80 81       	ld	r24, Z
    2908:	0e 94 e6 11 	call	0x23cc	; 0x23cc <LCD_displayCharacter>
		i++;
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_CLEAR_COMMAND);/*clear screen*/
}

void LCD_displayString(uint8*str){
	uint8 i=0;
	while(str[i] != '\0')
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	9b 81       	ldd	r25, Y+3	; 0x03
    291c:	fc 01       	movw	r30, r24
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	80 81       	ld	r24, Z
    2924:	88 23       	and	r24, r24
    2926:	39 f7       	brne	.-50     	; 0x28f6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col){
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <LCD_moveCursor+0x6>
    293a:	00 d0       	rcall	.+0      	; 0x293c <LCD_moveCursor+0x8>
    293c:	0f 92       	push	r0
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	8a 83       	std	Y+2, r24	; 0x02
    2944:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	switch(row){
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	3d 83       	std	Y+5, r19	; 0x05
    294e:	2c 83       	std	Y+4, r18	; 0x04
    2950:	8c 81       	ldd	r24, Y+4	; 0x04
    2952:	9d 81       	ldd	r25, Y+5	; 0x05
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	91 05       	cpc	r25, r1
    2958:	c1 f0       	breq	.+48     	; 0x298a <LCD_moveCursor+0x56>
    295a:	2c 81       	ldd	r18, Y+4	; 0x04
    295c:	3d 81       	ldd	r19, Y+5	; 0x05
    295e:	22 30       	cpi	r18, 0x02	; 2
    2960:	31 05       	cpc	r19, r1
    2962:	2c f4       	brge	.+10     	; 0x296e <LCD_moveCursor+0x3a>
    2964:	8c 81       	ldd	r24, Y+4	; 0x04
    2966:	9d 81       	ldd	r25, Y+5	; 0x05
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	61 f0       	breq	.+24     	; 0x2984 <LCD_moveCursor+0x50>
    296c:	19 c0       	rjmp	.+50     	; 0x29a0 <LCD_moveCursor+0x6c>
    296e:	2c 81       	ldd	r18, Y+4	; 0x04
    2970:	3d 81       	ldd	r19, Y+5	; 0x05
    2972:	22 30       	cpi	r18, 0x02	; 2
    2974:	31 05       	cpc	r19, r1
    2976:	69 f0       	breq	.+26     	; 0x2992 <LCD_moveCursor+0x5e>
    2978:	8c 81       	ldd	r24, Y+4	; 0x04
    297a:	9d 81       	ldd	r25, Y+5	; 0x05
    297c:	83 30       	cpi	r24, 0x03	; 3
    297e:	91 05       	cpc	r25, r1
    2980:	61 f0       	breq	.+24     	; 0x299a <LCD_moveCursor+0x66>
    2982:	0e c0       	rjmp	.+28     	; 0x29a0 <LCD_moveCursor+0x6c>

	case 0:
		lcd_memory_address=col;
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	0b c0       	rjmp	.+22     	; 0x29a0 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=0x40+col;
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	80 5c       	subi	r24, 0xC0	; 192
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	07 c0       	rjmp	.+14     	; 0x29a0 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=0x10+col;
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	80 5f       	subi	r24, 0xF0	; 240
    2996:	89 83       	std	Y+1, r24	; 0x01
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=0x50+col;
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	80 5b       	subi	r24, 0xB0	; 176
    299e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	80 68       	ori	r24, 0x80	; 128
    29a4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>
}
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	00 d0       	rcall	.+0      	; 0x29be <LCD_displayStringRowColumn+0x6>
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <LCD_displayStringRowColumn+0x8>
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	6a 83       	std	Y+2, r22	; 0x02
    29c8:	5c 83       	std	Y+4, r21	; 0x04
    29ca:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	6a 81       	ldd	r22, Y+2	; 0x02
    29d0:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	9c 81       	ldd	r25, Y+4	; 0x04
    29d8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_displayString>
}
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	62 97       	sbiw	r28, 0x12	; 18
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	9a 8b       	std	Y+18, r25	; 0x12
    2a00:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a02:	89 89       	ldd	r24, Y+17	; 0x11
    2a04:	9a 89       	ldd	r25, Y+18	; 0x12
    2a06:	9e 01       	movw	r18, r28
    2a08:	2f 5f       	subi	r18, 0xFF	; 255
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	b9 01       	movw	r22, r18
    2a0e:	4a e0       	ldi	r20, 0x0A	; 10
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <itoa>
   LCD_displayString(buff); /* Display the string */
    2a16:	ce 01       	movw	r24, r28
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <LCD_displayString>
}
    2a1e:	62 96       	adiw	r28, 0x12	; 18
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <LCD_clearScreen>:


void LCD_clearScreen(void){
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <LCD_sendCommand>
}
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <__vector_9>:
 *                        Interrupt Service Routine
 *****************************************************************************/

/* For Normal Mode */
ISR(TIMER1_OVF_vect)
{
    2a44:	1f 92       	push	r1
    2a46:	0f 92       	push	r0
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	0f 92       	push	r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	2f 93       	push	r18
    2a50:	3f 93       	push	r19
    2a52:	4f 93       	push	r20
    2a54:	5f 93       	push	r21
    2a56:	6f 93       	push	r22
    2a58:	7f 93       	push	r23
    2a5a:	8f 93       	push	r24
    2a5c:	9f 93       	push	r25
    2a5e:	af 93       	push	r26
    2a60:	bf 93       	push	r27
    2a62:	ef 93       	push	r30
    2a64:	ff 93       	push	r31
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_count++;
    2a6e:	80 91 44 01 	lds	r24, 0x0144
    2a72:	8f 5f       	subi	r24, 0xFF	; 255
    2a74:	80 93 44 01 	sts	0x0144, r24

	if(g_Timer1_Call_Back_Ptr!=NULL_PTR)
    2a78:	80 91 45 01 	lds	r24, 0x0145
    2a7c:	90 91 46 01 	lds	r25, 0x0146
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	29 f0       	breq	.+10     	; 0x2a8e <__vector_9+0x4a>
	{
		/* Calling back the passed function */
		(*g_Timer1_Call_Back_Ptr)();
    2a84:	e0 91 45 01 	lds	r30, 0x0145
    2a88:	f0 91 46 01 	lds	r31, 0x0146
    2a8c:	09 95       	icall
	}

}
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	ff 91       	pop	r31
    2a94:	ef 91       	pop	r30
    2a96:	bf 91       	pop	r27
    2a98:	af 91       	pop	r26
    2a9a:	9f 91       	pop	r25
    2a9c:	8f 91       	pop	r24
    2a9e:	7f 91       	pop	r23
    2aa0:	6f 91       	pop	r22
    2aa2:	5f 91       	pop	r21
    2aa4:	4f 91       	pop	r20
    2aa6:	3f 91       	pop	r19
    2aa8:	2f 91       	pop	r18
    2aaa:	0f 90       	pop	r0
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	0f 90       	pop	r0
    2ab0:	1f 90       	pop	r1
    2ab2:	18 95       	reti

00002ab4 <__vector_7>:

/* For compare mode */
ISR (TIMER1_COMPA_vect)
{
    2ab4:	1f 92       	push	r1
    2ab6:	0f 92       	push	r0
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	0f 92       	push	r0
    2abc:	11 24       	eor	r1, r1
    2abe:	2f 93       	push	r18
    2ac0:	3f 93       	push	r19
    2ac2:	4f 93       	push	r20
    2ac4:	5f 93       	push	r21
    2ac6:	6f 93       	push	r22
    2ac8:	7f 93       	push	r23
    2aca:	8f 93       	push	r24
    2acc:	9f 93       	push	r25
    2ace:	af 93       	push	r26
    2ad0:	bf 93       	push	r27
    2ad2:	ef 93       	push	r30
    2ad4:	ff 93       	push	r31
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
	g_Timer1_count++;
    2ade:	80 91 44 01 	lds	r24, 0x0144
    2ae2:	8f 5f       	subi	r24, 0xFF	; 255
    2ae4:	80 93 44 01 	sts	0x0144, r24

	if(g_Timer1_Call_Back_Ptr!=NULL_PTR)
    2ae8:	80 91 45 01 	lds	r24, 0x0145
    2aec:	90 91 46 01 	lds	r25, 0x0146
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	29 f0       	breq	.+10     	; 0x2afe <__vector_7+0x4a>
	{
		/* Calling back the passed function */
		(*g_Timer1_Call_Back_Ptr)();
    2af4:	e0 91 45 01 	lds	r30, 0x0145
    2af8:	f0 91 46 01 	lds	r31, 0x0146
    2afc:	09 95       	icall
	}
}
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	ff 91       	pop	r31
    2b04:	ef 91       	pop	r30
    2b06:	bf 91       	pop	r27
    2b08:	af 91       	pop	r26
    2b0a:	9f 91       	pop	r25
    2b0c:	8f 91       	pop	r24
    2b0e:	7f 91       	pop	r23
    2b10:	6f 91       	pop	r22
    2b12:	5f 91       	pop	r21
    2b14:	4f 91       	pop	r20
    2b16:	3f 91       	pop	r19
    2b18:	2f 91       	pop	r18
    2b1a:	0f 90       	pop	r0
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	0f 90       	pop	r0
    2b20:	1f 90       	pop	r1
    2b22:	18 95       	reti

00002b24 <Timer1_init>:

/******************************************************************************
 *                       Functions Definitions
 *****************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <Timer1_init+0x6>
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	9a 83       	std	Y+2, r25	; 0x02
    2b30:	89 83       	std	Y+1, r24	; 0x01

	/* Setting the initial count */
	TCNT1 = Config_Ptr->initial_value;
    2b32:	ac e4       	ldi	r26, 0x4C	; 76
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e9 81       	ldd	r30, Y+1	; 0x01
    2b38:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	11 96       	adiw	r26, 0x01	; 1
    2b40:	9c 93       	st	X, r25
    2b42:	8e 93       	st	-X, r24

	/* Setting the configured compare value */
	OCR1A = Config_Ptr->compare_value;
    2b44:	aa e4       	ldi	r26, 0x4A	; 74
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	11 96       	adiw	r26, 0x01	; 1
    2b52:	9c 93       	st	X, r25
    2b54:	8e 93       	st	-X, r24

	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2b56:	ef e4       	ldi	r30, 0x4F	; 79
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	8c e0       	ldi	r24, 0x0C	; 12
    2b5c:	80 83       	st	Z, r24

	/*Setting overflow or CTC Mode*/
	TCCR1B = (TCCR1B & 0xF7) | (Config_Ptr->mode << 3);
    2b5e:	ae e4       	ldi	r26, 0x4E	; 78
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	ee e4       	ldi	r30, 0x4E	; 78
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	28 2f       	mov	r18, r24
    2b6a:	27 7f       	andi	r18, 0xF7	; 247
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	85 81       	ldd	r24, Z+5	; 0x05
    2b72:	88 2f       	mov	r24, r24
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	82 2b       	or	r24, r18
    2b84:	8c 93       	st	X, r24

	if(Config_Ptr->mode == NORMAL_MODE)
    2b86:	e9 81       	ldd	r30, Y+1	; 0x01
    2b88:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8a:	85 81       	ldd	r24, Z+5	; 0x05
    2b8c:	88 23       	and	r24, r24
    2b8e:	41 f4       	brne	.+16     	; 0x2ba0 <Timer1_init+0x7c>
	{
		/* Enable Overflow Interrupt */
		TIMSK |= (1<<TOIE1);
    2b90:	a9 e5       	ldi	r26, 0x59	; 89
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e9 e5       	ldi	r30, 0x59	; 89
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	84 60       	ori	r24, 0x04	; 4
    2b9c:	8c 93       	st	X, r24
    2b9e:	0e c0       	rjmp	.+28     	; 0x2bbc <Timer1_init+0x98>
	}
	else
	{
		/* Enable Compare A Interrupt and setting the channels */
		TIMSK |= (1<<OCIE1A);
    2ba0:	a9 e5       	ldi	r26, 0x59	; 89
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e9 e5       	ldi	r30, 0x59	; 89
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	80 61       	ori	r24, 0x10	; 16
    2bac:	8c 93       	st	X, r24
		TCCR1A= (TCCR1A & 0x0F)|(CHANNELS_DISCONNECTED<<4);
    2bae:	af e4       	ldi	r26, 0x4F	; 79
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	ef e4       	ldi	r30, 0x4F	; 79
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	8f 70       	andi	r24, 0x0F	; 15
    2bba:	8c 93       	st	X, r24
	}

	/*Setting the Prescaler*/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07);
    2bbc:	ae e4       	ldi	r26, 0x4E	; 78
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	ee e4       	ldi	r30, 0x4E	; 78
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	98 2f       	mov	r25, r24
    2bc8:	98 7f       	andi	r25, 0xF8	; 248
    2bca:	e9 81       	ldd	r30, Y+1	; 0x01
    2bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bce:	84 81       	ldd	r24, Z+4	; 0x04
    2bd0:	87 70       	andi	r24, 0x07	; 7
    2bd2:	89 2b       	or	r24, r25
    2bd4:	8c 93       	st	X, r24
}
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <Timer1_deInit>:

void Timer1_deInit(void)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1, disconnect the clk */
	TCCR1B=0;
    2be8:	ee e4       	ldi	r30, 0x4E	; 78
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	10 82       	st	Z, r1
}
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <Timer1_setCallBack+0x6>
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	9a 83       	std	Y+2, r25	; 0x02
    2c00:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_Call_Back_Ptr = a_ptr;
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	9a 81       	ldd	r25, Y+2	; 0x02
    2c06:	90 93 46 01 	sts	0x0146, r25
    2c0a:	80 93 45 01 	sts	0x0145, r24
}
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	08 95       	ret

00002c18 <__vector_13>:
 * so, i've implemented the UART_receiveString in ISR
 * and we needen't to call it in the application code
 */

ISR(USART_RXC_vect)
{
    2c18:	1f 92       	push	r1
    2c1a:	0f 92       	push	r0
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	0f 92       	push	r0
    2c20:	11 24       	eor	r1, r1
    2c22:	2f 93       	push	r18
    2c24:	8f 93       	push	r24
    2c26:	9f 93       	push	r25
    2c28:	ef 93       	push	r30
    2c2a:	ff 93       	push	r31
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
	g_uart_buffer[g_uart_interrupt_counter] = UDR;
    2c34:	80 91 47 01 	lds	r24, 0x0147
    2c38:	88 2f       	mov	r24, r24
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	ec e2       	ldi	r30, 0x2C	; 44
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	20 81       	ld	r18, Z
    2c42:	fc 01       	movw	r30, r24
    2c44:	ee 5a       	subi	r30, 0xAE	; 174
    2c46:	fe 4f       	sbci	r31, 0xFE	; 254
    2c48:	20 83       	st	Z, r18
	if(g_uart_buffer[g_uart_interrupt_counter]=='#')
    2c4a:	80 91 47 01 	lds	r24, 0x0147
    2c4e:	88 2f       	mov	r24, r24
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	fc 01       	movw	r30, r24
    2c54:	ee 5a       	subi	r30, 0xAE	; 174
    2c56:	fe 4f       	sbci	r31, 0xFE	; 254
    2c58:	80 81       	ld	r24, Z
    2c5a:	83 32       	cpi	r24, 0x23	; 35
    2c5c:	41 f4       	brne	.+16     	; 0x2c6e <__vector_13+0x56>
	{
		g_uart_buffer[g_uart_interrupt_counter]='\0';
    2c5e:	80 91 47 01 	lds	r24, 0x0147
    2c62:	88 2f       	mov	r24, r24
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	fc 01       	movw	r30, r24
    2c68:	ee 5a       	subi	r30, 0xAE	; 174
    2c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6c:	10 82       	st	Z, r1
	}
	g_uart_interrupt_counter++;
    2c6e:	80 91 47 01 	lds	r24, 0x0147
    2c72:	8f 5f       	subi	r24, 0xFF	; 255
    2c74:	80 93 47 01 	sts	0x0147, r24
}
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	ff 91       	pop	r31
    2c7e:	ef 91       	pop	r30
    2c80:	9f 91       	pop	r25
    2c82:	8f 91       	pop	r24
    2c84:	2f 91       	pop	r18
    2c86:	0f 90       	pop	r0
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	0f 90       	pop	r0
    2c8c:	1f 90       	pop	r1
    2c8e:	18 95       	reti

00002c90 <UART_init>:
/******************************************************************************
 *                       Functions Definitions
 *****************************************************************************/

void UART_init(const UART_ConfigType*Config_Ptr)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <UART_init+0x6>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <UART_init+0x8>
    2c98:	cd b7       	in	r28, 0x3d	; 61
    2c9a:	de b7       	in	r29, 0x3e	; 62
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    2ca0:	1a 82       	std	Y+2, r1	; 0x02
    2ca2:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2ca4:	eb e2       	ldi	r30, 0x2B	; 43
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	82 e0       	ldi	r24, 0x02	; 2
    2caa:	80 83       	st	Z, r24

	/* RX Complete Interrupt Enable
	 * Receiver Enable
	 * Transmitter Enable
	 * */
	UCSRB|=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
    2cac:	aa e2       	ldi	r26, 0x2A	; 42
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	ea e2       	ldi	r30, 0x2A	; 42
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	88 69       	ori	r24, 0x98	; 152
    2cb8:	8c 93       	st	X, r24

	/*
	 * Configuring the required:
	 * parity type,stop bit, character size,
	 */
	UCSRC|=(1<<URSEL)|(1<<(Config_Ptr->parity))|(1<<(Config_Ptr->stop_bit))|(1<<(Config_Ptr->bit_data));
    2cba:	a0 e4       	ldi	r26, 0x40	; 64
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e0 e4       	ldi	r30, 0x40	; 64
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	58 2f       	mov	r21, r24
    2cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    2cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cca:	82 81       	ldd	r24, Z+2	; 0x02
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <UART_init+0x4a>
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	2a 95       	dec	r18
    2cdc:	e2 f7       	brpl	.-8      	; 0x2cd6 <UART_init+0x46>
    2cde:	48 2f       	mov	r20, r24
    2ce0:	40 68       	ori	r20, 0x80	; 128
    2ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce6:	81 81       	ldd	r24, Z+1	; 0x01
    2ce8:	28 2f       	mov	r18, r24
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <UART_init+0x66>
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	2a 95       	dec	r18
    2cf8:	e2 f7       	brpl	.-8      	; 0x2cf2 <UART_init+0x62>
    2cfa:	48 2b       	or	r20, r24
    2cfc:	eb 81       	ldd	r30, Y+3	; 0x03
    2cfe:	fc 81       	ldd	r31, Y+4	; 0x04
    2d00:	80 81       	ld	r24, Z
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <UART_init+0x80>
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	2a 95       	dec	r18
    2d12:	e2 f7       	brpl	.-8      	; 0x2d0c <UART_init+0x7c>
    2d14:	84 2b       	or	r24, r20
    2d16:	85 2b       	or	r24, r21
    2d18:	8c 93       	st	X, r24

	/*Calculating the UBRR value according to the required baud rate */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d1e:	83 81       	ldd	r24, Z+3	; 0x03
    2d20:	94 81       	ldd	r25, Z+4	; 0x04
    2d22:	a5 81       	ldd	r26, Z+5	; 0x05
    2d24:	b6 81       	ldd	r27, Z+6	; 0x06
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	aa 1f       	adc	r26, r26
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	aa 1f       	adc	r26, r26
    2d34:	bb 1f       	adc	r27, r27
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	aa 1f       	adc	r26, r26
    2d3c:	bb 1f       	adc	r27, r27
    2d3e:	9c 01       	movw	r18, r24
    2d40:	ad 01       	movw	r20, r26
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	92 e1       	ldi	r25, 0x12	; 18
    2d46:	aa e7       	ldi	r26, 0x7A	; 122
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__udivmodsi4>
    2d52:	da 01       	movw	r26, r20
    2d54:	c9 01       	movw	r24, r18
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01

	UBRRL = ubrr_value;
    2d5c:	e9 e2       	ldi	r30, 0x29	; 41
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	80 83       	st	Z, r24
	UBRRH = ubrr_value>>8;;
    2d64:	e0 e4       	ldi	r30, 0x40	; 64
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	89 2f       	mov	r24, r25
    2d6e:	99 27       	eor	r25, r25
    2d70:	80 83       	st	Z, r24
}
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	0f 92       	push	r0
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	89 83       	std	Y+1, r24	; 0x01
	/* Waiting until the transmit buffer becomes empty (ready for transmission a new byte)*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2d8c:	eb e2       	ldi	r30, 0x2B	; 43
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	80 72       	andi	r24, 0x20	; 32
    2d98:	90 70       	andi	r25, 0x00	; 0
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	b9 f3       	breq	.-18     	; 0x2d8c <UART_sendByte+0xc>
	UDR = data;
    2d9e:	ec e2       	ldi	r30, 0x2C	; 44
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	80 83       	st	Z, r24
}
    2da6:	0f 90       	pop	r0
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <UART_receiveByte>:

/* another receive function by polling to be used by the other device*/

uint8 UART_receiveByte(void)
{
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the receive buffer get the data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2db6:	eb e2       	ldi	r30, 0x2B	; 43
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	88 23       	and	r24, r24
    2dbe:	dc f7       	brge	.-10     	; 0x2db6 <UART_receiveByte+0x8>
	return UDR;
    2dc0:	ec e2       	ldi	r30, 0x2C	; 44
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
}
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <UART_sendString>:

void UART_sendString(const uint8 *str)
{
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <UART_sendString+0x6>
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	0a c0       	rjmp	.+20     	; 0x2df0 <UART_sendString+0x24>
	while(*str != '\0')
	{
		UART_sendByte(*str);
    2ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    2dde:	fa 81       	ldd	r31, Y+2	; 0x02
    2de0:	80 81       	ld	r24, Z
    2de2:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <UART_sendByte>
		str++;
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dea:	01 96       	adiw	r24, 0x01	; 1
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(const uint8 *str)
{
	while(*str != '\0')
    2df0:	e9 81       	ldd	r30, Y+1	; 0x01
    2df2:	fa 81       	ldd	r31, Y+2	; 0x02
    2df4:	80 81       	ld	r24, Z
    2df6:	88 23       	and	r24, r24
    2df8:	89 f7       	brne	.-30     	; 0x2ddc <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <UART_receiveString>:

/* another receive string function by polling
 * (i don't use it in this project)
 */
void UART_receiveString(uint8 *str)
{
    2e04:	0f 93       	push	r16
    2e06:	1f 93       	push	r17
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <UART_receiveString+0xa>
    2e0e:	0f 92       	push	r0
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	9b 83       	std	Y+3, r25	; 0x03
    2e16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2e18:	19 82       	std	Y+1, r1	; 0x01
	/*Receive the first byte*/
	str[i]=UART_receiveByte();
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	8c 01       	movw	r16, r24
    2e26:	02 0f       	add	r16, r18
    2e28:	13 1f       	adc	r17, r19
    2e2a:	0e 94 d7 16 	call	0x2dae	; 0x2dae <UART_receiveByte>
    2e2e:	f8 01       	movw	r30, r16
    2e30:	80 83       	st	Z, r24
    2e32:	0f c0       	rjmp	.+30     	; 0x2e52 <UART_receiveString+0x4e>

	/* then check for the '#'*/
	while(str[i]!='#')
	{
		i++;
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	8f 5f       	subi	r24, 0xFF	; 255
    2e38:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_receiveByte();
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	9b 81       	ldd	r25, Y+3	; 0x03
    2e44:	8c 01       	movw	r16, r24
    2e46:	02 0f       	add	r16, r18
    2e48:	13 1f       	adc	r17, r19
    2e4a:	0e 94 d7 16 	call	0x2dae	; 0x2dae <UART_receiveByte>
    2e4e:	f8 01       	movw	r30, r16
    2e50:	80 83       	st	Z, r24
	uint8 i=0;
	/*Receive the first byte*/
	str[i]=UART_receiveByte();

	/* then check for the '#'*/
	while(str[i]!='#')
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	28 2f       	mov	r18, r24
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	e2 0f       	add	r30, r18
    2e60:	f3 1f       	adc	r31, r19
    2e62:	80 81       	ld	r24, Z
    2e64:	83 32       	cpi	r24, 0x23	; 35
    2e66:	31 f7       	brne	.-52     	; 0x2e34 <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_receiveByte();
	}
	str[i]='\0';
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	9b 81       	ldd	r25, Y+3	; 0x03
    2e72:	fc 01       	movw	r30, r24
    2e74:	e2 0f       	add	r30, r18
    2e76:	f3 1f       	adc	r31, r19
    2e78:	10 82       	st	Z, r1
}
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	08 95       	ret

00002e8a <UART_clearBuffer>:

void UART_clearBuffer(void)
{
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
	g_uart_interrupt_counter=0;
    2e92:	10 92 47 01 	sts	0x0147, r1
    2e96:	0e c0       	rjmp	.+28     	; 0x2eb4 <UART_clearBuffer+0x2a>
	while(g_uart_interrupt_counter<20)
	{
		g_uart_buffer[g_uart_interrupt_counter]=CLEAR;
    2e98:	80 91 47 01 	lds	r24, 0x0147
    2e9c:	88 2f       	mov	r24, r24
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	ee 5a       	subi	r30, 0xAE	; 174
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	84 e6       	ldi	r24, 0x64	; 100
    2ea8:	80 83       	st	Z, r24
		g_uart_interrupt_counter++;
    2eaa:	80 91 47 01 	lds	r24, 0x0147
    2eae:	8f 5f       	subi	r24, 0xFF	; 255
    2eb0:	80 93 47 01 	sts	0x0147, r24
}

void UART_clearBuffer(void)
{
	g_uart_interrupt_counter=0;
	while(g_uart_interrupt_counter<20)
    2eb4:	80 91 47 01 	lds	r24, 0x0147
    2eb8:	84 31       	cpi	r24, 0x14	; 20
    2eba:	70 f3       	brcs	.-36     	; 0x2e98 <UART_clearBuffer+0xe>
	{
		g_uart_buffer[g_uart_interrupt_counter]=CLEAR;
		g_uart_interrupt_counter++;
	}
	g_uart_interrupt_counter=0;
    2ebc:	10 92 47 01 	sts	0x0147, r1
}
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <__udivmodsi4>:
    2ec6:	a1 e2       	ldi	r26, 0x21	; 33
    2ec8:	1a 2e       	mov	r1, r26
    2eca:	aa 1b       	sub	r26, r26
    2ecc:	bb 1b       	sub	r27, r27
    2ece:	fd 01       	movw	r30, r26
    2ed0:	0d c0       	rjmp	.+26     	; 0x2eec <__udivmodsi4_ep>

00002ed2 <__udivmodsi4_loop>:
    2ed2:	aa 1f       	adc	r26, r26
    2ed4:	bb 1f       	adc	r27, r27
    2ed6:	ee 1f       	adc	r30, r30
    2ed8:	ff 1f       	adc	r31, r31
    2eda:	a2 17       	cp	r26, r18
    2edc:	b3 07       	cpc	r27, r19
    2ede:	e4 07       	cpc	r30, r20
    2ee0:	f5 07       	cpc	r31, r21
    2ee2:	20 f0       	brcs	.+8      	; 0x2eec <__udivmodsi4_ep>
    2ee4:	a2 1b       	sub	r26, r18
    2ee6:	b3 0b       	sbc	r27, r19
    2ee8:	e4 0b       	sbc	r30, r20
    2eea:	f5 0b       	sbc	r31, r21

00002eec <__udivmodsi4_ep>:
    2eec:	66 1f       	adc	r22, r22
    2eee:	77 1f       	adc	r23, r23
    2ef0:	88 1f       	adc	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	1a 94       	dec	r1
    2ef6:	69 f7       	brne	.-38     	; 0x2ed2 <__udivmodsi4_loop>
    2ef8:	60 95       	com	r22
    2efa:	70 95       	com	r23
    2efc:	80 95       	com	r24
    2efe:	90 95       	com	r25
    2f00:	9b 01       	movw	r18, r22
    2f02:	ac 01       	movw	r20, r24
    2f04:	bd 01       	movw	r22, r26
    2f06:	cf 01       	movw	r24, r30
    2f08:	08 95       	ret

00002f0a <__prologue_saves__>:
    2f0a:	2f 92       	push	r2
    2f0c:	3f 92       	push	r3
    2f0e:	4f 92       	push	r4
    2f10:	5f 92       	push	r5
    2f12:	6f 92       	push	r6
    2f14:	7f 92       	push	r7
    2f16:	8f 92       	push	r8
    2f18:	9f 92       	push	r9
    2f1a:	af 92       	push	r10
    2f1c:	bf 92       	push	r11
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	ca 1b       	sub	r28, r26
    2f34:	db 0b       	sbc	r29, r27
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	09 94       	ijmp

00002f42 <__epilogue_restores__>:
    2f42:	2a 88       	ldd	r2, Y+18	; 0x12
    2f44:	39 88       	ldd	r3, Y+17	; 0x11
    2f46:	48 88       	ldd	r4, Y+16	; 0x10
    2f48:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f50:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f52:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f54:	b9 84       	ldd	r11, Y+9	; 0x09
    2f56:	c8 84       	ldd	r12, Y+8	; 0x08
    2f58:	df 80       	ldd	r13, Y+7	; 0x07
    2f5a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f5c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f5e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f60:	1b 81       	ldd	r17, Y+3	; 0x03
    2f62:	aa 81       	ldd	r26, Y+2	; 0x02
    2f64:	b9 81       	ldd	r27, Y+1	; 0x01
    2f66:	ce 0f       	add	r28, r30
    2f68:	d1 1d       	adc	r29, r1
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	ed 01       	movw	r28, r26
    2f76:	08 95       	ret

00002f78 <itoa>:
    2f78:	fb 01       	movw	r30, r22
    2f7a:	9f 01       	movw	r18, r30
    2f7c:	e8 94       	clt
    2f7e:	42 30       	cpi	r20, 0x02	; 2
    2f80:	c4 f0       	brlt	.+48     	; 0x2fb2 <itoa+0x3a>
    2f82:	45 32       	cpi	r20, 0x25	; 37
    2f84:	b4 f4       	brge	.+44     	; 0x2fb2 <itoa+0x3a>
    2f86:	4a 30       	cpi	r20, 0x0A	; 10
    2f88:	29 f4       	brne	.+10     	; 0x2f94 <itoa+0x1c>
    2f8a:	97 fb       	bst	r25, 7
    2f8c:	1e f4       	brtc	.+6      	; 0x2f94 <itoa+0x1c>
    2f8e:	90 95       	com	r25
    2f90:	81 95       	neg	r24
    2f92:	9f 4f       	sbci	r25, 0xFF	; 255
    2f94:	64 2f       	mov	r22, r20
    2f96:	77 27       	eor	r23, r23
    2f98:	0e 94 ed 17 	call	0x2fda	; 0x2fda <__udivmodhi4>
    2f9c:	80 5d       	subi	r24, 0xD0	; 208
    2f9e:	8a 33       	cpi	r24, 0x3A	; 58
    2fa0:	0c f0       	brlt	.+2      	; 0x2fa4 <itoa+0x2c>
    2fa2:	89 5d       	subi	r24, 0xD9	; 217
    2fa4:	81 93       	st	Z+, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	a1 f7       	brne	.-24     	; 0x2f94 <itoa+0x1c>
    2fac:	16 f4       	brtc	.+4      	; 0x2fb2 <itoa+0x3a>
    2fae:	5d e2       	ldi	r21, 0x2D	; 45
    2fb0:	51 93       	st	Z+, r21
    2fb2:	10 82       	st	Z, r1
    2fb4:	c9 01       	movw	r24, r18
    2fb6:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <strrev>

00002fba <strrev>:
    2fba:	dc 01       	movw	r26, r24
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	67 2f       	mov	r22, r23
    2fc0:	71 91       	ld	r23, Z+
    2fc2:	77 23       	and	r23, r23
    2fc4:	e1 f7       	brne	.-8      	; 0x2fbe <strrev+0x4>
    2fc6:	32 97       	sbiw	r30, 0x02	; 2
    2fc8:	04 c0       	rjmp	.+8      	; 0x2fd2 <strrev+0x18>
    2fca:	7c 91       	ld	r23, X
    2fcc:	6d 93       	st	X+, r22
    2fce:	70 83       	st	Z, r23
    2fd0:	62 91       	ld	r22, -Z
    2fd2:	ae 17       	cp	r26, r30
    2fd4:	bf 07       	cpc	r27, r31
    2fd6:	c8 f3       	brcs	.-14     	; 0x2fca <strrev+0x10>
    2fd8:	08 95       	ret

00002fda <__udivmodhi4>:
    2fda:	aa 1b       	sub	r26, r26
    2fdc:	bb 1b       	sub	r27, r27
    2fde:	51 e1       	ldi	r21, 0x11	; 17
    2fe0:	07 c0       	rjmp	.+14     	; 0x2ff0 <__udivmodhi4_ep>

00002fe2 <__udivmodhi4_loop>:
    2fe2:	aa 1f       	adc	r26, r26
    2fe4:	bb 1f       	adc	r27, r27
    2fe6:	a6 17       	cp	r26, r22
    2fe8:	b7 07       	cpc	r27, r23
    2fea:	10 f0       	brcs	.+4      	; 0x2ff0 <__udivmodhi4_ep>
    2fec:	a6 1b       	sub	r26, r22
    2fee:	b7 0b       	sbc	r27, r23

00002ff0 <__udivmodhi4_ep>:
    2ff0:	88 1f       	adc	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	5a 95       	dec	r21
    2ff6:	a9 f7       	brne	.-22     	; 0x2fe2 <__udivmodhi4_loop>
    2ff8:	80 95       	com	r24
    2ffa:	90 95       	com	r25
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	cd 01       	movw	r24, r26
    3000:	08 95       	ret

00003002 <_exit>:
    3002:	f8 94       	cli

00003004 <__stop_program>:
    3004:	ff cf       	rjmp	.-2      	; 0x3004 <__stop_program>
